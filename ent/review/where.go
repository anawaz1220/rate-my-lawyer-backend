// Code generated by ent, DO NOT EDIT.

package review

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldID, id))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldRating, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldComment, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldCreatedAt, v))
}

// LawyerReviews applies equality check predicate on the "lawyer_reviews" field. It's identical to LawyerReviewsEQ.
func LawyerReviews(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldLawyerReviews, v))
}

// RmlUserReviews applies equality check predicate on the "rml_user_reviews" field. It's identical to RmlUserReviewsEQ.
func RmlUserReviews(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldRmlUserReviews, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v int) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v int) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v int) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v int) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldRating, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Review {
	return predicate.Review(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Review {
	return predicate.Review(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Review {
	return predicate.Review(sql.FieldContainsFold(FieldComment, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldCreatedAt, v))
}

// LawyerReviewsEQ applies the EQ predicate on the "lawyer_reviews" field.
func LawyerReviewsEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldLawyerReviews, v))
}

// LawyerReviewsNEQ applies the NEQ predicate on the "lawyer_reviews" field.
func LawyerReviewsNEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldLawyerReviews, v))
}

// LawyerReviewsIn applies the In predicate on the "lawyer_reviews" field.
func LawyerReviewsIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldLawyerReviews, vs...))
}

// LawyerReviewsNotIn applies the NotIn predicate on the "lawyer_reviews" field.
func LawyerReviewsNotIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldLawyerReviews, vs...))
}

// LawyerReviewsIsNil applies the IsNil predicate on the "lawyer_reviews" field.
func LawyerReviewsIsNil() predicate.Review {
	return predicate.Review(sql.FieldIsNull(FieldLawyerReviews))
}

// LawyerReviewsNotNil applies the NotNil predicate on the "lawyer_reviews" field.
func LawyerReviewsNotNil() predicate.Review {
	return predicate.Review(sql.FieldNotNull(FieldLawyerReviews))
}

// RmlUserReviewsEQ applies the EQ predicate on the "rml_user_reviews" field.
func RmlUserReviewsEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldRmlUserReviews, v))
}

// RmlUserReviewsNEQ applies the NEQ predicate on the "rml_user_reviews" field.
func RmlUserReviewsNEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldRmlUserReviews, v))
}

// RmlUserReviewsIn applies the In predicate on the "rml_user_reviews" field.
func RmlUserReviewsIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldRmlUserReviews, vs...))
}

// RmlUserReviewsNotIn applies the NotIn predicate on the "rml_user_reviews" field.
func RmlUserReviewsNotIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldRmlUserReviews, vs...))
}

// RmlUserReviewsIsNil applies the IsNil predicate on the "rml_user_reviews" field.
func RmlUserReviewsIsNil() predicate.Review {
	return predicate.Review(sql.FieldIsNull(FieldRmlUserReviews))
}

// RmlUserReviewsNotNil applies the NotNil predicate on the "rml_user_reviews" field.
func RmlUserReviewsNotNil() predicate.Review {
	return predicate.Review(sql.FieldNotNull(FieldRmlUserReviews))
}

// HasLawyer applies the HasEdge predicate on the "lawyer" edge.
func HasLawyer() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LawyerTable, LawyerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLawyerWith applies the HasEdge predicate on the "lawyer" edge with a given conditions (other predicates).
func HasLawyerWith(preds ...predicate.Lawyer) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := newLawyerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.RMLUser) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Review) predicate.Review {
	return predicate.Review(sql.NotPredicates(p))
}
