// Code generated by ent, DO NOT EDIT.

package review

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the review type in the database.
	Label = "review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLawyerReviews holds the string denoting the lawyer_reviews field in the database.
	FieldLawyerReviews = "lawyer_reviews"
	// FieldRmlUserReviews holds the string denoting the rml_user_reviews field in the database.
	FieldRmlUserReviews = "rml_user_reviews"
	// EdgeLawyer holds the string denoting the lawyer edge name in mutations.
	EdgeLawyer = "lawyer"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the review in the database.
	Table = "reviews"
	// LawyerTable is the table that holds the lawyer relation/edge.
	LawyerTable = "reviews"
	// LawyerInverseTable is the table name for the Lawyer entity.
	// It exists in this package in order to avoid circular dependency with the "lawyer" package.
	LawyerInverseTable = "lawyers"
	// LawyerColumn is the table column denoting the lawyer relation/edge.
	LawyerColumn = "lawyer_reviews"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "reviews"
	// UserInverseTable is the table name for the RMLUser entity.
	// It exists in this package in order to avoid circular dependency with the "rmluser" package.
	UserInverseTable = "rml_users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "rml_user_reviews"
)

// Columns holds all SQL columns for review fields.
var Columns = []string{
	FieldID,
	FieldRating,
	FieldComment,
	FieldCreatedAt,
	FieldLawyerReviews,
	FieldRmlUserReviews,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RatingValidator is a validator for the "rating" field. It is called by the builders before save.
	RatingValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Review queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLawyerReviews orders the results by the lawyer_reviews field.
func ByLawyerReviews(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLawyerReviews, opts...).ToFunc()
}

// ByRmlUserReviews orders the results by the rml_user_reviews field.
func ByRmlUserReviews(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRmlUserReviews, opts...).ToFunc()
}

// ByLawyerField orders the results by lawyer field.
func ByLawyerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLawyerStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newLawyerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LawyerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LawyerTable, LawyerColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
