// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/mvpmaterial"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// MvpMaterialUpdate is the builder for updating MvpMaterial entities.
type MvpMaterialUpdate struct {
	config
	hooks    []Hook
	mutation *MvpMaterialMutation
}

// Where appends a list predicates to the MvpMaterialUpdate builder.
func (mmu *MvpMaterialUpdate) Where(ps ...predicate.MvpMaterial) *MvpMaterialUpdate {
	mmu.mutation.Where(ps...)
	return mmu
}

// SetName sets the "name" field.
func (mmu *MvpMaterialUpdate) SetName(s string) *MvpMaterialUpdate {
	mmu.mutation.SetName(s)
	return mmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mmu *MvpMaterialUpdate) SetNillableName(s *string) *MvpMaterialUpdate {
	if s != nil {
		mmu.SetName(*s)
	}
	return mmu
}

// Mutation returns the MvpMaterialMutation object of the builder.
func (mmu *MvpMaterialUpdate) Mutation() *MvpMaterialMutation {
	return mmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mmu *MvpMaterialUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mmu.sqlSave, mmu.mutation, mmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmu *MvpMaterialUpdate) SaveX(ctx context.Context) int {
	affected, err := mmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mmu *MvpMaterialUpdate) Exec(ctx context.Context) error {
	_, err := mmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmu *MvpMaterialUpdate) ExecX(ctx context.Context) {
	if err := mmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mmu *MvpMaterialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mvpmaterial.Table, mvpmaterial.Columns, sqlgraph.NewFieldSpec(mvpmaterial.FieldID, field.TypeInt))
	if ps := mmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmu.mutation.Name(); ok {
		_spec.SetField(mvpmaterial.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mvpmaterial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mmu.mutation.done = true
	return n, nil
}

// MvpMaterialUpdateOne is the builder for updating a single MvpMaterial entity.
type MvpMaterialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MvpMaterialMutation
}

// SetName sets the "name" field.
func (mmuo *MvpMaterialUpdateOne) SetName(s string) *MvpMaterialUpdateOne {
	mmuo.mutation.SetName(s)
	return mmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mmuo *MvpMaterialUpdateOne) SetNillableName(s *string) *MvpMaterialUpdateOne {
	if s != nil {
		mmuo.SetName(*s)
	}
	return mmuo
}

// Mutation returns the MvpMaterialMutation object of the builder.
func (mmuo *MvpMaterialUpdateOne) Mutation() *MvpMaterialMutation {
	return mmuo.mutation
}

// Where appends a list predicates to the MvpMaterialUpdate builder.
func (mmuo *MvpMaterialUpdateOne) Where(ps ...predicate.MvpMaterial) *MvpMaterialUpdateOne {
	mmuo.mutation.Where(ps...)
	return mmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mmuo *MvpMaterialUpdateOne) Select(field string, fields ...string) *MvpMaterialUpdateOne {
	mmuo.fields = append([]string{field}, fields...)
	return mmuo
}

// Save executes the query and returns the updated MvpMaterial entity.
func (mmuo *MvpMaterialUpdateOne) Save(ctx context.Context) (*MvpMaterial, error) {
	return withHooks(ctx, mmuo.sqlSave, mmuo.mutation, mmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmuo *MvpMaterialUpdateOne) SaveX(ctx context.Context) *MvpMaterial {
	node, err := mmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mmuo *MvpMaterialUpdateOne) Exec(ctx context.Context) error {
	_, err := mmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmuo *MvpMaterialUpdateOne) ExecX(ctx context.Context) {
	if err := mmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mmuo *MvpMaterialUpdateOne) sqlSave(ctx context.Context) (_node *MvpMaterial, err error) {
	_spec := sqlgraph.NewUpdateSpec(mvpmaterial.Table, mvpmaterial.Columns, sqlgraph.NewFieldSpec(mvpmaterial.FieldID, field.TypeInt))
	id, ok := mmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MvpMaterial.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mvpmaterial.FieldID)
		for _, f := range fields {
			if !mvpmaterial.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mvpmaterial.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmuo.mutation.Name(); ok {
		_spec.SetField(mvpmaterial.FieldName, field.TypeString, value)
	}
	_node = &MvpMaterial{config: mmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mvpmaterial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mmuo.mutation.done = true
	return _node, nil
}
