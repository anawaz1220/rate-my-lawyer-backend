// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/jurisdiction"
	"github.com/mikestefanello/pagoda/ent/lawyer"
	"github.com/mikestefanello/pagoda/ent/lawyerjurisdiction"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// JurisdictionQuery is the builder for querying Jurisdiction entities.
type JurisdictionQuery struct {
	config
	ctx                     *QueryContext
	order                   []jurisdiction.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Jurisdiction
	withLawyers             *LawyerQuery
	withLawyerJurisdictions *LawyerJurisdictionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JurisdictionQuery builder.
func (jq *JurisdictionQuery) Where(ps ...predicate.Jurisdiction) *JurisdictionQuery {
	jq.predicates = append(jq.predicates, ps...)
	return jq
}

// Limit the number of records to be returned by this query.
func (jq *JurisdictionQuery) Limit(limit int) *JurisdictionQuery {
	jq.ctx.Limit = &limit
	return jq
}

// Offset to start from.
func (jq *JurisdictionQuery) Offset(offset int) *JurisdictionQuery {
	jq.ctx.Offset = &offset
	return jq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jq *JurisdictionQuery) Unique(unique bool) *JurisdictionQuery {
	jq.ctx.Unique = &unique
	return jq
}

// Order specifies how the records should be ordered.
func (jq *JurisdictionQuery) Order(o ...jurisdiction.OrderOption) *JurisdictionQuery {
	jq.order = append(jq.order, o...)
	return jq
}

// QueryLawyers chains the current query on the "lawyers" edge.
func (jq *JurisdictionQuery) QueryLawyers() *LawyerQuery {
	query := (&LawyerClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jurisdiction.Table, jurisdiction.FieldID, selector),
			sqlgraph.To(lawyer.Table, lawyer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, jurisdiction.LawyersTable, jurisdiction.LawyersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLawyerJurisdictions chains the current query on the "lawyer_jurisdictions" edge.
func (jq *JurisdictionQuery) QueryLawyerJurisdictions() *LawyerJurisdictionQuery {
	query := (&LawyerJurisdictionClient{config: jq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jurisdiction.Table, jurisdiction.FieldID, selector),
			sqlgraph.To(lawyerjurisdiction.Table, lawyerjurisdiction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, jurisdiction.LawyerJurisdictionsTable, jurisdiction.LawyerJurisdictionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Jurisdiction entity from the query.
// Returns a *NotFoundError when no Jurisdiction was found.
func (jq *JurisdictionQuery) First(ctx context.Context) (*Jurisdiction, error) {
	nodes, err := jq.Limit(1).All(setContextOp(ctx, jq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jurisdiction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jq *JurisdictionQuery) FirstX(ctx context.Context) *Jurisdiction {
	node, err := jq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Jurisdiction ID from the query.
// Returns a *NotFoundError when no Jurisdiction ID was found.
func (jq *JurisdictionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jq.Limit(1).IDs(setContextOp(ctx, jq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jurisdiction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jq *JurisdictionQuery) FirstIDX(ctx context.Context) int {
	id, err := jq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Jurisdiction entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Jurisdiction entity is found.
// Returns a *NotFoundError when no Jurisdiction entities are found.
func (jq *JurisdictionQuery) Only(ctx context.Context) (*Jurisdiction, error) {
	nodes, err := jq.Limit(2).All(setContextOp(ctx, jq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jurisdiction.Label}
	default:
		return nil, &NotSingularError{jurisdiction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jq *JurisdictionQuery) OnlyX(ctx context.Context) *Jurisdiction {
	node, err := jq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Jurisdiction ID in the query.
// Returns a *NotSingularError when more than one Jurisdiction ID is found.
// Returns a *NotFoundError when no entities are found.
func (jq *JurisdictionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jq.Limit(2).IDs(setContextOp(ctx, jq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jurisdiction.Label}
	default:
		err = &NotSingularError{jurisdiction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jq *JurisdictionQuery) OnlyIDX(ctx context.Context) int {
	id, err := jq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Jurisdictions.
func (jq *JurisdictionQuery) All(ctx context.Context) ([]*Jurisdiction, error) {
	ctx = setContextOp(ctx, jq.ctx, "All")
	if err := jq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Jurisdiction, *JurisdictionQuery]()
	return withInterceptors[[]*Jurisdiction](ctx, jq, qr, jq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jq *JurisdictionQuery) AllX(ctx context.Context) []*Jurisdiction {
	nodes, err := jq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Jurisdiction IDs.
func (jq *JurisdictionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if jq.ctx.Unique == nil && jq.path != nil {
		jq.Unique(true)
	}
	ctx = setContextOp(ctx, jq.ctx, "IDs")
	if err = jq.Select(jurisdiction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jq *JurisdictionQuery) IDsX(ctx context.Context) []int {
	ids, err := jq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jq *JurisdictionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jq.ctx, "Count")
	if err := jq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jq, querierCount[*JurisdictionQuery](), jq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jq *JurisdictionQuery) CountX(ctx context.Context) int {
	count, err := jq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jq *JurisdictionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jq.ctx, "Exist")
	switch _, err := jq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jq *JurisdictionQuery) ExistX(ctx context.Context) bool {
	exist, err := jq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JurisdictionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jq *JurisdictionQuery) Clone() *JurisdictionQuery {
	if jq == nil {
		return nil
	}
	return &JurisdictionQuery{
		config:                  jq.config,
		ctx:                     jq.ctx.Clone(),
		order:                   append([]jurisdiction.OrderOption{}, jq.order...),
		inters:                  append([]Interceptor{}, jq.inters...),
		predicates:              append([]predicate.Jurisdiction{}, jq.predicates...),
		withLawyers:             jq.withLawyers.Clone(),
		withLawyerJurisdictions: jq.withLawyerJurisdictions.Clone(),
		// clone intermediate query.
		sql:  jq.sql.Clone(),
		path: jq.path,
	}
}

// WithLawyers tells the query-builder to eager-load the nodes that are connected to
// the "lawyers" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JurisdictionQuery) WithLawyers(opts ...func(*LawyerQuery)) *JurisdictionQuery {
	query := (&LawyerClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withLawyers = query
	return jq
}

// WithLawyerJurisdictions tells the query-builder to eager-load the nodes that are connected to
// the "lawyer_jurisdictions" edge. The optional arguments are used to configure the query builder of the edge.
func (jq *JurisdictionQuery) WithLawyerJurisdictions(opts ...func(*LawyerJurisdictionQuery)) *JurisdictionQuery {
	query := (&LawyerJurisdictionClient{config: jq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jq.withLawyerJurisdictions = query
	return jq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Jurisdiction.Query().
//		GroupBy(jurisdiction.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (jq *JurisdictionQuery) GroupBy(field string, fields ...string) *JurisdictionGroupBy {
	jq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JurisdictionGroupBy{build: jq}
	grbuild.flds = &jq.ctx.Fields
	grbuild.label = jurisdiction.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Jurisdiction.Query().
//		Select(jurisdiction.FieldName).
//		Scan(ctx, &v)
func (jq *JurisdictionQuery) Select(fields ...string) *JurisdictionSelect {
	jq.ctx.Fields = append(jq.ctx.Fields, fields...)
	sbuild := &JurisdictionSelect{JurisdictionQuery: jq}
	sbuild.label = jurisdiction.Label
	sbuild.flds, sbuild.scan = &jq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JurisdictionSelect configured with the given aggregations.
func (jq *JurisdictionQuery) Aggregate(fns ...AggregateFunc) *JurisdictionSelect {
	return jq.Select().Aggregate(fns...)
}

func (jq *JurisdictionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jq); err != nil {
				return err
			}
		}
	}
	for _, f := range jq.ctx.Fields {
		if !jurisdiction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jq.path != nil {
		prev, err := jq.path(ctx)
		if err != nil {
			return err
		}
		jq.sql = prev
	}
	return nil
}

func (jq *JurisdictionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Jurisdiction, error) {
	var (
		nodes       = []*Jurisdiction{}
		_spec       = jq.querySpec()
		loadedTypes = [2]bool{
			jq.withLawyers != nil,
			jq.withLawyerJurisdictions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Jurisdiction).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Jurisdiction{config: jq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jq.withLawyers; query != nil {
		if err := jq.loadLawyers(ctx, query, nodes,
			func(n *Jurisdiction) { n.Edges.Lawyers = []*Lawyer{} },
			func(n *Jurisdiction, e *Lawyer) { n.Edges.Lawyers = append(n.Edges.Lawyers, e) }); err != nil {
			return nil, err
		}
	}
	if query := jq.withLawyerJurisdictions; query != nil {
		if err := jq.loadLawyerJurisdictions(ctx, query, nodes,
			func(n *Jurisdiction) { n.Edges.LawyerJurisdictions = []*LawyerJurisdiction{} },
			func(n *Jurisdiction, e *LawyerJurisdiction) {
				n.Edges.LawyerJurisdictions = append(n.Edges.LawyerJurisdictions, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jq *JurisdictionQuery) loadLawyers(ctx context.Context, query *LawyerQuery, nodes []*Jurisdiction, init func(*Jurisdiction), assign func(*Jurisdiction, *Lawyer)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Jurisdiction)
	nids := make(map[int]map[*Jurisdiction]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(jurisdiction.LawyersTable)
		s.Join(joinT).On(s.C(lawyer.FieldID), joinT.C(jurisdiction.LawyersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(jurisdiction.LawyersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(jurisdiction.LawyersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Jurisdiction]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Lawyer](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "lawyers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (jq *JurisdictionQuery) loadLawyerJurisdictions(ctx context.Context, query *LawyerJurisdictionQuery, nodes []*Jurisdiction, init func(*Jurisdiction), assign func(*Jurisdiction, *LawyerJurisdiction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Jurisdiction)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(lawyerjurisdiction.FieldJurisdictionID)
	}
	query.Where(predicate.LawyerJurisdiction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jurisdiction.LawyerJurisdictionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.JurisdictionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "jurisdiction_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (jq *JurisdictionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jq.querySpec()
	_spec.Node.Columns = jq.ctx.Fields
	if len(jq.ctx.Fields) > 0 {
		_spec.Unique = jq.ctx.Unique != nil && *jq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jq.driver, _spec)
}

func (jq *JurisdictionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jurisdiction.Table, jurisdiction.Columns, sqlgraph.NewFieldSpec(jurisdiction.FieldID, field.TypeInt))
	_spec.From = jq.sql
	if unique := jq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jq.path != nil {
		_spec.Unique = true
	}
	if fields := jq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jurisdiction.FieldID)
		for i := range fields {
			if fields[i] != jurisdiction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jq *JurisdictionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jq.driver.Dialect())
	t1 := builder.Table(jurisdiction.Table)
	columns := jq.ctx.Fields
	if len(columns) == 0 {
		columns = jurisdiction.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jq.sql != nil {
		selector = jq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jq.ctx.Unique != nil && *jq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range jq.predicates {
		p(selector)
	}
	for _, p := range jq.order {
		p(selector)
	}
	if offset := jq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// JurisdictionGroupBy is the group-by builder for Jurisdiction entities.
type JurisdictionGroupBy struct {
	selector
	build *JurisdictionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jgb *JurisdictionGroupBy) Aggregate(fns ...AggregateFunc) *JurisdictionGroupBy {
	jgb.fns = append(jgb.fns, fns...)
	return jgb
}

// Scan applies the selector query and scans the result into the given value.
func (jgb *JurisdictionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jgb.build.ctx, "GroupBy")
	if err := jgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JurisdictionQuery, *JurisdictionGroupBy](ctx, jgb.build, jgb, jgb.build.inters, v)
}

func (jgb *JurisdictionGroupBy) sqlScan(ctx context.Context, root *JurisdictionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jgb.fns))
	for _, fn := range jgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jgb.flds)+len(jgb.fns))
		for _, f := range *jgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JurisdictionSelect is the builder for selecting fields of Jurisdiction entities.
type JurisdictionSelect struct {
	*JurisdictionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (js *JurisdictionSelect) Aggregate(fns ...AggregateFunc) *JurisdictionSelect {
	js.fns = append(js.fns, fns...)
	return js
}

// Scan applies the selector query and scans the result into the given value.
func (js *JurisdictionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, js.ctx, "Select")
	if err := js.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JurisdictionQuery, *JurisdictionSelect](ctx, js.JurisdictionQuery, js, js.inters, v)
}

func (js *JurisdictionSelect) sqlScan(ctx context.Context, root *JurisdictionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(js.fns))
	for _, fn := range js.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*js.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := js.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
