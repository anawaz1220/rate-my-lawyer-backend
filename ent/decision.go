// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/decision"
	"github.com/mikestefanello/pagoda/ent/lawyer"
)

// Decision is the model entity for the Decision schema.
type Decision struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DecisionQuery when eager-loading is set.
	Edges            DecisionEdges `json:"edges"`
	lawyer_decisions *int
	selectValues     sql.SelectValues
}

// DecisionEdges holds the relations/edges for other nodes in the graph.
type DecisionEdges struct {
	// Lawyer holds the value of the lawyer edge.
	Lawyer *Lawyer `json:"lawyer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LawyerOrErr returns the Lawyer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DecisionEdges) LawyerOrErr() (*Lawyer, error) {
	if e.Lawyer != nil {
		return e.Lawyer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lawyer.Label}
	}
	return nil, &NotLoadedError{edge: "lawyer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Decision) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case decision.FieldID:
			values[i] = new(sql.NullInt64)
		case decision.FieldURL:
			values[i] = new(sql.NullString)
		case decision.ForeignKeys[0]: // lawyer_decisions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Decision fields.
func (d *Decision) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case decision.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case decision.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				d.URL = value.String
			}
		case decision.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field lawyer_decisions", value)
			} else if value.Valid {
				d.lawyer_decisions = new(int)
				*d.lawyer_decisions = int(value.Int64)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Decision.
// This includes values selected through modifiers, order, etc.
func (d *Decision) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryLawyer queries the "lawyer" edge of the Decision entity.
func (d *Decision) QueryLawyer() *LawyerQuery {
	return NewDecisionClient(d.config).QueryLawyer(d)
}

// Update returns a builder for updating this Decision.
// Note that you need to call Decision.Unwrap() before calling this method if this Decision
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Decision) Update() *DecisionUpdateOne {
	return NewDecisionClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Decision entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Decision) Unwrap() *Decision {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Decision is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Decision) String() string {
	var builder strings.Builder
	builder.WriteString("Decision(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("url=")
	builder.WriteString(d.URL)
	builder.WriteByte(')')
	return builder.String()
}

// Decisions is a parsable slice of Decision.
type Decisions []*Decision
