// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/review"
	"github.com/mikestefanello/pagoda/ent/rmluser"
)

// RMLUserQuery is the builder for querying RMLUser entities.
type RMLUserQuery struct {
	config
	ctx         *QueryContext
	order       []rmluser.OrderOption
	inters      []Interceptor
	predicates  []predicate.RMLUser
	withReviews *ReviewQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RMLUserQuery builder.
func (ruq *RMLUserQuery) Where(ps ...predicate.RMLUser) *RMLUserQuery {
	ruq.predicates = append(ruq.predicates, ps...)
	return ruq
}

// Limit the number of records to be returned by this query.
func (ruq *RMLUserQuery) Limit(limit int) *RMLUserQuery {
	ruq.ctx.Limit = &limit
	return ruq
}

// Offset to start from.
func (ruq *RMLUserQuery) Offset(offset int) *RMLUserQuery {
	ruq.ctx.Offset = &offset
	return ruq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ruq *RMLUserQuery) Unique(unique bool) *RMLUserQuery {
	ruq.ctx.Unique = &unique
	return ruq
}

// Order specifies how the records should be ordered.
func (ruq *RMLUserQuery) Order(o ...rmluser.OrderOption) *RMLUserQuery {
	ruq.order = append(ruq.order, o...)
	return ruq
}

// QueryReviews chains the current query on the "reviews" edge.
func (ruq *RMLUserQuery) QueryReviews() *ReviewQuery {
	query := (&ReviewClient{config: ruq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ruq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ruq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rmluser.Table, rmluser.FieldID, selector),
			sqlgraph.To(review.Table, review.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rmluser.ReviewsTable, rmluser.ReviewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ruq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RMLUser entity from the query.
// Returns a *NotFoundError when no RMLUser was found.
func (ruq *RMLUserQuery) First(ctx context.Context) (*RMLUser, error) {
	nodes, err := ruq.Limit(1).All(setContextOp(ctx, ruq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rmluser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ruq *RMLUserQuery) FirstX(ctx context.Context) *RMLUser {
	node, err := ruq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RMLUser ID from the query.
// Returns a *NotFoundError when no RMLUser ID was found.
func (ruq *RMLUserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ruq.Limit(1).IDs(setContextOp(ctx, ruq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{rmluser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ruq *RMLUserQuery) FirstIDX(ctx context.Context) int {
	id, err := ruq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RMLUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RMLUser entity is found.
// Returns a *NotFoundError when no RMLUser entities are found.
func (ruq *RMLUserQuery) Only(ctx context.Context) (*RMLUser, error) {
	nodes, err := ruq.Limit(2).All(setContextOp(ctx, ruq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rmluser.Label}
	default:
		return nil, &NotSingularError{rmluser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ruq *RMLUserQuery) OnlyX(ctx context.Context) *RMLUser {
	node, err := ruq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RMLUser ID in the query.
// Returns a *NotSingularError when more than one RMLUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (ruq *RMLUserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ruq.Limit(2).IDs(setContextOp(ctx, ruq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{rmluser.Label}
	default:
		err = &NotSingularError{rmluser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ruq *RMLUserQuery) OnlyIDX(ctx context.Context) int {
	id, err := ruq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RMLUsers.
func (ruq *RMLUserQuery) All(ctx context.Context) ([]*RMLUser, error) {
	ctx = setContextOp(ctx, ruq.ctx, "All")
	if err := ruq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RMLUser, *RMLUserQuery]()
	return withInterceptors[[]*RMLUser](ctx, ruq, qr, ruq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ruq *RMLUserQuery) AllX(ctx context.Context) []*RMLUser {
	nodes, err := ruq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RMLUser IDs.
func (ruq *RMLUserQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ruq.ctx.Unique == nil && ruq.path != nil {
		ruq.Unique(true)
	}
	ctx = setContextOp(ctx, ruq.ctx, "IDs")
	if err = ruq.Select(rmluser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ruq *RMLUserQuery) IDsX(ctx context.Context) []int {
	ids, err := ruq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ruq *RMLUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ruq.ctx, "Count")
	if err := ruq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ruq, querierCount[*RMLUserQuery](), ruq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ruq *RMLUserQuery) CountX(ctx context.Context) int {
	count, err := ruq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ruq *RMLUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ruq.ctx, "Exist")
	switch _, err := ruq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ruq *RMLUserQuery) ExistX(ctx context.Context) bool {
	exist, err := ruq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RMLUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ruq *RMLUserQuery) Clone() *RMLUserQuery {
	if ruq == nil {
		return nil
	}
	return &RMLUserQuery{
		config:      ruq.config,
		ctx:         ruq.ctx.Clone(),
		order:       append([]rmluser.OrderOption{}, ruq.order...),
		inters:      append([]Interceptor{}, ruq.inters...),
		predicates:  append([]predicate.RMLUser{}, ruq.predicates...),
		withReviews: ruq.withReviews.Clone(),
		// clone intermediate query.
		sql:  ruq.sql.Clone(),
		path: ruq.path,
	}
}

// WithReviews tells the query-builder to eager-load the nodes that are connected to
// the "reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (ruq *RMLUserQuery) WithReviews(opts ...func(*ReviewQuery)) *RMLUserQuery {
	query := (&ReviewClient{config: ruq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ruq.withReviews = query
	return ruq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RMLUser.Query().
//		GroupBy(rmluser.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ruq *RMLUserQuery) GroupBy(field string, fields ...string) *RMLUserGroupBy {
	ruq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RMLUserGroupBy{build: ruq}
	grbuild.flds = &ruq.ctx.Fields
	grbuild.label = rmluser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.RMLUser.Query().
//		Select(rmluser.FieldName).
//		Scan(ctx, &v)
func (ruq *RMLUserQuery) Select(fields ...string) *RMLUserSelect {
	ruq.ctx.Fields = append(ruq.ctx.Fields, fields...)
	sbuild := &RMLUserSelect{RMLUserQuery: ruq}
	sbuild.label = rmluser.Label
	sbuild.flds, sbuild.scan = &ruq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RMLUserSelect configured with the given aggregations.
func (ruq *RMLUserQuery) Aggregate(fns ...AggregateFunc) *RMLUserSelect {
	return ruq.Select().Aggregate(fns...)
}

func (ruq *RMLUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ruq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ruq); err != nil {
				return err
			}
		}
	}
	for _, f := range ruq.ctx.Fields {
		if !rmluser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ruq.path != nil {
		prev, err := ruq.path(ctx)
		if err != nil {
			return err
		}
		ruq.sql = prev
	}
	return nil
}

func (ruq *RMLUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RMLUser, error) {
	var (
		nodes       = []*RMLUser{}
		_spec       = ruq.querySpec()
		loadedTypes = [1]bool{
			ruq.withReviews != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RMLUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RMLUser{config: ruq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ruq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ruq.withReviews; query != nil {
		if err := ruq.loadReviews(ctx, query, nodes,
			func(n *RMLUser) { n.Edges.Reviews = []*Review{} },
			func(n *RMLUser, e *Review) { n.Edges.Reviews = append(n.Edges.Reviews, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ruq *RMLUserQuery) loadReviews(ctx context.Context, query *ReviewQuery, nodes []*RMLUser, init func(*RMLUser), assign func(*RMLUser, *Review)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*RMLUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(review.FieldRmlUserReviews)
	}
	query.Where(predicate.Review(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rmluser.ReviewsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RmlUserReviews
		if fk == nil {
			return fmt.Errorf(`foreign-key "rml_user_reviews" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "rml_user_reviews" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ruq *RMLUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ruq.querySpec()
	_spec.Node.Columns = ruq.ctx.Fields
	if len(ruq.ctx.Fields) > 0 {
		_spec.Unique = ruq.ctx.Unique != nil && *ruq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ruq.driver, _spec)
}

func (ruq *RMLUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(rmluser.Table, rmluser.Columns, sqlgraph.NewFieldSpec(rmluser.FieldID, field.TypeInt))
	_spec.From = ruq.sql
	if unique := ruq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ruq.path != nil {
		_spec.Unique = true
	}
	if fields := ruq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rmluser.FieldID)
		for i := range fields {
			if fields[i] != rmluser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ruq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ruq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ruq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ruq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ruq *RMLUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ruq.driver.Dialect())
	t1 := builder.Table(rmluser.Table)
	columns := ruq.ctx.Fields
	if len(columns) == 0 {
		columns = rmluser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ruq.sql != nil {
		selector = ruq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ruq.ctx.Unique != nil && *ruq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ruq.predicates {
		p(selector)
	}
	for _, p := range ruq.order {
		p(selector)
	}
	if offset := ruq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ruq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RMLUserGroupBy is the group-by builder for RMLUser entities.
type RMLUserGroupBy struct {
	selector
	build *RMLUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rugb *RMLUserGroupBy) Aggregate(fns ...AggregateFunc) *RMLUserGroupBy {
	rugb.fns = append(rugb.fns, fns...)
	return rugb
}

// Scan applies the selector query and scans the result into the given value.
func (rugb *RMLUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rugb.build.ctx, "GroupBy")
	if err := rugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RMLUserQuery, *RMLUserGroupBy](ctx, rugb.build, rugb, rugb.build.inters, v)
}

func (rugb *RMLUserGroupBy) sqlScan(ctx context.Context, root *RMLUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rugb.fns))
	for _, fn := range rugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rugb.flds)+len(rugb.fns))
		for _, f := range *rugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RMLUserSelect is the builder for selecting fields of RMLUser entities.
type RMLUserSelect struct {
	*RMLUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rus *RMLUserSelect) Aggregate(fns ...AggregateFunc) *RMLUserSelect {
	rus.fns = append(rus.fns, fns...)
	return rus
}

// Scan applies the selector query and scans the result into the given value.
func (rus *RMLUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rus.ctx, "Select")
	if err := rus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RMLUserQuery, *RMLUserSelect](ctx, rus.RMLUserQuery, rus, rus.inters, v)
}

func (rus *RMLUserSelect) sqlScan(ctx context.Context, root *RMLUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rus.fns))
	for _, fn := range rus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
