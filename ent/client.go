// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/mikestefanello/pagoda/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/decision"
	"github.com/mikestefanello/pagoda/ent/jurisdiction"
	"github.com/mikestefanello/pagoda/ent/lawyer"
	"github.com/mikestefanello/pagoda/ent/lawyerjurisdiction"
	"github.com/mikestefanello/pagoda/ent/mvpmaterial"
	"github.com/mikestefanello/pagoda/ent/mvpplannedroute"
	"github.com/mikestefanello/pagoda/ent/mvproute"
	"github.com/mikestefanello/pagoda/ent/mvpstaff"
	"github.com/mikestefanello/pagoda/ent/mvptruck"
	"github.com/mikestefanello/pagoda/ent/passwordtoken"
	"github.com/mikestefanello/pagoda/ent/review"
	"github.com/mikestefanello/pagoda/ent/rmluser"
	"github.com/mikestefanello/pagoda/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Decision is the client for interacting with the Decision builders.
	Decision *DecisionClient
	// Jurisdiction is the client for interacting with the Jurisdiction builders.
	Jurisdiction *JurisdictionClient
	// Lawyer is the client for interacting with the Lawyer builders.
	Lawyer *LawyerClient
	// LawyerJurisdiction is the client for interacting with the LawyerJurisdiction builders.
	LawyerJurisdiction *LawyerJurisdictionClient
	// MvpMaterial is the client for interacting with the MvpMaterial builders.
	MvpMaterial *MvpMaterialClient
	// MvpPlannedRoute is the client for interacting with the MvpPlannedRoute builders.
	MvpPlannedRoute *MvpPlannedRouteClient
	// MvpRoute is the client for interacting with the MvpRoute builders.
	MvpRoute *MvpRouteClient
	// MvpStaff is the client for interacting with the MvpStaff builders.
	MvpStaff *MvpStaffClient
	// MvpTruck is the client for interacting with the MvpTruck builders.
	MvpTruck *MvpTruckClient
	// PasswordToken is the client for interacting with the PasswordToken builders.
	PasswordToken *PasswordTokenClient
	// RMLUser is the client for interacting with the RMLUser builders.
	RMLUser *RMLUserClient
	// Review is the client for interacting with the Review builders.
	Review *ReviewClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Decision = NewDecisionClient(c.config)
	c.Jurisdiction = NewJurisdictionClient(c.config)
	c.Lawyer = NewLawyerClient(c.config)
	c.LawyerJurisdiction = NewLawyerJurisdictionClient(c.config)
	c.MvpMaterial = NewMvpMaterialClient(c.config)
	c.MvpPlannedRoute = NewMvpPlannedRouteClient(c.config)
	c.MvpRoute = NewMvpRouteClient(c.config)
	c.MvpStaff = NewMvpStaffClient(c.config)
	c.MvpTruck = NewMvpTruckClient(c.config)
	c.PasswordToken = NewPasswordTokenClient(c.config)
	c.RMLUser = NewRMLUserClient(c.config)
	c.Review = NewReviewClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Decision:           NewDecisionClient(cfg),
		Jurisdiction:       NewJurisdictionClient(cfg),
		Lawyer:             NewLawyerClient(cfg),
		LawyerJurisdiction: NewLawyerJurisdictionClient(cfg),
		MvpMaterial:        NewMvpMaterialClient(cfg),
		MvpPlannedRoute:    NewMvpPlannedRouteClient(cfg),
		MvpRoute:           NewMvpRouteClient(cfg),
		MvpStaff:           NewMvpStaffClient(cfg),
		MvpTruck:           NewMvpTruckClient(cfg),
		PasswordToken:      NewPasswordTokenClient(cfg),
		RMLUser:            NewRMLUserClient(cfg),
		Review:             NewReviewClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Decision:           NewDecisionClient(cfg),
		Jurisdiction:       NewJurisdictionClient(cfg),
		Lawyer:             NewLawyerClient(cfg),
		LawyerJurisdiction: NewLawyerJurisdictionClient(cfg),
		MvpMaterial:        NewMvpMaterialClient(cfg),
		MvpPlannedRoute:    NewMvpPlannedRouteClient(cfg),
		MvpRoute:           NewMvpRouteClient(cfg),
		MvpStaff:           NewMvpStaffClient(cfg),
		MvpTruck:           NewMvpTruckClient(cfg),
		PasswordToken:      NewPasswordTokenClient(cfg),
		RMLUser:            NewRMLUserClient(cfg),
		Review:             NewReviewClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Decision.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Decision, c.Jurisdiction, c.Lawyer, c.LawyerJurisdiction, c.MvpMaterial,
		c.MvpPlannedRoute, c.MvpRoute, c.MvpStaff, c.MvpTruck, c.PasswordToken,
		c.RMLUser, c.Review, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Decision, c.Jurisdiction, c.Lawyer, c.LawyerJurisdiction, c.MvpMaterial,
		c.MvpPlannedRoute, c.MvpRoute, c.MvpStaff, c.MvpTruck, c.PasswordToken,
		c.RMLUser, c.Review, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DecisionMutation:
		return c.Decision.mutate(ctx, m)
	case *JurisdictionMutation:
		return c.Jurisdiction.mutate(ctx, m)
	case *LawyerMutation:
		return c.Lawyer.mutate(ctx, m)
	case *LawyerJurisdictionMutation:
		return c.LawyerJurisdiction.mutate(ctx, m)
	case *MvpMaterialMutation:
		return c.MvpMaterial.mutate(ctx, m)
	case *MvpPlannedRouteMutation:
		return c.MvpPlannedRoute.mutate(ctx, m)
	case *MvpRouteMutation:
		return c.MvpRoute.mutate(ctx, m)
	case *MvpStaffMutation:
		return c.MvpStaff.mutate(ctx, m)
	case *MvpTruckMutation:
		return c.MvpTruck.mutate(ctx, m)
	case *PasswordTokenMutation:
		return c.PasswordToken.mutate(ctx, m)
	case *RMLUserMutation:
		return c.RMLUser.mutate(ctx, m)
	case *ReviewMutation:
		return c.Review.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DecisionClient is a client for the Decision schema.
type DecisionClient struct {
	config
}

// NewDecisionClient returns a client for the Decision from the given config.
func NewDecisionClient(c config) *DecisionClient {
	return &DecisionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `decision.Hooks(f(g(h())))`.
func (c *DecisionClient) Use(hooks ...Hook) {
	c.hooks.Decision = append(c.hooks.Decision, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `decision.Intercept(f(g(h())))`.
func (c *DecisionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Decision = append(c.inters.Decision, interceptors...)
}

// Create returns a builder for creating a Decision entity.
func (c *DecisionClient) Create() *DecisionCreate {
	mutation := newDecisionMutation(c.config, OpCreate)
	return &DecisionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Decision entities.
func (c *DecisionClient) CreateBulk(builders ...*DecisionCreate) *DecisionCreateBulk {
	return &DecisionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DecisionClient) MapCreateBulk(slice any, setFunc func(*DecisionCreate, int)) *DecisionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DecisionCreateBulk{err: fmt.Errorf("calling to DecisionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DecisionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DecisionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Decision.
func (c *DecisionClient) Update() *DecisionUpdate {
	mutation := newDecisionMutation(c.config, OpUpdate)
	return &DecisionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DecisionClient) UpdateOne(d *Decision) *DecisionUpdateOne {
	mutation := newDecisionMutation(c.config, OpUpdateOne, withDecision(d))
	return &DecisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DecisionClient) UpdateOneID(id int) *DecisionUpdateOne {
	mutation := newDecisionMutation(c.config, OpUpdateOne, withDecisionID(id))
	return &DecisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Decision.
func (c *DecisionClient) Delete() *DecisionDelete {
	mutation := newDecisionMutation(c.config, OpDelete)
	return &DecisionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DecisionClient) DeleteOne(d *Decision) *DecisionDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DecisionClient) DeleteOneID(id int) *DecisionDeleteOne {
	builder := c.Delete().Where(decision.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DecisionDeleteOne{builder}
}

// Query returns a query builder for Decision.
func (c *DecisionClient) Query() *DecisionQuery {
	return &DecisionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDecision},
		inters: c.Interceptors(),
	}
}

// Get returns a Decision entity by its id.
func (c *DecisionClient) Get(ctx context.Context, id int) (*Decision, error) {
	return c.Query().Where(decision.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DecisionClient) GetX(ctx context.Context, id int) *Decision {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLawyer queries the lawyer edge of a Decision.
func (c *DecisionClient) QueryLawyer(d *Decision) *LawyerQuery {
	query := (&LawyerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(decision.Table, decision.FieldID, id),
			sqlgraph.To(lawyer.Table, lawyer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, decision.LawyerTable, decision.LawyerColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DecisionClient) Hooks() []Hook {
	return c.hooks.Decision
}

// Interceptors returns the client interceptors.
func (c *DecisionClient) Interceptors() []Interceptor {
	return c.inters.Decision
}

func (c *DecisionClient) mutate(ctx context.Context, m *DecisionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DecisionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DecisionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DecisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DecisionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Decision mutation op: %q", m.Op())
	}
}

// JurisdictionClient is a client for the Jurisdiction schema.
type JurisdictionClient struct {
	config
}

// NewJurisdictionClient returns a client for the Jurisdiction from the given config.
func NewJurisdictionClient(c config) *JurisdictionClient {
	return &JurisdictionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jurisdiction.Hooks(f(g(h())))`.
func (c *JurisdictionClient) Use(hooks ...Hook) {
	c.hooks.Jurisdiction = append(c.hooks.Jurisdiction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jurisdiction.Intercept(f(g(h())))`.
func (c *JurisdictionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Jurisdiction = append(c.inters.Jurisdiction, interceptors...)
}

// Create returns a builder for creating a Jurisdiction entity.
func (c *JurisdictionClient) Create() *JurisdictionCreate {
	mutation := newJurisdictionMutation(c.config, OpCreate)
	return &JurisdictionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Jurisdiction entities.
func (c *JurisdictionClient) CreateBulk(builders ...*JurisdictionCreate) *JurisdictionCreateBulk {
	return &JurisdictionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JurisdictionClient) MapCreateBulk(slice any, setFunc func(*JurisdictionCreate, int)) *JurisdictionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JurisdictionCreateBulk{err: fmt.Errorf("calling to JurisdictionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JurisdictionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JurisdictionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Jurisdiction.
func (c *JurisdictionClient) Update() *JurisdictionUpdate {
	mutation := newJurisdictionMutation(c.config, OpUpdate)
	return &JurisdictionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JurisdictionClient) UpdateOne(j *Jurisdiction) *JurisdictionUpdateOne {
	mutation := newJurisdictionMutation(c.config, OpUpdateOne, withJurisdiction(j))
	return &JurisdictionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JurisdictionClient) UpdateOneID(id int) *JurisdictionUpdateOne {
	mutation := newJurisdictionMutation(c.config, OpUpdateOne, withJurisdictionID(id))
	return &JurisdictionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Jurisdiction.
func (c *JurisdictionClient) Delete() *JurisdictionDelete {
	mutation := newJurisdictionMutation(c.config, OpDelete)
	return &JurisdictionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JurisdictionClient) DeleteOne(j *Jurisdiction) *JurisdictionDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JurisdictionClient) DeleteOneID(id int) *JurisdictionDeleteOne {
	builder := c.Delete().Where(jurisdiction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JurisdictionDeleteOne{builder}
}

// Query returns a query builder for Jurisdiction.
func (c *JurisdictionClient) Query() *JurisdictionQuery {
	return &JurisdictionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJurisdiction},
		inters: c.Interceptors(),
	}
}

// Get returns a Jurisdiction entity by its id.
func (c *JurisdictionClient) Get(ctx context.Context, id int) (*Jurisdiction, error) {
	return c.Query().Where(jurisdiction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JurisdictionClient) GetX(ctx context.Context, id int) *Jurisdiction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLawyers queries the lawyers edge of a Jurisdiction.
func (c *JurisdictionClient) QueryLawyers(j *Jurisdiction) *LawyerQuery {
	query := (&LawyerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jurisdiction.Table, jurisdiction.FieldID, id),
			sqlgraph.To(lawyer.Table, lawyer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, jurisdiction.LawyersTable, jurisdiction.LawyersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLawyerJurisdictions queries the lawyer_jurisdictions edge of a Jurisdiction.
func (c *JurisdictionClient) QueryLawyerJurisdictions(j *Jurisdiction) *LawyerJurisdictionQuery {
	query := (&LawyerJurisdictionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jurisdiction.Table, jurisdiction.FieldID, id),
			sqlgraph.To(lawyerjurisdiction.Table, lawyerjurisdiction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, jurisdiction.LawyerJurisdictionsTable, jurisdiction.LawyerJurisdictionsColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JurisdictionClient) Hooks() []Hook {
	return c.hooks.Jurisdiction
}

// Interceptors returns the client interceptors.
func (c *JurisdictionClient) Interceptors() []Interceptor {
	return c.inters.Jurisdiction
}

func (c *JurisdictionClient) mutate(ctx context.Context, m *JurisdictionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JurisdictionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JurisdictionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JurisdictionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JurisdictionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Jurisdiction mutation op: %q", m.Op())
	}
}

// LawyerClient is a client for the Lawyer schema.
type LawyerClient struct {
	config
}

// NewLawyerClient returns a client for the Lawyer from the given config.
func NewLawyerClient(c config) *LawyerClient {
	return &LawyerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lawyer.Hooks(f(g(h())))`.
func (c *LawyerClient) Use(hooks ...Hook) {
	c.hooks.Lawyer = append(c.hooks.Lawyer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lawyer.Intercept(f(g(h())))`.
func (c *LawyerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Lawyer = append(c.inters.Lawyer, interceptors...)
}

// Create returns a builder for creating a Lawyer entity.
func (c *LawyerClient) Create() *LawyerCreate {
	mutation := newLawyerMutation(c.config, OpCreate)
	return &LawyerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Lawyer entities.
func (c *LawyerClient) CreateBulk(builders ...*LawyerCreate) *LawyerCreateBulk {
	return &LawyerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LawyerClient) MapCreateBulk(slice any, setFunc func(*LawyerCreate, int)) *LawyerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LawyerCreateBulk{err: fmt.Errorf("calling to LawyerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LawyerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LawyerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Lawyer.
func (c *LawyerClient) Update() *LawyerUpdate {
	mutation := newLawyerMutation(c.config, OpUpdate)
	return &LawyerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LawyerClient) UpdateOne(l *Lawyer) *LawyerUpdateOne {
	mutation := newLawyerMutation(c.config, OpUpdateOne, withLawyer(l))
	return &LawyerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LawyerClient) UpdateOneID(id int) *LawyerUpdateOne {
	mutation := newLawyerMutation(c.config, OpUpdateOne, withLawyerID(id))
	return &LawyerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Lawyer.
func (c *LawyerClient) Delete() *LawyerDelete {
	mutation := newLawyerMutation(c.config, OpDelete)
	return &LawyerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LawyerClient) DeleteOne(l *Lawyer) *LawyerDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LawyerClient) DeleteOneID(id int) *LawyerDeleteOne {
	builder := c.Delete().Where(lawyer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LawyerDeleteOne{builder}
}

// Query returns a query builder for Lawyer.
func (c *LawyerClient) Query() *LawyerQuery {
	return &LawyerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLawyer},
		inters: c.Interceptors(),
	}
}

// Get returns a Lawyer entity by its id.
func (c *LawyerClient) Get(ctx context.Context, id int) (*Lawyer, error) {
	return c.Query().Where(lawyer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LawyerClient) GetX(ctx context.Context, id int) *Lawyer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJurisdictions queries the jurisdictions edge of a Lawyer.
func (c *LawyerClient) QueryJurisdictions(l *Lawyer) *JurisdictionQuery {
	query := (&JurisdictionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lawyer.Table, lawyer.FieldID, id),
			sqlgraph.To(jurisdiction.Table, jurisdiction.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, lawyer.JurisdictionsTable, lawyer.JurisdictionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDecisions queries the decisions edge of a Lawyer.
func (c *LawyerClient) QueryDecisions(l *Lawyer) *DecisionQuery {
	query := (&DecisionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lawyer.Table, lawyer.FieldID, id),
			sqlgraph.To(decision.Table, decision.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lawyer.DecisionsTable, lawyer.DecisionsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReviews queries the reviews edge of a Lawyer.
func (c *LawyerClient) QueryReviews(l *Lawyer) *ReviewQuery {
	query := (&ReviewClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lawyer.Table, lawyer.FieldID, id),
			sqlgraph.To(review.Table, review.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lawyer.ReviewsTable, lawyer.ReviewsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLawyerJurisdictions queries the lawyer_jurisdictions edge of a Lawyer.
func (c *LawyerClient) QueryLawyerJurisdictions(l *Lawyer) *LawyerJurisdictionQuery {
	query := (&LawyerJurisdictionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lawyer.Table, lawyer.FieldID, id),
			sqlgraph.To(lawyerjurisdiction.Table, lawyerjurisdiction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, lawyer.LawyerJurisdictionsTable, lawyer.LawyerJurisdictionsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LawyerClient) Hooks() []Hook {
	return c.hooks.Lawyer
}

// Interceptors returns the client interceptors.
func (c *LawyerClient) Interceptors() []Interceptor {
	return c.inters.Lawyer
}

func (c *LawyerClient) mutate(ctx context.Context, m *LawyerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LawyerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LawyerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LawyerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LawyerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Lawyer mutation op: %q", m.Op())
	}
}

// LawyerJurisdictionClient is a client for the LawyerJurisdiction schema.
type LawyerJurisdictionClient struct {
	config
}

// NewLawyerJurisdictionClient returns a client for the LawyerJurisdiction from the given config.
func NewLawyerJurisdictionClient(c config) *LawyerJurisdictionClient {
	return &LawyerJurisdictionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lawyerjurisdiction.Hooks(f(g(h())))`.
func (c *LawyerJurisdictionClient) Use(hooks ...Hook) {
	c.hooks.LawyerJurisdiction = append(c.hooks.LawyerJurisdiction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lawyerjurisdiction.Intercept(f(g(h())))`.
func (c *LawyerJurisdictionClient) Intercept(interceptors ...Interceptor) {
	c.inters.LawyerJurisdiction = append(c.inters.LawyerJurisdiction, interceptors...)
}

// Create returns a builder for creating a LawyerJurisdiction entity.
func (c *LawyerJurisdictionClient) Create() *LawyerJurisdictionCreate {
	mutation := newLawyerJurisdictionMutation(c.config, OpCreate)
	return &LawyerJurisdictionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LawyerJurisdiction entities.
func (c *LawyerJurisdictionClient) CreateBulk(builders ...*LawyerJurisdictionCreate) *LawyerJurisdictionCreateBulk {
	return &LawyerJurisdictionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LawyerJurisdictionClient) MapCreateBulk(slice any, setFunc func(*LawyerJurisdictionCreate, int)) *LawyerJurisdictionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LawyerJurisdictionCreateBulk{err: fmt.Errorf("calling to LawyerJurisdictionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LawyerJurisdictionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LawyerJurisdictionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LawyerJurisdiction.
func (c *LawyerJurisdictionClient) Update() *LawyerJurisdictionUpdate {
	mutation := newLawyerJurisdictionMutation(c.config, OpUpdate)
	return &LawyerJurisdictionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LawyerJurisdictionClient) UpdateOne(lj *LawyerJurisdiction) *LawyerJurisdictionUpdateOne {
	mutation := newLawyerJurisdictionMutation(c.config, OpUpdateOne, withLawyerJurisdiction(lj))
	return &LawyerJurisdictionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LawyerJurisdictionClient) UpdateOneID(id int) *LawyerJurisdictionUpdateOne {
	mutation := newLawyerJurisdictionMutation(c.config, OpUpdateOne, withLawyerJurisdictionID(id))
	return &LawyerJurisdictionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LawyerJurisdiction.
func (c *LawyerJurisdictionClient) Delete() *LawyerJurisdictionDelete {
	mutation := newLawyerJurisdictionMutation(c.config, OpDelete)
	return &LawyerJurisdictionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LawyerJurisdictionClient) DeleteOne(lj *LawyerJurisdiction) *LawyerJurisdictionDeleteOne {
	return c.DeleteOneID(lj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LawyerJurisdictionClient) DeleteOneID(id int) *LawyerJurisdictionDeleteOne {
	builder := c.Delete().Where(lawyerjurisdiction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LawyerJurisdictionDeleteOne{builder}
}

// Query returns a query builder for LawyerJurisdiction.
func (c *LawyerJurisdictionClient) Query() *LawyerJurisdictionQuery {
	return &LawyerJurisdictionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLawyerJurisdiction},
		inters: c.Interceptors(),
	}
}

// Get returns a LawyerJurisdiction entity by its id.
func (c *LawyerJurisdictionClient) Get(ctx context.Context, id int) (*LawyerJurisdiction, error) {
	return c.Query().Where(lawyerjurisdiction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LawyerJurisdictionClient) GetX(ctx context.Context, id int) *LawyerJurisdiction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLawyer queries the lawyer edge of a LawyerJurisdiction.
func (c *LawyerJurisdictionClient) QueryLawyer(lj *LawyerJurisdiction) *LawyerQuery {
	query := (&LawyerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lawyerjurisdiction.Table, lawyerjurisdiction.FieldID, id),
			sqlgraph.To(lawyer.Table, lawyer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lawyerjurisdiction.LawyerTable, lawyerjurisdiction.LawyerColumn),
		)
		fromV = sqlgraph.Neighbors(lj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJurisdiction queries the jurisdiction edge of a LawyerJurisdiction.
func (c *LawyerJurisdictionClient) QueryJurisdiction(lj *LawyerJurisdiction) *JurisdictionQuery {
	query := (&JurisdictionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lawyerjurisdiction.Table, lawyerjurisdiction.FieldID, id),
			sqlgraph.To(jurisdiction.Table, jurisdiction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lawyerjurisdiction.JurisdictionTable, lawyerjurisdiction.JurisdictionColumn),
		)
		fromV = sqlgraph.Neighbors(lj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LawyerJurisdictionClient) Hooks() []Hook {
	return c.hooks.LawyerJurisdiction
}

// Interceptors returns the client interceptors.
func (c *LawyerJurisdictionClient) Interceptors() []Interceptor {
	return c.inters.LawyerJurisdiction
}

func (c *LawyerJurisdictionClient) mutate(ctx context.Context, m *LawyerJurisdictionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LawyerJurisdictionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LawyerJurisdictionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LawyerJurisdictionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LawyerJurisdictionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LawyerJurisdiction mutation op: %q", m.Op())
	}
}

// MvpMaterialClient is a client for the MvpMaterial schema.
type MvpMaterialClient struct {
	config
}

// NewMvpMaterialClient returns a client for the MvpMaterial from the given config.
func NewMvpMaterialClient(c config) *MvpMaterialClient {
	return &MvpMaterialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mvpmaterial.Hooks(f(g(h())))`.
func (c *MvpMaterialClient) Use(hooks ...Hook) {
	c.hooks.MvpMaterial = append(c.hooks.MvpMaterial, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mvpmaterial.Intercept(f(g(h())))`.
func (c *MvpMaterialClient) Intercept(interceptors ...Interceptor) {
	c.inters.MvpMaterial = append(c.inters.MvpMaterial, interceptors...)
}

// Create returns a builder for creating a MvpMaterial entity.
func (c *MvpMaterialClient) Create() *MvpMaterialCreate {
	mutation := newMvpMaterialMutation(c.config, OpCreate)
	return &MvpMaterialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MvpMaterial entities.
func (c *MvpMaterialClient) CreateBulk(builders ...*MvpMaterialCreate) *MvpMaterialCreateBulk {
	return &MvpMaterialCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MvpMaterialClient) MapCreateBulk(slice any, setFunc func(*MvpMaterialCreate, int)) *MvpMaterialCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MvpMaterialCreateBulk{err: fmt.Errorf("calling to MvpMaterialClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MvpMaterialCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MvpMaterialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MvpMaterial.
func (c *MvpMaterialClient) Update() *MvpMaterialUpdate {
	mutation := newMvpMaterialMutation(c.config, OpUpdate)
	return &MvpMaterialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MvpMaterialClient) UpdateOne(mm *MvpMaterial) *MvpMaterialUpdateOne {
	mutation := newMvpMaterialMutation(c.config, OpUpdateOne, withMvpMaterial(mm))
	return &MvpMaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MvpMaterialClient) UpdateOneID(id int) *MvpMaterialUpdateOne {
	mutation := newMvpMaterialMutation(c.config, OpUpdateOne, withMvpMaterialID(id))
	return &MvpMaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MvpMaterial.
func (c *MvpMaterialClient) Delete() *MvpMaterialDelete {
	mutation := newMvpMaterialMutation(c.config, OpDelete)
	return &MvpMaterialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MvpMaterialClient) DeleteOne(mm *MvpMaterial) *MvpMaterialDeleteOne {
	return c.DeleteOneID(mm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MvpMaterialClient) DeleteOneID(id int) *MvpMaterialDeleteOne {
	builder := c.Delete().Where(mvpmaterial.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MvpMaterialDeleteOne{builder}
}

// Query returns a query builder for MvpMaterial.
func (c *MvpMaterialClient) Query() *MvpMaterialQuery {
	return &MvpMaterialQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMvpMaterial},
		inters: c.Interceptors(),
	}
}

// Get returns a MvpMaterial entity by its id.
func (c *MvpMaterialClient) Get(ctx context.Context, id int) (*MvpMaterial, error) {
	return c.Query().Where(mvpmaterial.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MvpMaterialClient) GetX(ctx context.Context, id int) *MvpMaterial {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MvpMaterialClient) Hooks() []Hook {
	return c.hooks.MvpMaterial
}

// Interceptors returns the client interceptors.
func (c *MvpMaterialClient) Interceptors() []Interceptor {
	return c.inters.MvpMaterial
}

func (c *MvpMaterialClient) mutate(ctx context.Context, m *MvpMaterialMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MvpMaterialCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MvpMaterialUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MvpMaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MvpMaterialDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MvpMaterial mutation op: %q", m.Op())
	}
}

// MvpPlannedRouteClient is a client for the MvpPlannedRoute schema.
type MvpPlannedRouteClient struct {
	config
}

// NewMvpPlannedRouteClient returns a client for the MvpPlannedRoute from the given config.
func NewMvpPlannedRouteClient(c config) *MvpPlannedRouteClient {
	return &MvpPlannedRouteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mvpplannedroute.Hooks(f(g(h())))`.
func (c *MvpPlannedRouteClient) Use(hooks ...Hook) {
	c.hooks.MvpPlannedRoute = append(c.hooks.MvpPlannedRoute, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mvpplannedroute.Intercept(f(g(h())))`.
func (c *MvpPlannedRouteClient) Intercept(interceptors ...Interceptor) {
	c.inters.MvpPlannedRoute = append(c.inters.MvpPlannedRoute, interceptors...)
}

// Create returns a builder for creating a MvpPlannedRoute entity.
func (c *MvpPlannedRouteClient) Create() *MvpPlannedRouteCreate {
	mutation := newMvpPlannedRouteMutation(c.config, OpCreate)
	return &MvpPlannedRouteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MvpPlannedRoute entities.
func (c *MvpPlannedRouteClient) CreateBulk(builders ...*MvpPlannedRouteCreate) *MvpPlannedRouteCreateBulk {
	return &MvpPlannedRouteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MvpPlannedRouteClient) MapCreateBulk(slice any, setFunc func(*MvpPlannedRouteCreate, int)) *MvpPlannedRouteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MvpPlannedRouteCreateBulk{err: fmt.Errorf("calling to MvpPlannedRouteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MvpPlannedRouteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MvpPlannedRouteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MvpPlannedRoute.
func (c *MvpPlannedRouteClient) Update() *MvpPlannedRouteUpdate {
	mutation := newMvpPlannedRouteMutation(c.config, OpUpdate)
	return &MvpPlannedRouteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MvpPlannedRouteClient) UpdateOne(mpr *MvpPlannedRoute) *MvpPlannedRouteUpdateOne {
	mutation := newMvpPlannedRouteMutation(c.config, OpUpdateOne, withMvpPlannedRoute(mpr))
	return &MvpPlannedRouteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MvpPlannedRouteClient) UpdateOneID(id int) *MvpPlannedRouteUpdateOne {
	mutation := newMvpPlannedRouteMutation(c.config, OpUpdateOne, withMvpPlannedRouteID(id))
	return &MvpPlannedRouteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MvpPlannedRoute.
func (c *MvpPlannedRouteClient) Delete() *MvpPlannedRouteDelete {
	mutation := newMvpPlannedRouteMutation(c.config, OpDelete)
	return &MvpPlannedRouteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MvpPlannedRouteClient) DeleteOne(mpr *MvpPlannedRoute) *MvpPlannedRouteDeleteOne {
	return c.DeleteOneID(mpr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MvpPlannedRouteClient) DeleteOneID(id int) *MvpPlannedRouteDeleteOne {
	builder := c.Delete().Where(mvpplannedroute.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MvpPlannedRouteDeleteOne{builder}
}

// Query returns a query builder for MvpPlannedRoute.
func (c *MvpPlannedRouteClient) Query() *MvpPlannedRouteQuery {
	return &MvpPlannedRouteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMvpPlannedRoute},
		inters: c.Interceptors(),
	}
}

// Get returns a MvpPlannedRoute entity by its id.
func (c *MvpPlannedRouteClient) Get(ctx context.Context, id int) (*MvpPlannedRoute, error) {
	return c.Query().Where(mvpplannedroute.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MvpPlannedRouteClient) GetX(ctx context.Context, id int) *MvpPlannedRoute {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrucks queries the trucks edge of a MvpPlannedRoute.
func (c *MvpPlannedRouteClient) QueryTrucks(mpr *MvpPlannedRoute) *MvpTruckQuery {
	query := (&MvpTruckClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mpr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mvpplannedroute.Table, mvpplannedroute.FieldID, id),
			sqlgraph.To(mvptruck.Table, mvptruck.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mvpplannedroute.TrucksTable, mvpplannedroute.TrucksColumn),
		)
		fromV = sqlgraph.Neighbors(mpr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDriver queries the driver edge of a MvpPlannedRoute.
func (c *MvpPlannedRouteClient) QueryDriver(mpr *MvpPlannedRoute) *MvpStaffQuery {
	query := (&MvpStaffClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mpr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mvpplannedroute.Table, mvpplannedroute.FieldID, id),
			sqlgraph.To(mvpstaff.Table, mvpstaff.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, mvpplannedroute.DriverTable, mvpplannedroute.DriverColumn),
		)
		fromV = sqlgraph.Neighbors(mpr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLoaders queries the loaders edge of a MvpPlannedRoute.
func (c *MvpPlannedRouteClient) QueryLoaders(mpr *MvpPlannedRoute) *MvpStaffQuery {
	query := (&MvpStaffClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mpr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mvpplannedroute.Table, mvpplannedroute.FieldID, id),
			sqlgraph.To(mvpstaff.Table, mvpstaff.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mvpplannedroute.LoadersTable, mvpplannedroute.LoadersColumn),
		)
		fromV = sqlgraph.Neighbors(mpr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaterials queries the materials edge of a MvpPlannedRoute.
func (c *MvpPlannedRouteClient) QueryMaterials(mpr *MvpPlannedRoute) *MvpMaterialQuery {
	query := (&MvpMaterialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mpr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mvpplannedroute.Table, mvpplannedroute.FieldID, id),
			sqlgraph.To(mvpmaterial.Table, mvpmaterial.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mvpplannedroute.MaterialsTable, mvpplannedroute.MaterialsColumn),
		)
		fromV = sqlgraph.Neighbors(mpr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MvpPlannedRouteClient) Hooks() []Hook {
	return c.hooks.MvpPlannedRoute
}

// Interceptors returns the client interceptors.
func (c *MvpPlannedRouteClient) Interceptors() []Interceptor {
	return c.inters.MvpPlannedRoute
}

func (c *MvpPlannedRouteClient) mutate(ctx context.Context, m *MvpPlannedRouteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MvpPlannedRouteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MvpPlannedRouteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MvpPlannedRouteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MvpPlannedRouteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MvpPlannedRoute mutation op: %q", m.Op())
	}
}

// MvpRouteClient is a client for the MvpRoute schema.
type MvpRouteClient struct {
	config
}

// NewMvpRouteClient returns a client for the MvpRoute from the given config.
func NewMvpRouteClient(c config) *MvpRouteClient {
	return &MvpRouteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mvproute.Hooks(f(g(h())))`.
func (c *MvpRouteClient) Use(hooks ...Hook) {
	c.hooks.MvpRoute = append(c.hooks.MvpRoute, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mvproute.Intercept(f(g(h())))`.
func (c *MvpRouteClient) Intercept(interceptors ...Interceptor) {
	c.inters.MvpRoute = append(c.inters.MvpRoute, interceptors...)
}

// Create returns a builder for creating a MvpRoute entity.
func (c *MvpRouteClient) Create() *MvpRouteCreate {
	mutation := newMvpRouteMutation(c.config, OpCreate)
	return &MvpRouteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MvpRoute entities.
func (c *MvpRouteClient) CreateBulk(builders ...*MvpRouteCreate) *MvpRouteCreateBulk {
	return &MvpRouteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MvpRouteClient) MapCreateBulk(slice any, setFunc func(*MvpRouteCreate, int)) *MvpRouteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MvpRouteCreateBulk{err: fmt.Errorf("calling to MvpRouteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MvpRouteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MvpRouteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MvpRoute.
func (c *MvpRouteClient) Update() *MvpRouteUpdate {
	mutation := newMvpRouteMutation(c.config, OpUpdate)
	return &MvpRouteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MvpRouteClient) UpdateOne(mr *MvpRoute) *MvpRouteUpdateOne {
	mutation := newMvpRouteMutation(c.config, OpUpdateOne, withMvpRoute(mr))
	return &MvpRouteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MvpRouteClient) UpdateOneID(id int) *MvpRouteUpdateOne {
	mutation := newMvpRouteMutation(c.config, OpUpdateOne, withMvpRouteID(id))
	return &MvpRouteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MvpRoute.
func (c *MvpRouteClient) Delete() *MvpRouteDelete {
	mutation := newMvpRouteMutation(c.config, OpDelete)
	return &MvpRouteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MvpRouteClient) DeleteOne(mr *MvpRoute) *MvpRouteDeleteOne {
	return c.DeleteOneID(mr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MvpRouteClient) DeleteOneID(id int) *MvpRouteDeleteOne {
	builder := c.Delete().Where(mvproute.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MvpRouteDeleteOne{builder}
}

// Query returns a query builder for MvpRoute.
func (c *MvpRouteClient) Query() *MvpRouteQuery {
	return &MvpRouteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMvpRoute},
		inters: c.Interceptors(),
	}
}

// Get returns a MvpRoute entity by its id.
func (c *MvpRouteClient) Get(ctx context.Context, id int) (*MvpRoute, error) {
	return c.Query().Where(mvproute.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MvpRouteClient) GetX(ctx context.Context, id int) *MvpRoute {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MvpRouteClient) Hooks() []Hook {
	return c.hooks.MvpRoute
}

// Interceptors returns the client interceptors.
func (c *MvpRouteClient) Interceptors() []Interceptor {
	return c.inters.MvpRoute
}

func (c *MvpRouteClient) mutate(ctx context.Context, m *MvpRouteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MvpRouteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MvpRouteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MvpRouteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MvpRouteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MvpRoute mutation op: %q", m.Op())
	}
}

// MvpStaffClient is a client for the MvpStaff schema.
type MvpStaffClient struct {
	config
}

// NewMvpStaffClient returns a client for the MvpStaff from the given config.
func NewMvpStaffClient(c config) *MvpStaffClient {
	return &MvpStaffClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mvpstaff.Hooks(f(g(h())))`.
func (c *MvpStaffClient) Use(hooks ...Hook) {
	c.hooks.MvpStaff = append(c.hooks.MvpStaff, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mvpstaff.Intercept(f(g(h())))`.
func (c *MvpStaffClient) Intercept(interceptors ...Interceptor) {
	c.inters.MvpStaff = append(c.inters.MvpStaff, interceptors...)
}

// Create returns a builder for creating a MvpStaff entity.
func (c *MvpStaffClient) Create() *MvpStaffCreate {
	mutation := newMvpStaffMutation(c.config, OpCreate)
	return &MvpStaffCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MvpStaff entities.
func (c *MvpStaffClient) CreateBulk(builders ...*MvpStaffCreate) *MvpStaffCreateBulk {
	return &MvpStaffCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MvpStaffClient) MapCreateBulk(slice any, setFunc func(*MvpStaffCreate, int)) *MvpStaffCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MvpStaffCreateBulk{err: fmt.Errorf("calling to MvpStaffClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MvpStaffCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MvpStaffCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MvpStaff.
func (c *MvpStaffClient) Update() *MvpStaffUpdate {
	mutation := newMvpStaffMutation(c.config, OpUpdate)
	return &MvpStaffUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MvpStaffClient) UpdateOne(ms *MvpStaff) *MvpStaffUpdateOne {
	mutation := newMvpStaffMutation(c.config, OpUpdateOne, withMvpStaff(ms))
	return &MvpStaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MvpStaffClient) UpdateOneID(id int) *MvpStaffUpdateOne {
	mutation := newMvpStaffMutation(c.config, OpUpdateOne, withMvpStaffID(id))
	return &MvpStaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MvpStaff.
func (c *MvpStaffClient) Delete() *MvpStaffDelete {
	mutation := newMvpStaffMutation(c.config, OpDelete)
	return &MvpStaffDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MvpStaffClient) DeleteOne(ms *MvpStaff) *MvpStaffDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MvpStaffClient) DeleteOneID(id int) *MvpStaffDeleteOne {
	builder := c.Delete().Where(mvpstaff.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MvpStaffDeleteOne{builder}
}

// Query returns a query builder for MvpStaff.
func (c *MvpStaffClient) Query() *MvpStaffQuery {
	return &MvpStaffQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMvpStaff},
		inters: c.Interceptors(),
	}
}

// Get returns a MvpStaff entity by its id.
func (c *MvpStaffClient) Get(ctx context.Context, id int) (*MvpStaff, error) {
	return c.Query().Where(mvpstaff.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MvpStaffClient) GetX(ctx context.Context, id int) *MvpStaff {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MvpStaffClient) Hooks() []Hook {
	return c.hooks.MvpStaff
}

// Interceptors returns the client interceptors.
func (c *MvpStaffClient) Interceptors() []Interceptor {
	return c.inters.MvpStaff
}

func (c *MvpStaffClient) mutate(ctx context.Context, m *MvpStaffMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MvpStaffCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MvpStaffUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MvpStaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MvpStaffDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MvpStaff mutation op: %q", m.Op())
	}
}

// MvpTruckClient is a client for the MvpTruck schema.
type MvpTruckClient struct {
	config
}

// NewMvpTruckClient returns a client for the MvpTruck from the given config.
func NewMvpTruckClient(c config) *MvpTruckClient {
	return &MvpTruckClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mvptruck.Hooks(f(g(h())))`.
func (c *MvpTruckClient) Use(hooks ...Hook) {
	c.hooks.MvpTruck = append(c.hooks.MvpTruck, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mvptruck.Intercept(f(g(h())))`.
func (c *MvpTruckClient) Intercept(interceptors ...Interceptor) {
	c.inters.MvpTruck = append(c.inters.MvpTruck, interceptors...)
}

// Create returns a builder for creating a MvpTruck entity.
func (c *MvpTruckClient) Create() *MvpTruckCreate {
	mutation := newMvpTruckMutation(c.config, OpCreate)
	return &MvpTruckCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MvpTruck entities.
func (c *MvpTruckClient) CreateBulk(builders ...*MvpTruckCreate) *MvpTruckCreateBulk {
	return &MvpTruckCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MvpTruckClient) MapCreateBulk(slice any, setFunc func(*MvpTruckCreate, int)) *MvpTruckCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MvpTruckCreateBulk{err: fmt.Errorf("calling to MvpTruckClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MvpTruckCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MvpTruckCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MvpTruck.
func (c *MvpTruckClient) Update() *MvpTruckUpdate {
	mutation := newMvpTruckMutation(c.config, OpUpdate)
	return &MvpTruckUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MvpTruckClient) UpdateOne(mt *MvpTruck) *MvpTruckUpdateOne {
	mutation := newMvpTruckMutation(c.config, OpUpdateOne, withMvpTruck(mt))
	return &MvpTruckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MvpTruckClient) UpdateOneID(id int) *MvpTruckUpdateOne {
	mutation := newMvpTruckMutation(c.config, OpUpdateOne, withMvpTruckID(id))
	return &MvpTruckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MvpTruck.
func (c *MvpTruckClient) Delete() *MvpTruckDelete {
	mutation := newMvpTruckMutation(c.config, OpDelete)
	return &MvpTruckDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MvpTruckClient) DeleteOne(mt *MvpTruck) *MvpTruckDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MvpTruckClient) DeleteOneID(id int) *MvpTruckDeleteOne {
	builder := c.Delete().Where(mvptruck.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MvpTruckDeleteOne{builder}
}

// Query returns a query builder for MvpTruck.
func (c *MvpTruckClient) Query() *MvpTruckQuery {
	return &MvpTruckQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMvpTruck},
		inters: c.Interceptors(),
	}
}

// Get returns a MvpTruck entity by its id.
func (c *MvpTruckClient) Get(ctx context.Context, id int) (*MvpTruck, error) {
	return c.Query().Where(mvptruck.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MvpTruckClient) GetX(ctx context.Context, id int) *MvpTruck {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MvpTruckClient) Hooks() []Hook {
	return c.hooks.MvpTruck
}

// Interceptors returns the client interceptors.
func (c *MvpTruckClient) Interceptors() []Interceptor {
	return c.inters.MvpTruck
}

func (c *MvpTruckClient) mutate(ctx context.Context, m *MvpTruckMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MvpTruckCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MvpTruckUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MvpTruckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MvpTruckDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MvpTruck mutation op: %q", m.Op())
	}
}

// PasswordTokenClient is a client for the PasswordToken schema.
type PasswordTokenClient struct {
	config
}

// NewPasswordTokenClient returns a client for the PasswordToken from the given config.
func NewPasswordTokenClient(c config) *PasswordTokenClient {
	return &PasswordTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `passwordtoken.Hooks(f(g(h())))`.
func (c *PasswordTokenClient) Use(hooks ...Hook) {
	c.hooks.PasswordToken = append(c.hooks.PasswordToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `passwordtoken.Intercept(f(g(h())))`.
func (c *PasswordTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.PasswordToken = append(c.inters.PasswordToken, interceptors...)
}

// Create returns a builder for creating a PasswordToken entity.
func (c *PasswordTokenClient) Create() *PasswordTokenCreate {
	mutation := newPasswordTokenMutation(c.config, OpCreate)
	return &PasswordTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PasswordToken entities.
func (c *PasswordTokenClient) CreateBulk(builders ...*PasswordTokenCreate) *PasswordTokenCreateBulk {
	return &PasswordTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PasswordTokenClient) MapCreateBulk(slice any, setFunc func(*PasswordTokenCreate, int)) *PasswordTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PasswordTokenCreateBulk{err: fmt.Errorf("calling to PasswordTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PasswordTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PasswordTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PasswordToken.
func (c *PasswordTokenClient) Update() *PasswordTokenUpdate {
	mutation := newPasswordTokenMutation(c.config, OpUpdate)
	return &PasswordTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PasswordTokenClient) UpdateOne(pt *PasswordToken) *PasswordTokenUpdateOne {
	mutation := newPasswordTokenMutation(c.config, OpUpdateOne, withPasswordToken(pt))
	return &PasswordTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PasswordTokenClient) UpdateOneID(id int) *PasswordTokenUpdateOne {
	mutation := newPasswordTokenMutation(c.config, OpUpdateOne, withPasswordTokenID(id))
	return &PasswordTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PasswordToken.
func (c *PasswordTokenClient) Delete() *PasswordTokenDelete {
	mutation := newPasswordTokenMutation(c.config, OpDelete)
	return &PasswordTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PasswordTokenClient) DeleteOne(pt *PasswordToken) *PasswordTokenDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PasswordTokenClient) DeleteOneID(id int) *PasswordTokenDeleteOne {
	builder := c.Delete().Where(passwordtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PasswordTokenDeleteOne{builder}
}

// Query returns a query builder for PasswordToken.
func (c *PasswordTokenClient) Query() *PasswordTokenQuery {
	return &PasswordTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePasswordToken},
		inters: c.Interceptors(),
	}
}

// Get returns a PasswordToken entity by its id.
func (c *PasswordTokenClient) Get(ctx context.Context, id int) (*PasswordToken, error) {
	return c.Query().Where(passwordtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PasswordTokenClient) GetX(ctx context.Context, id int) *PasswordToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a PasswordToken.
func (c *PasswordTokenClient) QueryUser(pt *PasswordToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(passwordtoken.Table, passwordtoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, passwordtoken.UserTable, passwordtoken.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PasswordTokenClient) Hooks() []Hook {
	return c.hooks.PasswordToken
}

// Interceptors returns the client interceptors.
func (c *PasswordTokenClient) Interceptors() []Interceptor {
	return c.inters.PasswordToken
}

func (c *PasswordTokenClient) mutate(ctx context.Context, m *PasswordTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PasswordTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PasswordTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PasswordTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PasswordTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PasswordToken mutation op: %q", m.Op())
	}
}

// RMLUserClient is a client for the RMLUser schema.
type RMLUserClient struct {
	config
}

// NewRMLUserClient returns a client for the RMLUser from the given config.
func NewRMLUserClient(c config) *RMLUserClient {
	return &RMLUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rmluser.Hooks(f(g(h())))`.
func (c *RMLUserClient) Use(hooks ...Hook) {
	c.hooks.RMLUser = append(c.hooks.RMLUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rmluser.Intercept(f(g(h())))`.
func (c *RMLUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.RMLUser = append(c.inters.RMLUser, interceptors...)
}

// Create returns a builder for creating a RMLUser entity.
func (c *RMLUserClient) Create() *RMLUserCreate {
	mutation := newRMLUserMutation(c.config, OpCreate)
	return &RMLUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RMLUser entities.
func (c *RMLUserClient) CreateBulk(builders ...*RMLUserCreate) *RMLUserCreateBulk {
	return &RMLUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RMLUserClient) MapCreateBulk(slice any, setFunc func(*RMLUserCreate, int)) *RMLUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RMLUserCreateBulk{err: fmt.Errorf("calling to RMLUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RMLUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RMLUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RMLUser.
func (c *RMLUserClient) Update() *RMLUserUpdate {
	mutation := newRMLUserMutation(c.config, OpUpdate)
	return &RMLUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RMLUserClient) UpdateOne(ru *RMLUser) *RMLUserUpdateOne {
	mutation := newRMLUserMutation(c.config, OpUpdateOne, withRMLUser(ru))
	return &RMLUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RMLUserClient) UpdateOneID(id int) *RMLUserUpdateOne {
	mutation := newRMLUserMutation(c.config, OpUpdateOne, withRMLUserID(id))
	return &RMLUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RMLUser.
func (c *RMLUserClient) Delete() *RMLUserDelete {
	mutation := newRMLUserMutation(c.config, OpDelete)
	return &RMLUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RMLUserClient) DeleteOne(ru *RMLUser) *RMLUserDeleteOne {
	return c.DeleteOneID(ru.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RMLUserClient) DeleteOneID(id int) *RMLUserDeleteOne {
	builder := c.Delete().Where(rmluser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RMLUserDeleteOne{builder}
}

// Query returns a query builder for RMLUser.
func (c *RMLUserClient) Query() *RMLUserQuery {
	return &RMLUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRMLUser},
		inters: c.Interceptors(),
	}
}

// Get returns a RMLUser entity by its id.
func (c *RMLUserClient) Get(ctx context.Context, id int) (*RMLUser, error) {
	return c.Query().Where(rmluser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RMLUserClient) GetX(ctx context.Context, id int) *RMLUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryReviews queries the reviews edge of a RMLUser.
func (c *RMLUserClient) QueryReviews(ru *RMLUser) *ReviewQuery {
	query := (&ReviewClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ru.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rmluser.Table, rmluser.FieldID, id),
			sqlgraph.To(review.Table, review.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rmluser.ReviewsTable, rmluser.ReviewsColumn),
		)
		fromV = sqlgraph.Neighbors(ru.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RMLUserClient) Hooks() []Hook {
	return c.hooks.RMLUser
}

// Interceptors returns the client interceptors.
func (c *RMLUserClient) Interceptors() []Interceptor {
	return c.inters.RMLUser
}

func (c *RMLUserClient) mutate(ctx context.Context, m *RMLUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RMLUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RMLUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RMLUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RMLUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RMLUser mutation op: %q", m.Op())
	}
}

// ReviewClient is a client for the Review schema.
type ReviewClient struct {
	config
}

// NewReviewClient returns a client for the Review from the given config.
func NewReviewClient(c config) *ReviewClient {
	return &ReviewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `review.Hooks(f(g(h())))`.
func (c *ReviewClient) Use(hooks ...Hook) {
	c.hooks.Review = append(c.hooks.Review, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `review.Intercept(f(g(h())))`.
func (c *ReviewClient) Intercept(interceptors ...Interceptor) {
	c.inters.Review = append(c.inters.Review, interceptors...)
}

// Create returns a builder for creating a Review entity.
func (c *ReviewClient) Create() *ReviewCreate {
	mutation := newReviewMutation(c.config, OpCreate)
	return &ReviewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Review entities.
func (c *ReviewClient) CreateBulk(builders ...*ReviewCreate) *ReviewCreateBulk {
	return &ReviewCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReviewClient) MapCreateBulk(slice any, setFunc func(*ReviewCreate, int)) *ReviewCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReviewCreateBulk{err: fmt.Errorf("calling to ReviewClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReviewCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReviewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Review.
func (c *ReviewClient) Update() *ReviewUpdate {
	mutation := newReviewMutation(c.config, OpUpdate)
	return &ReviewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReviewClient) UpdateOne(r *Review) *ReviewUpdateOne {
	mutation := newReviewMutation(c.config, OpUpdateOne, withReview(r))
	return &ReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReviewClient) UpdateOneID(id int) *ReviewUpdateOne {
	mutation := newReviewMutation(c.config, OpUpdateOne, withReviewID(id))
	return &ReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Review.
func (c *ReviewClient) Delete() *ReviewDelete {
	mutation := newReviewMutation(c.config, OpDelete)
	return &ReviewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReviewClient) DeleteOne(r *Review) *ReviewDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReviewClient) DeleteOneID(id int) *ReviewDeleteOne {
	builder := c.Delete().Where(review.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReviewDeleteOne{builder}
}

// Query returns a query builder for Review.
func (c *ReviewClient) Query() *ReviewQuery {
	return &ReviewQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReview},
		inters: c.Interceptors(),
	}
}

// Get returns a Review entity by its id.
func (c *ReviewClient) Get(ctx context.Context, id int) (*Review, error) {
	return c.Query().Where(review.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReviewClient) GetX(ctx context.Context, id int) *Review {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLawyer queries the lawyer edge of a Review.
func (c *ReviewClient) QueryLawyer(r *Review) *LawyerQuery {
	query := (&LawyerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(review.Table, review.FieldID, id),
			sqlgraph.To(lawyer.Table, lawyer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, review.LawyerTable, review.LawyerColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Review.
func (c *ReviewClient) QueryUser(r *Review) *RMLUserQuery {
	query := (&RMLUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(review.Table, review.FieldID, id),
			sqlgraph.To(rmluser.Table, rmluser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, review.UserTable, review.UserColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReviewClient) Hooks() []Hook {
	return c.hooks.Review
}

// Interceptors returns the client interceptors.
func (c *ReviewClient) Interceptors() []Interceptor {
	return c.inters.Review
}

func (c *ReviewClient) mutate(ctx context.Context, m *ReviewMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReviewCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReviewUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReviewDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Review mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a User.
func (c *UserClient) QueryOwner(u *User) *PasswordTokenQuery {
	query := (&PasswordTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(passwordtoken.Table, passwordtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.OwnerTable, user.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Decision, Jurisdiction, Lawyer, LawyerJurisdiction, MvpMaterial,
		MvpPlannedRoute, MvpRoute, MvpStaff, MvpTruck, PasswordToken, RMLUser, Review,
		User []ent.Hook
	}
	inters struct {
		Decision, Jurisdiction, Lawyer, LawyerJurisdiction, MvpMaterial,
		MvpPlannedRoute, MvpRoute, MvpStaff, MvpTruck, PasswordToken, RMLUser, Review,
		User []ent.Interceptor
	}
)
