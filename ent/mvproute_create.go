// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/mvproute"
)

// MvpRouteCreate is the builder for creating a MvpRoute entity.
type MvpRouteCreate struct {
	config
	mutation *MvpRouteMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mrc *MvpRouteCreate) SetName(s string) *MvpRouteCreate {
	mrc.mutation.SetName(s)
	return mrc
}

// SetDayOfWeek sets the "day_of_week" field.
func (mrc *MvpRouteCreate) SetDayOfWeek(s string) *MvpRouteCreate {
	mrc.mutation.SetDayOfWeek(s)
	return mrc
}

// Mutation returns the MvpRouteMutation object of the builder.
func (mrc *MvpRouteCreate) Mutation() *MvpRouteMutation {
	return mrc.mutation
}

// Save creates the MvpRoute in the database.
func (mrc *MvpRouteCreate) Save(ctx context.Context) (*MvpRoute, error) {
	return withHooks(ctx, mrc.sqlSave, mrc.mutation, mrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mrc *MvpRouteCreate) SaveX(ctx context.Context) *MvpRoute {
	v, err := mrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrc *MvpRouteCreate) Exec(ctx context.Context) error {
	_, err := mrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrc *MvpRouteCreate) ExecX(ctx context.Context) {
	if err := mrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mrc *MvpRouteCreate) check() error {
	if _, ok := mrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MvpRoute.name"`)}
	}
	if _, ok := mrc.mutation.DayOfWeek(); !ok {
		return &ValidationError{Name: "day_of_week", err: errors.New(`ent: missing required field "MvpRoute.day_of_week"`)}
	}
	return nil
}

func (mrc *MvpRouteCreate) sqlSave(ctx context.Context) (*MvpRoute, error) {
	if err := mrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mrc.mutation.id = &_node.ID
	mrc.mutation.done = true
	return _node, nil
}

func (mrc *MvpRouteCreate) createSpec() (*MvpRoute, *sqlgraph.CreateSpec) {
	var (
		_node = &MvpRoute{config: mrc.config}
		_spec = sqlgraph.NewCreateSpec(mvproute.Table, sqlgraph.NewFieldSpec(mvproute.FieldID, field.TypeInt))
	)
	if value, ok := mrc.mutation.Name(); ok {
		_spec.SetField(mvproute.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mrc.mutation.DayOfWeek(); ok {
		_spec.SetField(mvproute.FieldDayOfWeek, field.TypeString, value)
		_node.DayOfWeek = value
	}
	return _node, _spec
}

// MvpRouteCreateBulk is the builder for creating many MvpRoute entities in bulk.
type MvpRouteCreateBulk struct {
	config
	err      error
	builders []*MvpRouteCreate
}

// Save creates the MvpRoute entities in the database.
func (mrcb *MvpRouteCreateBulk) Save(ctx context.Context) ([]*MvpRoute, error) {
	if mrcb.err != nil {
		return nil, mrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mrcb.builders))
	nodes := make([]*MvpRoute, len(mrcb.builders))
	mutators := make([]Mutator, len(mrcb.builders))
	for i := range mrcb.builders {
		func(i int, root context.Context) {
			builder := mrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MvpRouteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrcb *MvpRouteCreateBulk) SaveX(ctx context.Context) []*MvpRoute {
	v, err := mrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrcb *MvpRouteCreateBulk) Exec(ctx context.Context) error {
	_, err := mrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrcb *MvpRouteCreateBulk) ExecX(ctx context.Context) {
	if err := mrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
