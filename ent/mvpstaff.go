// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/mvpstaff"
)

// MvpStaff is the model entity for the MvpStaff schema.
type MvpStaff struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday                  time.Time `json:"birthday,omitempty"`
	mvp_planned_route_loaders *int
	selectValues              sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MvpStaff) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mvpstaff.FieldID:
			values[i] = new(sql.NullInt64)
		case mvpstaff.FieldName, mvpstaff.FieldRole, mvpstaff.FieldEmail, mvpstaff.FieldPhone, mvpstaff.FieldLastName:
			values[i] = new(sql.NullString)
		case mvpstaff.FieldBirthday:
			values[i] = new(sql.NullTime)
		case mvpstaff.ForeignKeys[0]: // mvp_planned_route_loaders
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MvpStaff fields.
func (ms *MvpStaff) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mvpstaff.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case mvpstaff.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ms.Name = value.String
			}
		case mvpstaff.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				ms.Role = value.String
			}
		case mvpstaff.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ms.Email = value.String
			}
		case mvpstaff.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				ms.Phone = value.String
			}
		case mvpstaff.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				ms.LastName = value.String
			}
		case mvpstaff.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				ms.Birthday = value.Time
			}
		case mvpstaff.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field mvp_planned_route_loaders", value)
			} else if value.Valid {
				ms.mvp_planned_route_loaders = new(int)
				*ms.mvp_planned_route_loaders = int(value.Int64)
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MvpStaff.
// This includes values selected through modifiers, order, etc.
func (ms *MvpStaff) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// Update returns a builder for updating this MvpStaff.
// Note that you need to call MvpStaff.Unwrap() before calling this method if this MvpStaff
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MvpStaff) Update() *MvpStaffUpdateOne {
	return NewMvpStaffClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the MvpStaff entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MvpStaff) Unwrap() *MvpStaff {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MvpStaff is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MvpStaff) String() string {
	var builder strings.Builder
	builder.WriteString("MvpStaff(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("name=")
	builder.WriteString(ms.Name)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(ms.Role)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ms.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(ms.Phone)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(ms.LastName)
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(ms.Birthday.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MvpStaffs is a parsable slice of MvpStaff.
type MvpStaffs []*MvpStaff
