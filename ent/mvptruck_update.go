// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/mvptruck"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// MvpTruckUpdate is the builder for updating MvpTruck entities.
type MvpTruckUpdate struct {
	config
	hooks    []Hook
	mutation *MvpTruckMutation
}

// Where appends a list predicates to the MvpTruckUpdate builder.
func (mtu *MvpTruckUpdate) Where(ps ...predicate.MvpTruck) *MvpTruckUpdate {
	mtu.mutation.Where(ps...)
	return mtu
}

// SetName sets the "name" field.
func (mtu *MvpTruckUpdate) SetName(s string) *MvpTruckUpdate {
	mtu.mutation.SetName(s)
	return mtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mtu *MvpTruckUpdate) SetNillableName(s *string) *MvpTruckUpdate {
	if s != nil {
		mtu.SetName(*s)
	}
	return mtu
}

// Mutation returns the MvpTruckMutation object of the builder.
func (mtu *MvpTruckUpdate) Mutation() *MvpTruckMutation {
	return mtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MvpTruckUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mtu.sqlSave, mtu.mutation, mtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MvpTruckUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MvpTruckUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MvpTruckUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mtu *MvpTruckUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mvptruck.Table, mvptruck.Columns, sqlgraph.NewFieldSpec(mvptruck.FieldID, field.TypeInt))
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.Name(); ok {
		_spec.SetField(mvptruck.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mvptruck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mtu.mutation.done = true
	return n, nil
}

// MvpTruckUpdateOne is the builder for updating a single MvpTruck entity.
type MvpTruckUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MvpTruckMutation
}

// SetName sets the "name" field.
func (mtuo *MvpTruckUpdateOne) SetName(s string) *MvpTruckUpdateOne {
	mtuo.mutation.SetName(s)
	return mtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mtuo *MvpTruckUpdateOne) SetNillableName(s *string) *MvpTruckUpdateOne {
	if s != nil {
		mtuo.SetName(*s)
	}
	return mtuo
}

// Mutation returns the MvpTruckMutation object of the builder.
func (mtuo *MvpTruckUpdateOne) Mutation() *MvpTruckMutation {
	return mtuo.mutation
}

// Where appends a list predicates to the MvpTruckUpdate builder.
func (mtuo *MvpTruckUpdateOne) Where(ps ...predicate.MvpTruck) *MvpTruckUpdateOne {
	mtuo.mutation.Where(ps...)
	return mtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtuo *MvpTruckUpdateOne) Select(field string, fields ...string) *MvpTruckUpdateOne {
	mtuo.fields = append([]string{field}, fields...)
	return mtuo
}

// Save executes the query and returns the updated MvpTruck entity.
func (mtuo *MvpTruckUpdateOne) Save(ctx context.Context) (*MvpTruck, error) {
	return withHooks(ctx, mtuo.sqlSave, mtuo.mutation, mtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MvpTruckUpdateOne) SaveX(ctx context.Context) *MvpTruck {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MvpTruckUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MvpTruckUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mtuo *MvpTruckUpdateOne) sqlSave(ctx context.Context) (_node *MvpTruck, err error) {
	_spec := sqlgraph.NewUpdateSpec(mvptruck.Table, mvptruck.Columns, sqlgraph.NewFieldSpec(mvptruck.FieldID, field.TypeInt))
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MvpTruck.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mvptruck.FieldID)
		for _, f := range fields {
			if !mvptruck.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mvptruck.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtuo.mutation.Name(); ok {
		_spec.SetField(mvptruck.FieldName, field.TypeString, value)
	}
	_node = &MvpTruck{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mvptruck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mtuo.mutation.done = true
	return _node, nil
}
