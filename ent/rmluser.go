// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/rmluser"
)

// RMLUser is the model entity for the RMLUser schema.
type RMLUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// ReviewCount holds the value of the "review_count" field.
	ReviewCount int `json:"review_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RMLUserQuery when eager-loading is set.
	Edges        RMLUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RMLUserEdges holds the relations/edges for other nodes in the graph.
type RMLUserEdges struct {
	// Reviews holds the value of the reviews edge.
	Reviews []*Review `json:"reviews,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ReviewsOrErr returns the Reviews value or an error if the edge
// was not loaded in eager-loading.
func (e RMLUserEdges) ReviewsOrErr() ([]*Review, error) {
	if e.loadedTypes[0] {
		return e.Reviews, nil
	}
	return nil, &NotLoadedError{edge: "reviews"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RMLUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rmluser.FieldID, rmluser.FieldReviewCount:
			values[i] = new(sql.NullInt64)
		case rmluser.FieldName, rmluser.FieldEmail, rmluser.FieldPassword, rmluser.FieldRole:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RMLUser fields.
func (ru *RMLUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rmluser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ru.ID = int(value.Int64)
		case rmluser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ru.Name = value.String
			}
		case rmluser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ru.Email = value.String
			}
		case rmluser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				ru.Password = value.String
			}
		case rmluser.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				ru.Role = value.String
			}
		case rmluser.FieldReviewCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field review_count", values[i])
			} else if value.Valid {
				ru.ReviewCount = int(value.Int64)
			}
		default:
			ru.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RMLUser.
// This includes values selected through modifiers, order, etc.
func (ru *RMLUser) Value(name string) (ent.Value, error) {
	return ru.selectValues.Get(name)
}

// QueryReviews queries the "reviews" edge of the RMLUser entity.
func (ru *RMLUser) QueryReviews() *ReviewQuery {
	return NewRMLUserClient(ru.config).QueryReviews(ru)
}

// Update returns a builder for updating this RMLUser.
// Note that you need to call RMLUser.Unwrap() before calling this method if this RMLUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ru *RMLUser) Update() *RMLUserUpdateOne {
	return NewRMLUserClient(ru.config).UpdateOne(ru)
}

// Unwrap unwraps the RMLUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ru *RMLUser) Unwrap() *RMLUser {
	_tx, ok := ru.config.driver.(*txDriver)
	if !ok {
		panic("ent: RMLUser is not a transactional entity")
	}
	ru.config.driver = _tx.drv
	return ru
}

// String implements the fmt.Stringer.
func (ru *RMLUser) String() string {
	var builder strings.Builder
	builder.WriteString("RMLUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ru.ID))
	builder.WriteString("name=")
	builder.WriteString(ru.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ru.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(ru.Password)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(ru.Role)
	builder.WriteString(", ")
	builder.WriteString("review_count=")
	builder.WriteString(fmt.Sprintf("%v", ru.ReviewCount))
	builder.WriteByte(')')
	return builder.String()
}

// RMLUsers is a parsable slice of RMLUser.
type RMLUsers []*RMLUser
