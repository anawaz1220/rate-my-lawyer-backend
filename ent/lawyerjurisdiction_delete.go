// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/lawyerjurisdiction"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// LawyerJurisdictionDelete is the builder for deleting a LawyerJurisdiction entity.
type LawyerJurisdictionDelete struct {
	config
	hooks    []Hook
	mutation *LawyerJurisdictionMutation
}

// Where appends a list predicates to the LawyerJurisdictionDelete builder.
func (ljd *LawyerJurisdictionDelete) Where(ps ...predicate.LawyerJurisdiction) *LawyerJurisdictionDelete {
	ljd.mutation.Where(ps...)
	return ljd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ljd *LawyerJurisdictionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ljd.sqlExec, ljd.mutation, ljd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ljd *LawyerJurisdictionDelete) ExecX(ctx context.Context) int {
	n, err := ljd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ljd *LawyerJurisdictionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lawyerjurisdiction.Table, sqlgraph.NewFieldSpec(lawyerjurisdiction.FieldID, field.TypeInt))
	if ps := ljd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ljd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ljd.mutation.done = true
	return affected, err
}

// LawyerJurisdictionDeleteOne is the builder for deleting a single LawyerJurisdiction entity.
type LawyerJurisdictionDeleteOne struct {
	ljd *LawyerJurisdictionDelete
}

// Where appends a list predicates to the LawyerJurisdictionDelete builder.
func (ljdo *LawyerJurisdictionDeleteOne) Where(ps ...predicate.LawyerJurisdiction) *LawyerJurisdictionDeleteOne {
	ljdo.ljd.mutation.Where(ps...)
	return ljdo
}

// Exec executes the deletion query.
func (ljdo *LawyerJurisdictionDeleteOne) Exec(ctx context.Context) error {
	n, err := ljdo.ljd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lawyerjurisdiction.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ljdo *LawyerJurisdictionDeleteOne) ExecX(ctx context.Context) {
	if err := ljdo.Exec(ctx); err != nil {
		panic(err)
	}
}
