// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/decision"
	"github.com/mikestefanello/pagoda/ent/jurisdiction"
	"github.com/mikestefanello/pagoda/ent/lawyer"
	"github.com/mikestefanello/pagoda/ent/lawyerjurisdiction"
	"github.com/mikestefanello/pagoda/ent/mvpmaterial"
	"github.com/mikestefanello/pagoda/ent/mvpplannedroute"
	"github.com/mikestefanello/pagoda/ent/mvproute"
	"github.com/mikestefanello/pagoda/ent/mvpstaff"
	"github.com/mikestefanello/pagoda/ent/mvptruck"
	"github.com/mikestefanello/pagoda/ent/passwordtoken"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/review"
	"github.com/mikestefanello/pagoda/ent/rmluser"
	"github.com/mikestefanello/pagoda/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDecision           = "Decision"
	TypeJurisdiction       = "Jurisdiction"
	TypeLawyer             = "Lawyer"
	TypeLawyerJurisdiction = "LawyerJurisdiction"
	TypeMvpMaterial        = "MvpMaterial"
	TypeMvpPlannedRoute    = "MvpPlannedRoute"
	TypeMvpRoute           = "MvpRoute"
	TypeMvpStaff           = "MvpStaff"
	TypeMvpTruck           = "MvpTruck"
	TypePasswordToken      = "PasswordToken"
	TypeRMLUser            = "RMLUser"
	TypeReview             = "Review"
	TypeUser               = "User"
)

// DecisionMutation represents an operation that mutates the Decision nodes in the graph.
type DecisionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	url           *string
	clearedFields map[string]struct{}
	lawyer        *int
	clearedlawyer bool
	done          bool
	oldValue      func(context.Context) (*Decision, error)
	predicates    []predicate.Decision
}

var _ ent.Mutation = (*DecisionMutation)(nil)

// decisionOption allows management of the mutation configuration using functional options.
type decisionOption func(*DecisionMutation)

// newDecisionMutation creates new mutation for the Decision entity.
func newDecisionMutation(c config, op Op, opts ...decisionOption) *DecisionMutation {
	m := &DecisionMutation{
		config:        c,
		op:            op,
		typ:           TypeDecision,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDecisionID sets the ID field of the mutation.
func withDecisionID(id int) decisionOption {
	return func(m *DecisionMutation) {
		var (
			err   error
			once  sync.Once
			value *Decision
		)
		m.oldValue = func(ctx context.Context) (*Decision, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Decision.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDecision sets the old Decision of the mutation.
func withDecision(node *Decision) decisionOption {
	return func(m *DecisionMutation) {
		m.oldValue = func(context.Context) (*Decision, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DecisionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DecisionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DecisionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DecisionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Decision.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *DecisionMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *DecisionMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Decision entity.
// If the Decision object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DecisionMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *DecisionMutation) ResetURL() {
	m.url = nil
}

// SetLawyerID sets the "lawyer" edge to the Lawyer entity by id.
func (m *DecisionMutation) SetLawyerID(id int) {
	m.lawyer = &id
}

// ClearLawyer clears the "lawyer" edge to the Lawyer entity.
func (m *DecisionMutation) ClearLawyer() {
	m.clearedlawyer = true
}

// LawyerCleared reports if the "lawyer" edge to the Lawyer entity was cleared.
func (m *DecisionMutation) LawyerCleared() bool {
	return m.clearedlawyer
}

// LawyerID returns the "lawyer" edge ID in the mutation.
func (m *DecisionMutation) LawyerID() (id int, exists bool) {
	if m.lawyer != nil {
		return *m.lawyer, true
	}
	return
}

// LawyerIDs returns the "lawyer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LawyerID instead. It exists only for internal usage by the builders.
func (m *DecisionMutation) LawyerIDs() (ids []int) {
	if id := m.lawyer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLawyer resets all changes to the "lawyer" edge.
func (m *DecisionMutation) ResetLawyer() {
	m.lawyer = nil
	m.clearedlawyer = false
}

// Where appends a list predicates to the DecisionMutation builder.
func (m *DecisionMutation) Where(ps ...predicate.Decision) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DecisionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DecisionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Decision, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DecisionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DecisionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Decision).
func (m *DecisionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DecisionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.url != nil {
		fields = append(fields, decision.FieldURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DecisionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case decision.FieldURL:
		return m.URL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DecisionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case decision.FieldURL:
		return m.OldURL(ctx)
	}
	return nil, fmt.Errorf("unknown Decision field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DecisionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case decision.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	}
	return fmt.Errorf("unknown Decision field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DecisionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DecisionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DecisionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Decision numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DecisionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DecisionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DecisionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Decision nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DecisionMutation) ResetField(name string) error {
	switch name {
	case decision.FieldURL:
		m.ResetURL()
		return nil
	}
	return fmt.Errorf("unknown Decision field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DecisionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.lawyer != nil {
		edges = append(edges, decision.EdgeLawyer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DecisionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case decision.EdgeLawyer:
		if id := m.lawyer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DecisionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DecisionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DecisionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlawyer {
		edges = append(edges, decision.EdgeLawyer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DecisionMutation) EdgeCleared(name string) bool {
	switch name {
	case decision.EdgeLawyer:
		return m.clearedlawyer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DecisionMutation) ClearEdge(name string) error {
	switch name {
	case decision.EdgeLawyer:
		m.ClearLawyer()
		return nil
	}
	return fmt.Errorf("unknown Decision unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DecisionMutation) ResetEdge(name string) error {
	switch name {
	case decision.EdgeLawyer:
		m.ResetLawyer()
		return nil
	}
	return fmt.Errorf("unknown Decision edge %s", name)
}

// JurisdictionMutation represents an operation that mutates the Jurisdiction nodes in the graph.
type JurisdictionMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	name                        *string
	clearedFields               map[string]struct{}
	lawyers                     map[int]struct{}
	removedlawyers              map[int]struct{}
	clearedlawyers              bool
	lawyer_jurisdictions        map[int]struct{}
	removedlawyer_jurisdictions map[int]struct{}
	clearedlawyer_jurisdictions bool
	done                        bool
	oldValue                    func(context.Context) (*Jurisdiction, error)
	predicates                  []predicate.Jurisdiction
}

var _ ent.Mutation = (*JurisdictionMutation)(nil)

// jurisdictionOption allows management of the mutation configuration using functional options.
type jurisdictionOption func(*JurisdictionMutation)

// newJurisdictionMutation creates new mutation for the Jurisdiction entity.
func newJurisdictionMutation(c config, op Op, opts ...jurisdictionOption) *JurisdictionMutation {
	m := &JurisdictionMutation{
		config:        c,
		op:            op,
		typ:           TypeJurisdiction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJurisdictionID sets the ID field of the mutation.
func withJurisdictionID(id int) jurisdictionOption {
	return func(m *JurisdictionMutation) {
		var (
			err   error
			once  sync.Once
			value *Jurisdiction
		)
		m.oldValue = func(ctx context.Context) (*Jurisdiction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Jurisdiction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJurisdiction sets the old Jurisdiction of the mutation.
func withJurisdiction(node *Jurisdiction) jurisdictionOption {
	return func(m *JurisdictionMutation) {
		m.oldValue = func(context.Context) (*Jurisdiction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JurisdictionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JurisdictionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *JurisdictionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *JurisdictionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Jurisdiction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *JurisdictionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *JurisdictionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Jurisdiction entity.
// If the Jurisdiction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JurisdictionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *JurisdictionMutation) ResetName() {
	m.name = nil
}

// AddLawyerIDs adds the "lawyers" edge to the Lawyer entity by ids.
func (m *JurisdictionMutation) AddLawyerIDs(ids ...int) {
	if m.lawyers == nil {
		m.lawyers = make(map[int]struct{})
	}
	for i := range ids {
		m.lawyers[ids[i]] = struct{}{}
	}
}

// ClearLawyers clears the "lawyers" edge to the Lawyer entity.
func (m *JurisdictionMutation) ClearLawyers() {
	m.clearedlawyers = true
}

// LawyersCleared reports if the "lawyers" edge to the Lawyer entity was cleared.
func (m *JurisdictionMutation) LawyersCleared() bool {
	return m.clearedlawyers
}

// RemoveLawyerIDs removes the "lawyers" edge to the Lawyer entity by IDs.
func (m *JurisdictionMutation) RemoveLawyerIDs(ids ...int) {
	if m.removedlawyers == nil {
		m.removedlawyers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.lawyers, ids[i])
		m.removedlawyers[ids[i]] = struct{}{}
	}
}

// RemovedLawyers returns the removed IDs of the "lawyers" edge to the Lawyer entity.
func (m *JurisdictionMutation) RemovedLawyersIDs() (ids []int) {
	for id := range m.removedlawyers {
		ids = append(ids, id)
	}
	return
}

// LawyersIDs returns the "lawyers" edge IDs in the mutation.
func (m *JurisdictionMutation) LawyersIDs() (ids []int) {
	for id := range m.lawyers {
		ids = append(ids, id)
	}
	return
}

// ResetLawyers resets all changes to the "lawyers" edge.
func (m *JurisdictionMutation) ResetLawyers() {
	m.lawyers = nil
	m.clearedlawyers = false
	m.removedlawyers = nil
}

// AddLawyerJurisdictionIDs adds the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity by ids.
func (m *JurisdictionMutation) AddLawyerJurisdictionIDs(ids ...int) {
	if m.lawyer_jurisdictions == nil {
		m.lawyer_jurisdictions = make(map[int]struct{})
	}
	for i := range ids {
		m.lawyer_jurisdictions[ids[i]] = struct{}{}
	}
}

// ClearLawyerJurisdictions clears the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity.
func (m *JurisdictionMutation) ClearLawyerJurisdictions() {
	m.clearedlawyer_jurisdictions = true
}

// LawyerJurisdictionsCleared reports if the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity was cleared.
func (m *JurisdictionMutation) LawyerJurisdictionsCleared() bool {
	return m.clearedlawyer_jurisdictions
}

// RemoveLawyerJurisdictionIDs removes the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity by IDs.
func (m *JurisdictionMutation) RemoveLawyerJurisdictionIDs(ids ...int) {
	if m.removedlawyer_jurisdictions == nil {
		m.removedlawyer_jurisdictions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.lawyer_jurisdictions, ids[i])
		m.removedlawyer_jurisdictions[ids[i]] = struct{}{}
	}
}

// RemovedLawyerJurisdictions returns the removed IDs of the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity.
func (m *JurisdictionMutation) RemovedLawyerJurisdictionsIDs() (ids []int) {
	for id := range m.removedlawyer_jurisdictions {
		ids = append(ids, id)
	}
	return
}

// LawyerJurisdictionsIDs returns the "lawyer_jurisdictions" edge IDs in the mutation.
func (m *JurisdictionMutation) LawyerJurisdictionsIDs() (ids []int) {
	for id := range m.lawyer_jurisdictions {
		ids = append(ids, id)
	}
	return
}

// ResetLawyerJurisdictions resets all changes to the "lawyer_jurisdictions" edge.
func (m *JurisdictionMutation) ResetLawyerJurisdictions() {
	m.lawyer_jurisdictions = nil
	m.clearedlawyer_jurisdictions = false
	m.removedlawyer_jurisdictions = nil
}

// Where appends a list predicates to the JurisdictionMutation builder.
func (m *JurisdictionMutation) Where(ps ...predicate.Jurisdiction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the JurisdictionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *JurisdictionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Jurisdiction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *JurisdictionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *JurisdictionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Jurisdiction).
func (m *JurisdictionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JurisdictionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, jurisdiction.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JurisdictionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case jurisdiction.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JurisdictionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case jurisdiction.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Jurisdiction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JurisdictionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case jurisdiction.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Jurisdiction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JurisdictionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JurisdictionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JurisdictionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Jurisdiction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JurisdictionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JurisdictionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JurisdictionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Jurisdiction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JurisdictionMutation) ResetField(name string) error {
	switch name {
	case jurisdiction.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Jurisdiction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JurisdictionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.lawyers != nil {
		edges = append(edges, jurisdiction.EdgeLawyers)
	}
	if m.lawyer_jurisdictions != nil {
		edges = append(edges, jurisdiction.EdgeLawyerJurisdictions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JurisdictionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case jurisdiction.EdgeLawyers:
		ids := make([]ent.Value, 0, len(m.lawyers))
		for id := range m.lawyers {
			ids = append(ids, id)
		}
		return ids
	case jurisdiction.EdgeLawyerJurisdictions:
		ids := make([]ent.Value, 0, len(m.lawyer_jurisdictions))
		for id := range m.lawyer_jurisdictions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JurisdictionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlawyers != nil {
		edges = append(edges, jurisdiction.EdgeLawyers)
	}
	if m.removedlawyer_jurisdictions != nil {
		edges = append(edges, jurisdiction.EdgeLawyerJurisdictions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JurisdictionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case jurisdiction.EdgeLawyers:
		ids := make([]ent.Value, 0, len(m.removedlawyers))
		for id := range m.removedlawyers {
			ids = append(ids, id)
		}
		return ids
	case jurisdiction.EdgeLawyerJurisdictions:
		ids := make([]ent.Value, 0, len(m.removedlawyer_jurisdictions))
		for id := range m.removedlawyer_jurisdictions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JurisdictionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlawyers {
		edges = append(edges, jurisdiction.EdgeLawyers)
	}
	if m.clearedlawyer_jurisdictions {
		edges = append(edges, jurisdiction.EdgeLawyerJurisdictions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JurisdictionMutation) EdgeCleared(name string) bool {
	switch name {
	case jurisdiction.EdgeLawyers:
		return m.clearedlawyers
	case jurisdiction.EdgeLawyerJurisdictions:
		return m.clearedlawyer_jurisdictions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JurisdictionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Jurisdiction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JurisdictionMutation) ResetEdge(name string) error {
	switch name {
	case jurisdiction.EdgeLawyers:
		m.ResetLawyers()
		return nil
	case jurisdiction.EdgeLawyerJurisdictions:
		m.ResetLawyerJurisdictions()
		return nil
	}
	return fmt.Errorf("unknown Jurisdiction edge %s", name)
}

// LawyerMutation represents an operation that mutates the Lawyer nodes in the graph.
type LawyerMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	full_name                   *string
	first_name                  *string
	middle_name                 *string
	last_name                   *string
	gender                      *string
	address                     *string
	phone                       *string
	practicing_status           *string
	profile_url                 *string
	average_rating              *float64
	addaverage_rating           *float64
	review_count                *int
	addreview_count             *int
	clearedFields               map[string]struct{}
	jurisdictions               map[int]struct{}
	removedjurisdictions        map[int]struct{}
	clearedjurisdictions        bool
	decisions                   map[int]struct{}
	removeddecisions            map[int]struct{}
	cleareddecisions            bool
	reviews                     map[int]struct{}
	removedreviews              map[int]struct{}
	clearedreviews              bool
	lawyer_jurisdictions        map[int]struct{}
	removedlawyer_jurisdictions map[int]struct{}
	clearedlawyer_jurisdictions bool
	done                        bool
	oldValue                    func(context.Context) (*Lawyer, error)
	predicates                  []predicate.Lawyer
}

var _ ent.Mutation = (*LawyerMutation)(nil)

// lawyerOption allows management of the mutation configuration using functional options.
type lawyerOption func(*LawyerMutation)

// newLawyerMutation creates new mutation for the Lawyer entity.
func newLawyerMutation(c config, op Op, opts ...lawyerOption) *LawyerMutation {
	m := &LawyerMutation{
		config:        c,
		op:            op,
		typ:           TypeLawyer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLawyerID sets the ID field of the mutation.
func withLawyerID(id int) lawyerOption {
	return func(m *LawyerMutation) {
		var (
			err   error
			once  sync.Once
			value *Lawyer
		)
		m.oldValue = func(ctx context.Context) (*Lawyer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Lawyer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLawyer sets the old Lawyer of the mutation.
func withLawyer(node *Lawyer) lawyerOption {
	return func(m *LawyerMutation) {
		m.oldValue = func(context.Context) (*Lawyer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LawyerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LawyerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LawyerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LawyerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Lawyer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFullName sets the "full_name" field.
func (m *LawyerMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *LawyerMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *LawyerMutation) ResetFullName() {
	m.full_name = nil
}

// SetFirstName sets the "first_name" field.
func (m *LawyerMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *LawyerMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *LawyerMutation) ResetFirstName() {
	m.first_name = nil
}

// SetMiddleName sets the "middle_name" field.
func (m *LawyerMutation) SetMiddleName(s string) {
	m.middle_name = &s
}

// MiddleName returns the value of the "middle_name" field in the mutation.
func (m *LawyerMutation) MiddleName() (r string, exists bool) {
	v := m.middle_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMiddleName returns the old "middle_name" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldMiddleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMiddleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMiddleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMiddleName: %w", err)
	}
	return oldValue.MiddleName, nil
}

// ResetMiddleName resets all changes to the "middle_name" field.
func (m *LawyerMutation) ResetMiddleName() {
	m.middle_name = nil
}

// SetLastName sets the "last_name" field.
func (m *LawyerMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *LawyerMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *LawyerMutation) ResetLastName() {
	m.last_name = nil
}

// SetGender sets the "gender" field.
func (m *LawyerMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *LawyerMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *LawyerMutation) ResetGender() {
	m.gender = nil
}

// SetAddress sets the "address" field.
func (m *LawyerMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *LawyerMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *LawyerMutation) ResetAddress() {
	m.address = nil
}

// SetPhone sets the "phone" field.
func (m *LawyerMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *LawyerMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *LawyerMutation) ResetPhone() {
	m.phone = nil
}

// SetPracticingStatus sets the "practicing_status" field.
func (m *LawyerMutation) SetPracticingStatus(s string) {
	m.practicing_status = &s
}

// PracticingStatus returns the value of the "practicing_status" field in the mutation.
func (m *LawyerMutation) PracticingStatus() (r string, exists bool) {
	v := m.practicing_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPracticingStatus returns the old "practicing_status" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldPracticingStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPracticingStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPracticingStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPracticingStatus: %w", err)
	}
	return oldValue.PracticingStatus, nil
}

// ResetPracticingStatus resets all changes to the "practicing_status" field.
func (m *LawyerMutation) ResetPracticingStatus() {
	m.practicing_status = nil
}

// SetProfileURL sets the "profile_url" field.
func (m *LawyerMutation) SetProfileURL(s string) {
	m.profile_url = &s
}

// ProfileURL returns the value of the "profile_url" field in the mutation.
func (m *LawyerMutation) ProfileURL() (r string, exists bool) {
	v := m.profile_url
	if v == nil {
		return
	}
	return *v, true
}

// OldProfileURL returns the old "profile_url" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldProfileURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfileURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfileURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfileURL: %w", err)
	}
	return oldValue.ProfileURL, nil
}

// ResetProfileURL resets all changes to the "profile_url" field.
func (m *LawyerMutation) ResetProfileURL() {
	m.profile_url = nil
}

// SetAverageRating sets the "average_rating" field.
func (m *LawyerMutation) SetAverageRating(f float64) {
	m.average_rating = &f
	m.addaverage_rating = nil
}

// AverageRating returns the value of the "average_rating" field in the mutation.
func (m *LawyerMutation) AverageRating() (r float64, exists bool) {
	v := m.average_rating
	if v == nil {
		return
	}
	return *v, true
}

// OldAverageRating returns the old "average_rating" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldAverageRating(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAverageRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAverageRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAverageRating: %w", err)
	}
	return oldValue.AverageRating, nil
}

// AddAverageRating adds f to the "average_rating" field.
func (m *LawyerMutation) AddAverageRating(f float64) {
	if m.addaverage_rating != nil {
		*m.addaverage_rating += f
	} else {
		m.addaverage_rating = &f
	}
}

// AddedAverageRating returns the value that was added to the "average_rating" field in this mutation.
func (m *LawyerMutation) AddedAverageRating() (r float64, exists bool) {
	v := m.addaverage_rating
	if v == nil {
		return
	}
	return *v, true
}

// ResetAverageRating resets all changes to the "average_rating" field.
func (m *LawyerMutation) ResetAverageRating() {
	m.average_rating = nil
	m.addaverage_rating = nil
}

// SetReviewCount sets the "review_count" field.
func (m *LawyerMutation) SetReviewCount(i int) {
	m.review_count = &i
	m.addreview_count = nil
}

// ReviewCount returns the value of the "review_count" field in the mutation.
func (m *LawyerMutation) ReviewCount() (r int, exists bool) {
	v := m.review_count
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewCount returns the old "review_count" field's value of the Lawyer entity.
// If the Lawyer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerMutation) OldReviewCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewCount: %w", err)
	}
	return oldValue.ReviewCount, nil
}

// AddReviewCount adds i to the "review_count" field.
func (m *LawyerMutation) AddReviewCount(i int) {
	if m.addreview_count != nil {
		*m.addreview_count += i
	} else {
		m.addreview_count = &i
	}
}

// AddedReviewCount returns the value that was added to the "review_count" field in this mutation.
func (m *LawyerMutation) AddedReviewCount() (r int, exists bool) {
	v := m.addreview_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetReviewCount resets all changes to the "review_count" field.
func (m *LawyerMutation) ResetReviewCount() {
	m.review_count = nil
	m.addreview_count = nil
}

// AddJurisdictionIDs adds the "jurisdictions" edge to the Jurisdiction entity by ids.
func (m *LawyerMutation) AddJurisdictionIDs(ids ...int) {
	if m.jurisdictions == nil {
		m.jurisdictions = make(map[int]struct{})
	}
	for i := range ids {
		m.jurisdictions[ids[i]] = struct{}{}
	}
}

// ClearJurisdictions clears the "jurisdictions" edge to the Jurisdiction entity.
func (m *LawyerMutation) ClearJurisdictions() {
	m.clearedjurisdictions = true
}

// JurisdictionsCleared reports if the "jurisdictions" edge to the Jurisdiction entity was cleared.
func (m *LawyerMutation) JurisdictionsCleared() bool {
	return m.clearedjurisdictions
}

// RemoveJurisdictionIDs removes the "jurisdictions" edge to the Jurisdiction entity by IDs.
func (m *LawyerMutation) RemoveJurisdictionIDs(ids ...int) {
	if m.removedjurisdictions == nil {
		m.removedjurisdictions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.jurisdictions, ids[i])
		m.removedjurisdictions[ids[i]] = struct{}{}
	}
}

// RemovedJurisdictions returns the removed IDs of the "jurisdictions" edge to the Jurisdiction entity.
func (m *LawyerMutation) RemovedJurisdictionsIDs() (ids []int) {
	for id := range m.removedjurisdictions {
		ids = append(ids, id)
	}
	return
}

// JurisdictionsIDs returns the "jurisdictions" edge IDs in the mutation.
func (m *LawyerMutation) JurisdictionsIDs() (ids []int) {
	for id := range m.jurisdictions {
		ids = append(ids, id)
	}
	return
}

// ResetJurisdictions resets all changes to the "jurisdictions" edge.
func (m *LawyerMutation) ResetJurisdictions() {
	m.jurisdictions = nil
	m.clearedjurisdictions = false
	m.removedjurisdictions = nil
}

// AddDecisionIDs adds the "decisions" edge to the Decision entity by ids.
func (m *LawyerMutation) AddDecisionIDs(ids ...int) {
	if m.decisions == nil {
		m.decisions = make(map[int]struct{})
	}
	for i := range ids {
		m.decisions[ids[i]] = struct{}{}
	}
}

// ClearDecisions clears the "decisions" edge to the Decision entity.
func (m *LawyerMutation) ClearDecisions() {
	m.cleareddecisions = true
}

// DecisionsCleared reports if the "decisions" edge to the Decision entity was cleared.
func (m *LawyerMutation) DecisionsCleared() bool {
	return m.cleareddecisions
}

// RemoveDecisionIDs removes the "decisions" edge to the Decision entity by IDs.
func (m *LawyerMutation) RemoveDecisionIDs(ids ...int) {
	if m.removeddecisions == nil {
		m.removeddecisions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.decisions, ids[i])
		m.removeddecisions[ids[i]] = struct{}{}
	}
}

// RemovedDecisions returns the removed IDs of the "decisions" edge to the Decision entity.
func (m *LawyerMutation) RemovedDecisionsIDs() (ids []int) {
	for id := range m.removeddecisions {
		ids = append(ids, id)
	}
	return
}

// DecisionsIDs returns the "decisions" edge IDs in the mutation.
func (m *LawyerMutation) DecisionsIDs() (ids []int) {
	for id := range m.decisions {
		ids = append(ids, id)
	}
	return
}

// ResetDecisions resets all changes to the "decisions" edge.
func (m *LawyerMutation) ResetDecisions() {
	m.decisions = nil
	m.cleareddecisions = false
	m.removeddecisions = nil
}

// AddReviewIDs adds the "reviews" edge to the Review entity by ids.
func (m *LawyerMutation) AddReviewIDs(ids ...int) {
	if m.reviews == nil {
		m.reviews = make(map[int]struct{})
	}
	for i := range ids {
		m.reviews[ids[i]] = struct{}{}
	}
}

// ClearReviews clears the "reviews" edge to the Review entity.
func (m *LawyerMutation) ClearReviews() {
	m.clearedreviews = true
}

// ReviewsCleared reports if the "reviews" edge to the Review entity was cleared.
func (m *LawyerMutation) ReviewsCleared() bool {
	return m.clearedreviews
}

// RemoveReviewIDs removes the "reviews" edge to the Review entity by IDs.
func (m *LawyerMutation) RemoveReviewIDs(ids ...int) {
	if m.removedreviews == nil {
		m.removedreviews = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reviews, ids[i])
		m.removedreviews[ids[i]] = struct{}{}
	}
}

// RemovedReviews returns the removed IDs of the "reviews" edge to the Review entity.
func (m *LawyerMutation) RemovedReviewsIDs() (ids []int) {
	for id := range m.removedreviews {
		ids = append(ids, id)
	}
	return
}

// ReviewsIDs returns the "reviews" edge IDs in the mutation.
func (m *LawyerMutation) ReviewsIDs() (ids []int) {
	for id := range m.reviews {
		ids = append(ids, id)
	}
	return
}

// ResetReviews resets all changes to the "reviews" edge.
func (m *LawyerMutation) ResetReviews() {
	m.reviews = nil
	m.clearedreviews = false
	m.removedreviews = nil
}

// AddLawyerJurisdictionIDs adds the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity by ids.
func (m *LawyerMutation) AddLawyerJurisdictionIDs(ids ...int) {
	if m.lawyer_jurisdictions == nil {
		m.lawyer_jurisdictions = make(map[int]struct{})
	}
	for i := range ids {
		m.lawyer_jurisdictions[ids[i]] = struct{}{}
	}
}

// ClearLawyerJurisdictions clears the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity.
func (m *LawyerMutation) ClearLawyerJurisdictions() {
	m.clearedlawyer_jurisdictions = true
}

// LawyerJurisdictionsCleared reports if the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity was cleared.
func (m *LawyerMutation) LawyerJurisdictionsCleared() bool {
	return m.clearedlawyer_jurisdictions
}

// RemoveLawyerJurisdictionIDs removes the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity by IDs.
func (m *LawyerMutation) RemoveLawyerJurisdictionIDs(ids ...int) {
	if m.removedlawyer_jurisdictions == nil {
		m.removedlawyer_jurisdictions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.lawyer_jurisdictions, ids[i])
		m.removedlawyer_jurisdictions[ids[i]] = struct{}{}
	}
}

// RemovedLawyerJurisdictions returns the removed IDs of the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity.
func (m *LawyerMutation) RemovedLawyerJurisdictionsIDs() (ids []int) {
	for id := range m.removedlawyer_jurisdictions {
		ids = append(ids, id)
	}
	return
}

// LawyerJurisdictionsIDs returns the "lawyer_jurisdictions" edge IDs in the mutation.
func (m *LawyerMutation) LawyerJurisdictionsIDs() (ids []int) {
	for id := range m.lawyer_jurisdictions {
		ids = append(ids, id)
	}
	return
}

// ResetLawyerJurisdictions resets all changes to the "lawyer_jurisdictions" edge.
func (m *LawyerMutation) ResetLawyerJurisdictions() {
	m.lawyer_jurisdictions = nil
	m.clearedlawyer_jurisdictions = false
	m.removedlawyer_jurisdictions = nil
}

// Where appends a list predicates to the LawyerMutation builder.
func (m *LawyerMutation) Where(ps ...predicate.Lawyer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LawyerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LawyerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Lawyer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LawyerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LawyerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Lawyer).
func (m *LawyerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LawyerMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.full_name != nil {
		fields = append(fields, lawyer.FieldFullName)
	}
	if m.first_name != nil {
		fields = append(fields, lawyer.FieldFirstName)
	}
	if m.middle_name != nil {
		fields = append(fields, lawyer.FieldMiddleName)
	}
	if m.last_name != nil {
		fields = append(fields, lawyer.FieldLastName)
	}
	if m.gender != nil {
		fields = append(fields, lawyer.FieldGender)
	}
	if m.address != nil {
		fields = append(fields, lawyer.FieldAddress)
	}
	if m.phone != nil {
		fields = append(fields, lawyer.FieldPhone)
	}
	if m.practicing_status != nil {
		fields = append(fields, lawyer.FieldPracticingStatus)
	}
	if m.profile_url != nil {
		fields = append(fields, lawyer.FieldProfileURL)
	}
	if m.average_rating != nil {
		fields = append(fields, lawyer.FieldAverageRating)
	}
	if m.review_count != nil {
		fields = append(fields, lawyer.FieldReviewCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LawyerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lawyer.FieldFullName:
		return m.FullName()
	case lawyer.FieldFirstName:
		return m.FirstName()
	case lawyer.FieldMiddleName:
		return m.MiddleName()
	case lawyer.FieldLastName:
		return m.LastName()
	case lawyer.FieldGender:
		return m.Gender()
	case lawyer.FieldAddress:
		return m.Address()
	case lawyer.FieldPhone:
		return m.Phone()
	case lawyer.FieldPracticingStatus:
		return m.PracticingStatus()
	case lawyer.FieldProfileURL:
		return m.ProfileURL()
	case lawyer.FieldAverageRating:
		return m.AverageRating()
	case lawyer.FieldReviewCount:
		return m.ReviewCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LawyerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lawyer.FieldFullName:
		return m.OldFullName(ctx)
	case lawyer.FieldFirstName:
		return m.OldFirstName(ctx)
	case lawyer.FieldMiddleName:
		return m.OldMiddleName(ctx)
	case lawyer.FieldLastName:
		return m.OldLastName(ctx)
	case lawyer.FieldGender:
		return m.OldGender(ctx)
	case lawyer.FieldAddress:
		return m.OldAddress(ctx)
	case lawyer.FieldPhone:
		return m.OldPhone(ctx)
	case lawyer.FieldPracticingStatus:
		return m.OldPracticingStatus(ctx)
	case lawyer.FieldProfileURL:
		return m.OldProfileURL(ctx)
	case lawyer.FieldAverageRating:
		return m.OldAverageRating(ctx)
	case lawyer.FieldReviewCount:
		return m.OldReviewCount(ctx)
	}
	return nil, fmt.Errorf("unknown Lawyer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LawyerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lawyer.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case lawyer.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case lawyer.FieldMiddleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMiddleName(v)
		return nil
	case lawyer.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case lawyer.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case lawyer.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case lawyer.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case lawyer.FieldPracticingStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPracticingStatus(v)
		return nil
	case lawyer.FieldProfileURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfileURL(v)
		return nil
	case lawyer.FieldAverageRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAverageRating(v)
		return nil
	case lawyer.FieldReviewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewCount(v)
		return nil
	}
	return fmt.Errorf("unknown Lawyer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LawyerMutation) AddedFields() []string {
	var fields []string
	if m.addaverage_rating != nil {
		fields = append(fields, lawyer.FieldAverageRating)
	}
	if m.addreview_count != nil {
		fields = append(fields, lawyer.FieldReviewCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LawyerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case lawyer.FieldAverageRating:
		return m.AddedAverageRating()
	case lawyer.FieldReviewCount:
		return m.AddedReviewCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LawyerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case lawyer.FieldAverageRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAverageRating(v)
		return nil
	case lawyer.FieldReviewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReviewCount(v)
		return nil
	}
	return fmt.Errorf("unknown Lawyer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LawyerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LawyerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LawyerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Lawyer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LawyerMutation) ResetField(name string) error {
	switch name {
	case lawyer.FieldFullName:
		m.ResetFullName()
		return nil
	case lawyer.FieldFirstName:
		m.ResetFirstName()
		return nil
	case lawyer.FieldMiddleName:
		m.ResetMiddleName()
		return nil
	case lawyer.FieldLastName:
		m.ResetLastName()
		return nil
	case lawyer.FieldGender:
		m.ResetGender()
		return nil
	case lawyer.FieldAddress:
		m.ResetAddress()
		return nil
	case lawyer.FieldPhone:
		m.ResetPhone()
		return nil
	case lawyer.FieldPracticingStatus:
		m.ResetPracticingStatus()
		return nil
	case lawyer.FieldProfileURL:
		m.ResetProfileURL()
		return nil
	case lawyer.FieldAverageRating:
		m.ResetAverageRating()
		return nil
	case lawyer.FieldReviewCount:
		m.ResetReviewCount()
		return nil
	}
	return fmt.Errorf("unknown Lawyer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LawyerMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.jurisdictions != nil {
		edges = append(edges, lawyer.EdgeJurisdictions)
	}
	if m.decisions != nil {
		edges = append(edges, lawyer.EdgeDecisions)
	}
	if m.reviews != nil {
		edges = append(edges, lawyer.EdgeReviews)
	}
	if m.lawyer_jurisdictions != nil {
		edges = append(edges, lawyer.EdgeLawyerJurisdictions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LawyerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lawyer.EdgeJurisdictions:
		ids := make([]ent.Value, 0, len(m.jurisdictions))
		for id := range m.jurisdictions {
			ids = append(ids, id)
		}
		return ids
	case lawyer.EdgeDecisions:
		ids := make([]ent.Value, 0, len(m.decisions))
		for id := range m.decisions {
			ids = append(ids, id)
		}
		return ids
	case lawyer.EdgeReviews:
		ids := make([]ent.Value, 0, len(m.reviews))
		for id := range m.reviews {
			ids = append(ids, id)
		}
		return ids
	case lawyer.EdgeLawyerJurisdictions:
		ids := make([]ent.Value, 0, len(m.lawyer_jurisdictions))
		for id := range m.lawyer_jurisdictions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LawyerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedjurisdictions != nil {
		edges = append(edges, lawyer.EdgeJurisdictions)
	}
	if m.removeddecisions != nil {
		edges = append(edges, lawyer.EdgeDecisions)
	}
	if m.removedreviews != nil {
		edges = append(edges, lawyer.EdgeReviews)
	}
	if m.removedlawyer_jurisdictions != nil {
		edges = append(edges, lawyer.EdgeLawyerJurisdictions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LawyerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case lawyer.EdgeJurisdictions:
		ids := make([]ent.Value, 0, len(m.removedjurisdictions))
		for id := range m.removedjurisdictions {
			ids = append(ids, id)
		}
		return ids
	case lawyer.EdgeDecisions:
		ids := make([]ent.Value, 0, len(m.removeddecisions))
		for id := range m.removeddecisions {
			ids = append(ids, id)
		}
		return ids
	case lawyer.EdgeReviews:
		ids := make([]ent.Value, 0, len(m.removedreviews))
		for id := range m.removedreviews {
			ids = append(ids, id)
		}
		return ids
	case lawyer.EdgeLawyerJurisdictions:
		ids := make([]ent.Value, 0, len(m.removedlawyer_jurisdictions))
		for id := range m.removedlawyer_jurisdictions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LawyerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedjurisdictions {
		edges = append(edges, lawyer.EdgeJurisdictions)
	}
	if m.cleareddecisions {
		edges = append(edges, lawyer.EdgeDecisions)
	}
	if m.clearedreviews {
		edges = append(edges, lawyer.EdgeReviews)
	}
	if m.clearedlawyer_jurisdictions {
		edges = append(edges, lawyer.EdgeLawyerJurisdictions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LawyerMutation) EdgeCleared(name string) bool {
	switch name {
	case lawyer.EdgeJurisdictions:
		return m.clearedjurisdictions
	case lawyer.EdgeDecisions:
		return m.cleareddecisions
	case lawyer.EdgeReviews:
		return m.clearedreviews
	case lawyer.EdgeLawyerJurisdictions:
		return m.clearedlawyer_jurisdictions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LawyerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Lawyer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LawyerMutation) ResetEdge(name string) error {
	switch name {
	case lawyer.EdgeJurisdictions:
		m.ResetJurisdictions()
		return nil
	case lawyer.EdgeDecisions:
		m.ResetDecisions()
		return nil
	case lawyer.EdgeReviews:
		m.ResetReviews()
		return nil
	case lawyer.EdgeLawyerJurisdictions:
		m.ResetLawyerJurisdictions()
		return nil
	}
	return fmt.Errorf("unknown Lawyer edge %s", name)
}

// LawyerJurisdictionMutation represents an operation that mutates the LawyerJurisdiction nodes in the graph.
type LawyerJurisdictionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	clearedFields       map[string]struct{}
	lawyer              *int
	clearedlawyer       bool
	jurisdiction        *int
	clearedjurisdiction bool
	done                bool
	oldValue            func(context.Context) (*LawyerJurisdiction, error)
	predicates          []predicate.LawyerJurisdiction
}

var _ ent.Mutation = (*LawyerJurisdictionMutation)(nil)

// lawyerjurisdictionOption allows management of the mutation configuration using functional options.
type lawyerjurisdictionOption func(*LawyerJurisdictionMutation)

// newLawyerJurisdictionMutation creates new mutation for the LawyerJurisdiction entity.
func newLawyerJurisdictionMutation(c config, op Op, opts ...lawyerjurisdictionOption) *LawyerJurisdictionMutation {
	m := &LawyerJurisdictionMutation{
		config:        c,
		op:            op,
		typ:           TypeLawyerJurisdiction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLawyerJurisdictionID sets the ID field of the mutation.
func withLawyerJurisdictionID(id int) lawyerjurisdictionOption {
	return func(m *LawyerJurisdictionMutation) {
		var (
			err   error
			once  sync.Once
			value *LawyerJurisdiction
		)
		m.oldValue = func(ctx context.Context) (*LawyerJurisdiction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LawyerJurisdiction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLawyerJurisdiction sets the old LawyerJurisdiction of the mutation.
func withLawyerJurisdiction(node *LawyerJurisdiction) lawyerjurisdictionOption {
	return func(m *LawyerJurisdictionMutation) {
		m.oldValue = func(context.Context) (*LawyerJurisdiction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LawyerJurisdictionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LawyerJurisdictionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LawyerJurisdictionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LawyerJurisdictionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LawyerJurisdiction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLawyerID sets the "lawyer_id" field.
func (m *LawyerJurisdictionMutation) SetLawyerID(i int) {
	m.lawyer = &i
}

// LawyerID returns the value of the "lawyer_id" field in the mutation.
func (m *LawyerJurisdictionMutation) LawyerID() (r int, exists bool) {
	v := m.lawyer
	if v == nil {
		return
	}
	return *v, true
}

// OldLawyerID returns the old "lawyer_id" field's value of the LawyerJurisdiction entity.
// If the LawyerJurisdiction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerJurisdictionMutation) OldLawyerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLawyerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLawyerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLawyerID: %w", err)
	}
	return oldValue.LawyerID, nil
}

// ResetLawyerID resets all changes to the "lawyer_id" field.
func (m *LawyerJurisdictionMutation) ResetLawyerID() {
	m.lawyer = nil
}

// SetJurisdictionID sets the "jurisdiction_id" field.
func (m *LawyerJurisdictionMutation) SetJurisdictionID(i int) {
	m.jurisdiction = &i
}

// JurisdictionID returns the value of the "jurisdiction_id" field in the mutation.
func (m *LawyerJurisdictionMutation) JurisdictionID() (r int, exists bool) {
	v := m.jurisdiction
	if v == nil {
		return
	}
	return *v, true
}

// OldJurisdictionID returns the old "jurisdiction_id" field's value of the LawyerJurisdiction entity.
// If the LawyerJurisdiction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LawyerJurisdictionMutation) OldJurisdictionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJurisdictionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJurisdictionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJurisdictionID: %w", err)
	}
	return oldValue.JurisdictionID, nil
}

// ResetJurisdictionID resets all changes to the "jurisdiction_id" field.
func (m *LawyerJurisdictionMutation) ResetJurisdictionID() {
	m.jurisdiction = nil
}

// ClearLawyer clears the "lawyer" edge to the Lawyer entity.
func (m *LawyerJurisdictionMutation) ClearLawyer() {
	m.clearedlawyer = true
	m.clearedFields[lawyerjurisdiction.FieldLawyerID] = struct{}{}
}

// LawyerCleared reports if the "lawyer" edge to the Lawyer entity was cleared.
func (m *LawyerJurisdictionMutation) LawyerCleared() bool {
	return m.clearedlawyer
}

// LawyerIDs returns the "lawyer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LawyerID instead. It exists only for internal usage by the builders.
func (m *LawyerJurisdictionMutation) LawyerIDs() (ids []int) {
	if id := m.lawyer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLawyer resets all changes to the "lawyer" edge.
func (m *LawyerJurisdictionMutation) ResetLawyer() {
	m.lawyer = nil
	m.clearedlawyer = false
}

// ClearJurisdiction clears the "jurisdiction" edge to the Jurisdiction entity.
func (m *LawyerJurisdictionMutation) ClearJurisdiction() {
	m.clearedjurisdiction = true
	m.clearedFields[lawyerjurisdiction.FieldJurisdictionID] = struct{}{}
}

// JurisdictionCleared reports if the "jurisdiction" edge to the Jurisdiction entity was cleared.
func (m *LawyerJurisdictionMutation) JurisdictionCleared() bool {
	return m.clearedjurisdiction
}

// JurisdictionIDs returns the "jurisdiction" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// JurisdictionID instead. It exists only for internal usage by the builders.
func (m *LawyerJurisdictionMutation) JurisdictionIDs() (ids []int) {
	if id := m.jurisdiction; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetJurisdiction resets all changes to the "jurisdiction" edge.
func (m *LawyerJurisdictionMutation) ResetJurisdiction() {
	m.jurisdiction = nil
	m.clearedjurisdiction = false
}

// Where appends a list predicates to the LawyerJurisdictionMutation builder.
func (m *LawyerJurisdictionMutation) Where(ps ...predicate.LawyerJurisdiction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LawyerJurisdictionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LawyerJurisdictionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LawyerJurisdiction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LawyerJurisdictionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LawyerJurisdictionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LawyerJurisdiction).
func (m *LawyerJurisdictionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LawyerJurisdictionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.lawyer != nil {
		fields = append(fields, lawyerjurisdiction.FieldLawyerID)
	}
	if m.jurisdiction != nil {
		fields = append(fields, lawyerjurisdiction.FieldJurisdictionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LawyerJurisdictionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lawyerjurisdiction.FieldLawyerID:
		return m.LawyerID()
	case lawyerjurisdiction.FieldJurisdictionID:
		return m.JurisdictionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LawyerJurisdictionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lawyerjurisdiction.FieldLawyerID:
		return m.OldLawyerID(ctx)
	case lawyerjurisdiction.FieldJurisdictionID:
		return m.OldJurisdictionID(ctx)
	}
	return nil, fmt.Errorf("unknown LawyerJurisdiction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LawyerJurisdictionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lawyerjurisdiction.FieldLawyerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLawyerID(v)
		return nil
	case lawyerjurisdiction.FieldJurisdictionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJurisdictionID(v)
		return nil
	}
	return fmt.Errorf("unknown LawyerJurisdiction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LawyerJurisdictionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LawyerJurisdictionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LawyerJurisdictionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LawyerJurisdiction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LawyerJurisdictionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LawyerJurisdictionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LawyerJurisdictionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LawyerJurisdiction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LawyerJurisdictionMutation) ResetField(name string) error {
	switch name {
	case lawyerjurisdiction.FieldLawyerID:
		m.ResetLawyerID()
		return nil
	case lawyerjurisdiction.FieldJurisdictionID:
		m.ResetJurisdictionID()
		return nil
	}
	return fmt.Errorf("unknown LawyerJurisdiction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LawyerJurisdictionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.lawyer != nil {
		edges = append(edges, lawyerjurisdiction.EdgeLawyer)
	}
	if m.jurisdiction != nil {
		edges = append(edges, lawyerjurisdiction.EdgeJurisdiction)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LawyerJurisdictionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lawyerjurisdiction.EdgeLawyer:
		if id := m.lawyer; id != nil {
			return []ent.Value{*id}
		}
	case lawyerjurisdiction.EdgeJurisdiction:
		if id := m.jurisdiction; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LawyerJurisdictionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LawyerJurisdictionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LawyerJurisdictionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlawyer {
		edges = append(edges, lawyerjurisdiction.EdgeLawyer)
	}
	if m.clearedjurisdiction {
		edges = append(edges, lawyerjurisdiction.EdgeJurisdiction)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LawyerJurisdictionMutation) EdgeCleared(name string) bool {
	switch name {
	case lawyerjurisdiction.EdgeLawyer:
		return m.clearedlawyer
	case lawyerjurisdiction.EdgeJurisdiction:
		return m.clearedjurisdiction
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LawyerJurisdictionMutation) ClearEdge(name string) error {
	switch name {
	case lawyerjurisdiction.EdgeLawyer:
		m.ClearLawyer()
		return nil
	case lawyerjurisdiction.EdgeJurisdiction:
		m.ClearJurisdiction()
		return nil
	}
	return fmt.Errorf("unknown LawyerJurisdiction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LawyerJurisdictionMutation) ResetEdge(name string) error {
	switch name {
	case lawyerjurisdiction.EdgeLawyer:
		m.ResetLawyer()
		return nil
	case lawyerjurisdiction.EdgeJurisdiction:
		m.ResetJurisdiction()
		return nil
	}
	return fmt.Errorf("unknown LawyerJurisdiction edge %s", name)
}

// MvpMaterialMutation represents an operation that mutates the MvpMaterial nodes in the graph.
type MvpMaterialMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MvpMaterial, error)
	predicates    []predicate.MvpMaterial
}

var _ ent.Mutation = (*MvpMaterialMutation)(nil)

// mvpmaterialOption allows management of the mutation configuration using functional options.
type mvpmaterialOption func(*MvpMaterialMutation)

// newMvpMaterialMutation creates new mutation for the MvpMaterial entity.
func newMvpMaterialMutation(c config, op Op, opts ...mvpmaterialOption) *MvpMaterialMutation {
	m := &MvpMaterialMutation{
		config:        c,
		op:            op,
		typ:           TypeMvpMaterial,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMvpMaterialID sets the ID field of the mutation.
func withMvpMaterialID(id int) mvpmaterialOption {
	return func(m *MvpMaterialMutation) {
		var (
			err   error
			once  sync.Once
			value *MvpMaterial
		)
		m.oldValue = func(ctx context.Context) (*MvpMaterial, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MvpMaterial.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMvpMaterial sets the old MvpMaterial of the mutation.
func withMvpMaterial(node *MvpMaterial) mvpmaterialOption {
	return func(m *MvpMaterialMutation) {
		m.oldValue = func(context.Context) (*MvpMaterial, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MvpMaterialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MvpMaterialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MvpMaterialMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MvpMaterialMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MvpMaterial.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MvpMaterialMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MvpMaterialMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MvpMaterial entity.
// If the MvpMaterial object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpMaterialMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MvpMaterialMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the MvpMaterialMutation builder.
func (m *MvpMaterialMutation) Where(ps ...predicate.MvpMaterial) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MvpMaterialMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MvpMaterialMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MvpMaterial, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MvpMaterialMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MvpMaterialMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MvpMaterial).
func (m *MvpMaterialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MvpMaterialMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, mvpmaterial.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MvpMaterialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mvpmaterial.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MvpMaterialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mvpmaterial.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown MvpMaterial field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MvpMaterialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mvpmaterial.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown MvpMaterial field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MvpMaterialMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MvpMaterialMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MvpMaterialMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MvpMaterial numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MvpMaterialMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MvpMaterialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MvpMaterialMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MvpMaterial nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MvpMaterialMutation) ResetField(name string) error {
	switch name {
	case mvpmaterial.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown MvpMaterial field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MvpMaterialMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MvpMaterialMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MvpMaterialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MvpMaterialMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MvpMaterialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MvpMaterialMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MvpMaterialMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MvpMaterial unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MvpMaterialMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MvpMaterial edge %s", name)
}

// MvpPlannedRouteMutation represents an operation that mutates the MvpPlannedRoute nodes in the graph.
type MvpPlannedRouteMutation struct {
	config
	op               Op
	typ              string
	id               *int
	date             *time.Time
	route_name       *string
	status           *string
	clearedFields    map[string]struct{}
	trucks           map[int]struct{}
	removedtrucks    map[int]struct{}
	clearedtrucks    bool
	_driver          *int
	cleared_driver   bool
	loaders          map[int]struct{}
	removedloaders   map[int]struct{}
	clearedloaders   bool
	materials        map[int]struct{}
	removedmaterials map[int]struct{}
	clearedmaterials bool
	done             bool
	oldValue         func(context.Context) (*MvpPlannedRoute, error)
	predicates       []predicate.MvpPlannedRoute
}

var _ ent.Mutation = (*MvpPlannedRouteMutation)(nil)

// mvpplannedrouteOption allows management of the mutation configuration using functional options.
type mvpplannedrouteOption func(*MvpPlannedRouteMutation)

// newMvpPlannedRouteMutation creates new mutation for the MvpPlannedRoute entity.
func newMvpPlannedRouteMutation(c config, op Op, opts ...mvpplannedrouteOption) *MvpPlannedRouteMutation {
	m := &MvpPlannedRouteMutation{
		config:        c,
		op:            op,
		typ:           TypeMvpPlannedRoute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMvpPlannedRouteID sets the ID field of the mutation.
func withMvpPlannedRouteID(id int) mvpplannedrouteOption {
	return func(m *MvpPlannedRouteMutation) {
		var (
			err   error
			once  sync.Once
			value *MvpPlannedRoute
		)
		m.oldValue = func(ctx context.Context) (*MvpPlannedRoute, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MvpPlannedRoute.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMvpPlannedRoute sets the old MvpPlannedRoute of the mutation.
func withMvpPlannedRoute(node *MvpPlannedRoute) mvpplannedrouteOption {
	return func(m *MvpPlannedRouteMutation) {
		m.oldValue = func(context.Context) (*MvpPlannedRoute, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MvpPlannedRouteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MvpPlannedRouteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MvpPlannedRouteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MvpPlannedRouteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MvpPlannedRoute.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDate sets the "date" field.
func (m *MvpPlannedRouteMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *MvpPlannedRouteMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the MvpPlannedRoute entity.
// If the MvpPlannedRoute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpPlannedRouteMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *MvpPlannedRouteMutation) ResetDate() {
	m.date = nil
}

// SetRouteName sets the "route_name" field.
func (m *MvpPlannedRouteMutation) SetRouteName(s string) {
	m.route_name = &s
}

// RouteName returns the value of the "route_name" field in the mutation.
func (m *MvpPlannedRouteMutation) RouteName() (r string, exists bool) {
	v := m.route_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRouteName returns the old "route_name" field's value of the MvpPlannedRoute entity.
// If the MvpPlannedRoute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpPlannedRouteMutation) OldRouteName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRouteName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRouteName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRouteName: %w", err)
	}
	return oldValue.RouteName, nil
}

// ResetRouteName resets all changes to the "route_name" field.
func (m *MvpPlannedRouteMutation) ResetRouteName() {
	m.route_name = nil
}

// SetStatus sets the "status" field.
func (m *MvpPlannedRouteMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *MvpPlannedRouteMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the MvpPlannedRoute entity.
// If the MvpPlannedRoute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpPlannedRouteMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *MvpPlannedRouteMutation) ResetStatus() {
	m.status = nil
}

// AddTruckIDs adds the "trucks" edge to the MvpTruck entity by ids.
func (m *MvpPlannedRouteMutation) AddTruckIDs(ids ...int) {
	if m.trucks == nil {
		m.trucks = make(map[int]struct{})
	}
	for i := range ids {
		m.trucks[ids[i]] = struct{}{}
	}
}

// ClearTrucks clears the "trucks" edge to the MvpTruck entity.
func (m *MvpPlannedRouteMutation) ClearTrucks() {
	m.clearedtrucks = true
}

// TrucksCleared reports if the "trucks" edge to the MvpTruck entity was cleared.
func (m *MvpPlannedRouteMutation) TrucksCleared() bool {
	return m.clearedtrucks
}

// RemoveTruckIDs removes the "trucks" edge to the MvpTruck entity by IDs.
func (m *MvpPlannedRouteMutation) RemoveTruckIDs(ids ...int) {
	if m.removedtrucks == nil {
		m.removedtrucks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.trucks, ids[i])
		m.removedtrucks[ids[i]] = struct{}{}
	}
}

// RemovedTrucks returns the removed IDs of the "trucks" edge to the MvpTruck entity.
func (m *MvpPlannedRouteMutation) RemovedTrucksIDs() (ids []int) {
	for id := range m.removedtrucks {
		ids = append(ids, id)
	}
	return
}

// TrucksIDs returns the "trucks" edge IDs in the mutation.
func (m *MvpPlannedRouteMutation) TrucksIDs() (ids []int) {
	for id := range m.trucks {
		ids = append(ids, id)
	}
	return
}

// ResetTrucks resets all changes to the "trucks" edge.
func (m *MvpPlannedRouteMutation) ResetTrucks() {
	m.trucks = nil
	m.clearedtrucks = false
	m.removedtrucks = nil
}

// SetDriverID sets the "driver" edge to the MvpStaff entity by id.
func (m *MvpPlannedRouteMutation) SetDriverID(id int) {
	m._driver = &id
}

// ClearDriver clears the "driver" edge to the MvpStaff entity.
func (m *MvpPlannedRouteMutation) ClearDriver() {
	m.cleared_driver = true
}

// DriverCleared reports if the "driver" edge to the MvpStaff entity was cleared.
func (m *MvpPlannedRouteMutation) DriverCleared() bool {
	return m.cleared_driver
}

// DriverID returns the "driver" edge ID in the mutation.
func (m *MvpPlannedRouteMutation) DriverID() (id int, exists bool) {
	if m._driver != nil {
		return *m._driver, true
	}
	return
}

// DriverIDs returns the "driver" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DriverID instead. It exists only for internal usage by the builders.
func (m *MvpPlannedRouteMutation) DriverIDs() (ids []int) {
	if id := m._driver; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDriver resets all changes to the "driver" edge.
func (m *MvpPlannedRouteMutation) ResetDriver() {
	m._driver = nil
	m.cleared_driver = false
}

// AddLoaderIDs adds the "loaders" edge to the MvpStaff entity by ids.
func (m *MvpPlannedRouteMutation) AddLoaderIDs(ids ...int) {
	if m.loaders == nil {
		m.loaders = make(map[int]struct{})
	}
	for i := range ids {
		m.loaders[ids[i]] = struct{}{}
	}
}

// ClearLoaders clears the "loaders" edge to the MvpStaff entity.
func (m *MvpPlannedRouteMutation) ClearLoaders() {
	m.clearedloaders = true
}

// LoadersCleared reports if the "loaders" edge to the MvpStaff entity was cleared.
func (m *MvpPlannedRouteMutation) LoadersCleared() bool {
	return m.clearedloaders
}

// RemoveLoaderIDs removes the "loaders" edge to the MvpStaff entity by IDs.
func (m *MvpPlannedRouteMutation) RemoveLoaderIDs(ids ...int) {
	if m.removedloaders == nil {
		m.removedloaders = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.loaders, ids[i])
		m.removedloaders[ids[i]] = struct{}{}
	}
}

// RemovedLoaders returns the removed IDs of the "loaders" edge to the MvpStaff entity.
func (m *MvpPlannedRouteMutation) RemovedLoadersIDs() (ids []int) {
	for id := range m.removedloaders {
		ids = append(ids, id)
	}
	return
}

// LoadersIDs returns the "loaders" edge IDs in the mutation.
func (m *MvpPlannedRouteMutation) LoadersIDs() (ids []int) {
	for id := range m.loaders {
		ids = append(ids, id)
	}
	return
}

// ResetLoaders resets all changes to the "loaders" edge.
func (m *MvpPlannedRouteMutation) ResetLoaders() {
	m.loaders = nil
	m.clearedloaders = false
	m.removedloaders = nil
}

// AddMaterialIDs adds the "materials" edge to the MvpMaterial entity by ids.
func (m *MvpPlannedRouteMutation) AddMaterialIDs(ids ...int) {
	if m.materials == nil {
		m.materials = make(map[int]struct{})
	}
	for i := range ids {
		m.materials[ids[i]] = struct{}{}
	}
}

// ClearMaterials clears the "materials" edge to the MvpMaterial entity.
func (m *MvpPlannedRouteMutation) ClearMaterials() {
	m.clearedmaterials = true
}

// MaterialsCleared reports if the "materials" edge to the MvpMaterial entity was cleared.
func (m *MvpPlannedRouteMutation) MaterialsCleared() bool {
	return m.clearedmaterials
}

// RemoveMaterialIDs removes the "materials" edge to the MvpMaterial entity by IDs.
func (m *MvpPlannedRouteMutation) RemoveMaterialIDs(ids ...int) {
	if m.removedmaterials == nil {
		m.removedmaterials = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.materials, ids[i])
		m.removedmaterials[ids[i]] = struct{}{}
	}
}

// RemovedMaterials returns the removed IDs of the "materials" edge to the MvpMaterial entity.
func (m *MvpPlannedRouteMutation) RemovedMaterialsIDs() (ids []int) {
	for id := range m.removedmaterials {
		ids = append(ids, id)
	}
	return
}

// MaterialsIDs returns the "materials" edge IDs in the mutation.
func (m *MvpPlannedRouteMutation) MaterialsIDs() (ids []int) {
	for id := range m.materials {
		ids = append(ids, id)
	}
	return
}

// ResetMaterials resets all changes to the "materials" edge.
func (m *MvpPlannedRouteMutation) ResetMaterials() {
	m.materials = nil
	m.clearedmaterials = false
	m.removedmaterials = nil
}

// Where appends a list predicates to the MvpPlannedRouteMutation builder.
func (m *MvpPlannedRouteMutation) Where(ps ...predicate.MvpPlannedRoute) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MvpPlannedRouteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MvpPlannedRouteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MvpPlannedRoute, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MvpPlannedRouteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MvpPlannedRouteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MvpPlannedRoute).
func (m *MvpPlannedRouteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MvpPlannedRouteMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.date != nil {
		fields = append(fields, mvpplannedroute.FieldDate)
	}
	if m.route_name != nil {
		fields = append(fields, mvpplannedroute.FieldRouteName)
	}
	if m.status != nil {
		fields = append(fields, mvpplannedroute.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MvpPlannedRouteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mvpplannedroute.FieldDate:
		return m.Date()
	case mvpplannedroute.FieldRouteName:
		return m.RouteName()
	case mvpplannedroute.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MvpPlannedRouteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mvpplannedroute.FieldDate:
		return m.OldDate(ctx)
	case mvpplannedroute.FieldRouteName:
		return m.OldRouteName(ctx)
	case mvpplannedroute.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown MvpPlannedRoute field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MvpPlannedRouteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mvpplannedroute.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case mvpplannedroute.FieldRouteName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRouteName(v)
		return nil
	case mvpplannedroute.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown MvpPlannedRoute field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MvpPlannedRouteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MvpPlannedRouteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MvpPlannedRouteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MvpPlannedRoute numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MvpPlannedRouteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MvpPlannedRouteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MvpPlannedRouteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MvpPlannedRoute nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MvpPlannedRouteMutation) ResetField(name string) error {
	switch name {
	case mvpplannedroute.FieldDate:
		m.ResetDate()
		return nil
	case mvpplannedroute.FieldRouteName:
		m.ResetRouteName()
		return nil
	case mvpplannedroute.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown MvpPlannedRoute field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MvpPlannedRouteMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.trucks != nil {
		edges = append(edges, mvpplannedroute.EdgeTrucks)
	}
	if m._driver != nil {
		edges = append(edges, mvpplannedroute.EdgeDriver)
	}
	if m.loaders != nil {
		edges = append(edges, mvpplannedroute.EdgeLoaders)
	}
	if m.materials != nil {
		edges = append(edges, mvpplannedroute.EdgeMaterials)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MvpPlannedRouteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mvpplannedroute.EdgeTrucks:
		ids := make([]ent.Value, 0, len(m.trucks))
		for id := range m.trucks {
			ids = append(ids, id)
		}
		return ids
	case mvpplannedroute.EdgeDriver:
		if id := m._driver; id != nil {
			return []ent.Value{*id}
		}
	case mvpplannedroute.EdgeLoaders:
		ids := make([]ent.Value, 0, len(m.loaders))
		for id := range m.loaders {
			ids = append(ids, id)
		}
		return ids
	case mvpplannedroute.EdgeMaterials:
		ids := make([]ent.Value, 0, len(m.materials))
		for id := range m.materials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MvpPlannedRouteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedtrucks != nil {
		edges = append(edges, mvpplannedroute.EdgeTrucks)
	}
	if m.removedloaders != nil {
		edges = append(edges, mvpplannedroute.EdgeLoaders)
	}
	if m.removedmaterials != nil {
		edges = append(edges, mvpplannedroute.EdgeMaterials)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MvpPlannedRouteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mvpplannedroute.EdgeTrucks:
		ids := make([]ent.Value, 0, len(m.removedtrucks))
		for id := range m.removedtrucks {
			ids = append(ids, id)
		}
		return ids
	case mvpplannedroute.EdgeLoaders:
		ids := make([]ent.Value, 0, len(m.removedloaders))
		for id := range m.removedloaders {
			ids = append(ids, id)
		}
		return ids
	case mvpplannedroute.EdgeMaterials:
		ids := make([]ent.Value, 0, len(m.removedmaterials))
		for id := range m.removedmaterials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MvpPlannedRouteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedtrucks {
		edges = append(edges, mvpplannedroute.EdgeTrucks)
	}
	if m.cleared_driver {
		edges = append(edges, mvpplannedroute.EdgeDriver)
	}
	if m.clearedloaders {
		edges = append(edges, mvpplannedroute.EdgeLoaders)
	}
	if m.clearedmaterials {
		edges = append(edges, mvpplannedroute.EdgeMaterials)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MvpPlannedRouteMutation) EdgeCleared(name string) bool {
	switch name {
	case mvpplannedroute.EdgeTrucks:
		return m.clearedtrucks
	case mvpplannedroute.EdgeDriver:
		return m.cleared_driver
	case mvpplannedroute.EdgeLoaders:
		return m.clearedloaders
	case mvpplannedroute.EdgeMaterials:
		return m.clearedmaterials
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MvpPlannedRouteMutation) ClearEdge(name string) error {
	switch name {
	case mvpplannedroute.EdgeDriver:
		m.ClearDriver()
		return nil
	}
	return fmt.Errorf("unknown MvpPlannedRoute unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MvpPlannedRouteMutation) ResetEdge(name string) error {
	switch name {
	case mvpplannedroute.EdgeTrucks:
		m.ResetTrucks()
		return nil
	case mvpplannedroute.EdgeDriver:
		m.ResetDriver()
		return nil
	case mvpplannedroute.EdgeLoaders:
		m.ResetLoaders()
		return nil
	case mvpplannedroute.EdgeMaterials:
		m.ResetMaterials()
		return nil
	}
	return fmt.Errorf("unknown MvpPlannedRoute edge %s", name)
}

// MvpRouteMutation represents an operation that mutates the MvpRoute nodes in the graph.
type MvpRouteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	day_of_week   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MvpRoute, error)
	predicates    []predicate.MvpRoute
}

var _ ent.Mutation = (*MvpRouteMutation)(nil)

// mvprouteOption allows management of the mutation configuration using functional options.
type mvprouteOption func(*MvpRouteMutation)

// newMvpRouteMutation creates new mutation for the MvpRoute entity.
func newMvpRouteMutation(c config, op Op, opts ...mvprouteOption) *MvpRouteMutation {
	m := &MvpRouteMutation{
		config:        c,
		op:            op,
		typ:           TypeMvpRoute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMvpRouteID sets the ID field of the mutation.
func withMvpRouteID(id int) mvprouteOption {
	return func(m *MvpRouteMutation) {
		var (
			err   error
			once  sync.Once
			value *MvpRoute
		)
		m.oldValue = func(ctx context.Context) (*MvpRoute, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MvpRoute.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMvpRoute sets the old MvpRoute of the mutation.
func withMvpRoute(node *MvpRoute) mvprouteOption {
	return func(m *MvpRouteMutation) {
		m.oldValue = func(context.Context) (*MvpRoute, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MvpRouteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MvpRouteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MvpRouteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MvpRouteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MvpRoute.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MvpRouteMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MvpRouteMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MvpRoute entity.
// If the MvpRoute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpRouteMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MvpRouteMutation) ResetName() {
	m.name = nil
}

// SetDayOfWeek sets the "day_of_week" field.
func (m *MvpRouteMutation) SetDayOfWeek(s string) {
	m.day_of_week = &s
}

// DayOfWeek returns the value of the "day_of_week" field in the mutation.
func (m *MvpRouteMutation) DayOfWeek() (r string, exists bool) {
	v := m.day_of_week
	if v == nil {
		return
	}
	return *v, true
}

// OldDayOfWeek returns the old "day_of_week" field's value of the MvpRoute entity.
// If the MvpRoute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpRouteMutation) OldDayOfWeek(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDayOfWeek is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDayOfWeek requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDayOfWeek: %w", err)
	}
	return oldValue.DayOfWeek, nil
}

// ResetDayOfWeek resets all changes to the "day_of_week" field.
func (m *MvpRouteMutation) ResetDayOfWeek() {
	m.day_of_week = nil
}

// Where appends a list predicates to the MvpRouteMutation builder.
func (m *MvpRouteMutation) Where(ps ...predicate.MvpRoute) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MvpRouteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MvpRouteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MvpRoute, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MvpRouteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MvpRouteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MvpRoute).
func (m *MvpRouteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MvpRouteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, mvproute.FieldName)
	}
	if m.day_of_week != nil {
		fields = append(fields, mvproute.FieldDayOfWeek)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MvpRouteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mvproute.FieldName:
		return m.Name()
	case mvproute.FieldDayOfWeek:
		return m.DayOfWeek()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MvpRouteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mvproute.FieldName:
		return m.OldName(ctx)
	case mvproute.FieldDayOfWeek:
		return m.OldDayOfWeek(ctx)
	}
	return nil, fmt.Errorf("unknown MvpRoute field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MvpRouteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mvproute.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case mvproute.FieldDayOfWeek:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDayOfWeek(v)
		return nil
	}
	return fmt.Errorf("unknown MvpRoute field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MvpRouteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MvpRouteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MvpRouteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MvpRoute numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MvpRouteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MvpRouteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MvpRouteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MvpRoute nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MvpRouteMutation) ResetField(name string) error {
	switch name {
	case mvproute.FieldName:
		m.ResetName()
		return nil
	case mvproute.FieldDayOfWeek:
		m.ResetDayOfWeek()
		return nil
	}
	return fmt.Errorf("unknown MvpRoute field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MvpRouteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MvpRouteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MvpRouteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MvpRouteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MvpRouteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MvpRouteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MvpRouteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MvpRoute unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MvpRouteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MvpRoute edge %s", name)
}

// MvpStaffMutation represents an operation that mutates the MvpStaff nodes in the graph.
type MvpStaffMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	role          *string
	email         *string
	phone         *string
	last_name     *string
	birthday      *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MvpStaff, error)
	predicates    []predicate.MvpStaff
}

var _ ent.Mutation = (*MvpStaffMutation)(nil)

// mvpstaffOption allows management of the mutation configuration using functional options.
type mvpstaffOption func(*MvpStaffMutation)

// newMvpStaffMutation creates new mutation for the MvpStaff entity.
func newMvpStaffMutation(c config, op Op, opts ...mvpstaffOption) *MvpStaffMutation {
	m := &MvpStaffMutation{
		config:        c,
		op:            op,
		typ:           TypeMvpStaff,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMvpStaffID sets the ID field of the mutation.
func withMvpStaffID(id int) mvpstaffOption {
	return func(m *MvpStaffMutation) {
		var (
			err   error
			once  sync.Once
			value *MvpStaff
		)
		m.oldValue = func(ctx context.Context) (*MvpStaff, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MvpStaff.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMvpStaff sets the old MvpStaff of the mutation.
func withMvpStaff(node *MvpStaff) mvpstaffOption {
	return func(m *MvpStaffMutation) {
		m.oldValue = func(context.Context) (*MvpStaff, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MvpStaffMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MvpStaffMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MvpStaffMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MvpStaffMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MvpStaff.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MvpStaffMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MvpStaffMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MvpStaff entity.
// If the MvpStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpStaffMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MvpStaffMutation) ResetName() {
	m.name = nil
}

// SetRole sets the "role" field.
func (m *MvpStaffMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *MvpStaffMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the MvpStaff entity.
// If the MvpStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpStaffMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *MvpStaffMutation) ResetRole() {
	m.role = nil
}

// SetEmail sets the "email" field.
func (m *MvpStaffMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *MvpStaffMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the MvpStaff entity.
// If the MvpStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpStaffMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *MvpStaffMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[mvpstaff.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *MvpStaffMutation) EmailCleared() bool {
	_, ok := m.clearedFields[mvpstaff.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *MvpStaffMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, mvpstaff.FieldEmail)
}

// SetPhone sets the "phone" field.
func (m *MvpStaffMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *MvpStaffMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the MvpStaff entity.
// If the MvpStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpStaffMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *MvpStaffMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[mvpstaff.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *MvpStaffMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[mvpstaff.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *MvpStaffMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, mvpstaff.FieldPhone)
}

// SetLastName sets the "last_name" field.
func (m *MvpStaffMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *MvpStaffMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the MvpStaff entity.
// If the MvpStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpStaffMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *MvpStaffMutation) ResetLastName() {
	m.last_name = nil
}

// SetBirthday sets the "birthday" field.
func (m *MvpStaffMutation) SetBirthday(t time.Time) {
	m.birthday = &t
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *MvpStaffMutation) Birthday() (r time.Time, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the MvpStaff entity.
// If the MvpStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpStaffMutation) OldBirthday(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ClearBirthday clears the value of the "birthday" field.
func (m *MvpStaffMutation) ClearBirthday() {
	m.birthday = nil
	m.clearedFields[mvpstaff.FieldBirthday] = struct{}{}
}

// BirthdayCleared returns if the "birthday" field was cleared in this mutation.
func (m *MvpStaffMutation) BirthdayCleared() bool {
	_, ok := m.clearedFields[mvpstaff.FieldBirthday]
	return ok
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *MvpStaffMutation) ResetBirthday() {
	m.birthday = nil
	delete(m.clearedFields, mvpstaff.FieldBirthday)
}

// Where appends a list predicates to the MvpStaffMutation builder.
func (m *MvpStaffMutation) Where(ps ...predicate.MvpStaff) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MvpStaffMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MvpStaffMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MvpStaff, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MvpStaffMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MvpStaffMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MvpStaff).
func (m *MvpStaffMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MvpStaffMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, mvpstaff.FieldName)
	}
	if m.role != nil {
		fields = append(fields, mvpstaff.FieldRole)
	}
	if m.email != nil {
		fields = append(fields, mvpstaff.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, mvpstaff.FieldPhone)
	}
	if m.last_name != nil {
		fields = append(fields, mvpstaff.FieldLastName)
	}
	if m.birthday != nil {
		fields = append(fields, mvpstaff.FieldBirthday)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MvpStaffMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mvpstaff.FieldName:
		return m.Name()
	case mvpstaff.FieldRole:
		return m.Role()
	case mvpstaff.FieldEmail:
		return m.Email()
	case mvpstaff.FieldPhone:
		return m.Phone()
	case mvpstaff.FieldLastName:
		return m.LastName()
	case mvpstaff.FieldBirthday:
		return m.Birthday()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MvpStaffMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mvpstaff.FieldName:
		return m.OldName(ctx)
	case mvpstaff.FieldRole:
		return m.OldRole(ctx)
	case mvpstaff.FieldEmail:
		return m.OldEmail(ctx)
	case mvpstaff.FieldPhone:
		return m.OldPhone(ctx)
	case mvpstaff.FieldLastName:
		return m.OldLastName(ctx)
	case mvpstaff.FieldBirthday:
		return m.OldBirthday(ctx)
	}
	return nil, fmt.Errorf("unknown MvpStaff field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MvpStaffMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mvpstaff.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case mvpstaff.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case mvpstaff.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case mvpstaff.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case mvpstaff.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case mvpstaff.FieldBirthday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	}
	return fmt.Errorf("unknown MvpStaff field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MvpStaffMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MvpStaffMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MvpStaffMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MvpStaff numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MvpStaffMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mvpstaff.FieldEmail) {
		fields = append(fields, mvpstaff.FieldEmail)
	}
	if m.FieldCleared(mvpstaff.FieldPhone) {
		fields = append(fields, mvpstaff.FieldPhone)
	}
	if m.FieldCleared(mvpstaff.FieldBirthday) {
		fields = append(fields, mvpstaff.FieldBirthday)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MvpStaffMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MvpStaffMutation) ClearField(name string) error {
	switch name {
	case mvpstaff.FieldEmail:
		m.ClearEmail()
		return nil
	case mvpstaff.FieldPhone:
		m.ClearPhone()
		return nil
	case mvpstaff.FieldBirthday:
		m.ClearBirthday()
		return nil
	}
	return fmt.Errorf("unknown MvpStaff nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MvpStaffMutation) ResetField(name string) error {
	switch name {
	case mvpstaff.FieldName:
		m.ResetName()
		return nil
	case mvpstaff.FieldRole:
		m.ResetRole()
		return nil
	case mvpstaff.FieldEmail:
		m.ResetEmail()
		return nil
	case mvpstaff.FieldPhone:
		m.ResetPhone()
		return nil
	case mvpstaff.FieldLastName:
		m.ResetLastName()
		return nil
	case mvpstaff.FieldBirthday:
		m.ResetBirthday()
		return nil
	}
	return fmt.Errorf("unknown MvpStaff field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MvpStaffMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MvpStaffMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MvpStaffMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MvpStaffMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MvpStaffMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MvpStaffMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MvpStaffMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MvpStaff unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MvpStaffMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MvpStaff edge %s", name)
}

// MvpTruckMutation represents an operation that mutates the MvpTruck nodes in the graph.
type MvpTruckMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MvpTruck, error)
	predicates    []predicate.MvpTruck
}

var _ ent.Mutation = (*MvpTruckMutation)(nil)

// mvptruckOption allows management of the mutation configuration using functional options.
type mvptruckOption func(*MvpTruckMutation)

// newMvpTruckMutation creates new mutation for the MvpTruck entity.
func newMvpTruckMutation(c config, op Op, opts ...mvptruckOption) *MvpTruckMutation {
	m := &MvpTruckMutation{
		config:        c,
		op:            op,
		typ:           TypeMvpTruck,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMvpTruckID sets the ID field of the mutation.
func withMvpTruckID(id int) mvptruckOption {
	return func(m *MvpTruckMutation) {
		var (
			err   error
			once  sync.Once
			value *MvpTruck
		)
		m.oldValue = func(ctx context.Context) (*MvpTruck, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MvpTruck.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMvpTruck sets the old MvpTruck of the mutation.
func withMvpTruck(node *MvpTruck) mvptruckOption {
	return func(m *MvpTruckMutation) {
		m.oldValue = func(context.Context) (*MvpTruck, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MvpTruckMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MvpTruckMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MvpTruckMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MvpTruckMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MvpTruck.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MvpTruckMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MvpTruckMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MvpTruck entity.
// If the MvpTruck object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MvpTruckMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MvpTruckMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the MvpTruckMutation builder.
func (m *MvpTruckMutation) Where(ps ...predicate.MvpTruck) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MvpTruckMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MvpTruckMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MvpTruck, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MvpTruckMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MvpTruckMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MvpTruck).
func (m *MvpTruckMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MvpTruckMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, mvptruck.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MvpTruckMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mvptruck.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MvpTruckMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mvptruck.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown MvpTruck field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MvpTruckMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mvptruck.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown MvpTruck field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MvpTruckMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MvpTruckMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MvpTruckMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MvpTruck numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MvpTruckMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MvpTruckMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MvpTruckMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MvpTruck nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MvpTruckMutation) ResetField(name string) error {
	switch name {
	case mvptruck.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown MvpTruck field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MvpTruckMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MvpTruckMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MvpTruckMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MvpTruckMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MvpTruckMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MvpTruckMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MvpTruckMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MvpTruck unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MvpTruckMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MvpTruck edge %s", name)
}

// PasswordTokenMutation represents an operation that mutates the PasswordToken nodes in the graph.
type PasswordTokenMutation struct {
	config
	op            Op
	typ           string
	id            *int
	hash          *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*PasswordToken, error)
	predicates    []predicate.PasswordToken
}

var _ ent.Mutation = (*PasswordTokenMutation)(nil)

// passwordtokenOption allows management of the mutation configuration using functional options.
type passwordtokenOption func(*PasswordTokenMutation)

// newPasswordTokenMutation creates new mutation for the PasswordToken entity.
func newPasswordTokenMutation(c config, op Op, opts ...passwordtokenOption) *PasswordTokenMutation {
	m := &PasswordTokenMutation{
		config:        c,
		op:            op,
		typ:           TypePasswordToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPasswordTokenID sets the ID field of the mutation.
func withPasswordTokenID(id int) passwordtokenOption {
	return func(m *PasswordTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *PasswordToken
		)
		m.oldValue = func(ctx context.Context) (*PasswordToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PasswordToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPasswordToken sets the old PasswordToken of the mutation.
func withPasswordToken(node *PasswordToken) passwordtokenOption {
	return func(m *PasswordTokenMutation) {
		m.oldValue = func(context.Context) (*PasswordToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PasswordTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PasswordTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PasswordTokenMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PasswordTokenMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PasswordToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHash sets the "hash" field.
func (m *PasswordTokenMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *PasswordTokenMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the PasswordToken entity.
// If the PasswordToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordTokenMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *PasswordTokenMutation) ResetHash() {
	m.hash = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PasswordTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PasswordTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PasswordToken entity.
// If the PasswordToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PasswordTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *PasswordTokenMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *PasswordTokenMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PasswordTokenMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *PasswordTokenMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PasswordTokenMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PasswordTokenMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the PasswordTokenMutation builder.
func (m *PasswordTokenMutation) Where(ps ...predicate.PasswordToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PasswordTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PasswordTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PasswordToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PasswordTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PasswordTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PasswordToken).
func (m *PasswordTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PasswordTokenMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.hash != nil {
		fields = append(fields, passwordtoken.FieldHash)
	}
	if m.created_at != nil {
		fields = append(fields, passwordtoken.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PasswordTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case passwordtoken.FieldHash:
		return m.Hash()
	case passwordtoken.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PasswordTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case passwordtoken.FieldHash:
		return m.OldHash(ctx)
	case passwordtoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PasswordToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PasswordTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case passwordtoken.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case passwordtoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PasswordToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PasswordTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PasswordTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PasswordTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PasswordToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PasswordTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PasswordTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PasswordTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PasswordToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PasswordTokenMutation) ResetField(name string) error {
	switch name {
	case passwordtoken.FieldHash:
		m.ResetHash()
		return nil
	case passwordtoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown PasswordToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PasswordTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, passwordtoken.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PasswordTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case passwordtoken.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PasswordTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PasswordTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PasswordTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, passwordtoken.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PasswordTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case passwordtoken.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PasswordTokenMutation) ClearEdge(name string) error {
	switch name {
	case passwordtoken.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown PasswordToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PasswordTokenMutation) ResetEdge(name string) error {
	switch name {
	case passwordtoken.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown PasswordToken edge %s", name)
}

// RMLUserMutation represents an operation that mutates the RMLUser nodes in the graph.
type RMLUserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	email           *string
	password        *string
	role            *string
	review_count    *int
	addreview_count *int
	clearedFields   map[string]struct{}
	reviews         map[int]struct{}
	removedreviews  map[int]struct{}
	clearedreviews  bool
	done            bool
	oldValue        func(context.Context) (*RMLUser, error)
	predicates      []predicate.RMLUser
}

var _ ent.Mutation = (*RMLUserMutation)(nil)

// rmluserOption allows management of the mutation configuration using functional options.
type rmluserOption func(*RMLUserMutation)

// newRMLUserMutation creates new mutation for the RMLUser entity.
func newRMLUserMutation(c config, op Op, opts ...rmluserOption) *RMLUserMutation {
	m := &RMLUserMutation{
		config:        c,
		op:            op,
		typ:           TypeRMLUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRMLUserID sets the ID field of the mutation.
func withRMLUserID(id int) rmluserOption {
	return func(m *RMLUserMutation) {
		var (
			err   error
			once  sync.Once
			value *RMLUser
		)
		m.oldValue = func(ctx context.Context) (*RMLUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RMLUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRMLUser sets the old RMLUser of the mutation.
func withRMLUser(node *RMLUser) rmluserOption {
	return func(m *RMLUserMutation) {
		m.oldValue = func(context.Context) (*RMLUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RMLUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RMLUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RMLUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RMLUserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RMLUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RMLUserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RMLUserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the RMLUser entity.
// If the RMLUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RMLUserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RMLUserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *RMLUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *RMLUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the RMLUser entity.
// If the RMLUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RMLUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *RMLUserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *RMLUserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *RMLUserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the RMLUser entity.
// If the RMLUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RMLUserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *RMLUserMutation) ResetPassword() {
	m.password = nil
}

// SetRole sets the "role" field.
func (m *RMLUserMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *RMLUserMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the RMLUser entity.
// If the RMLUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RMLUserMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *RMLUserMutation) ResetRole() {
	m.role = nil
}

// SetReviewCount sets the "review_count" field.
func (m *RMLUserMutation) SetReviewCount(i int) {
	m.review_count = &i
	m.addreview_count = nil
}

// ReviewCount returns the value of the "review_count" field in the mutation.
func (m *RMLUserMutation) ReviewCount() (r int, exists bool) {
	v := m.review_count
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewCount returns the old "review_count" field's value of the RMLUser entity.
// If the RMLUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RMLUserMutation) OldReviewCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewCount: %w", err)
	}
	return oldValue.ReviewCount, nil
}

// AddReviewCount adds i to the "review_count" field.
func (m *RMLUserMutation) AddReviewCount(i int) {
	if m.addreview_count != nil {
		*m.addreview_count += i
	} else {
		m.addreview_count = &i
	}
}

// AddedReviewCount returns the value that was added to the "review_count" field in this mutation.
func (m *RMLUserMutation) AddedReviewCount() (r int, exists bool) {
	v := m.addreview_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetReviewCount resets all changes to the "review_count" field.
func (m *RMLUserMutation) ResetReviewCount() {
	m.review_count = nil
	m.addreview_count = nil
}

// AddReviewIDs adds the "reviews" edge to the Review entity by ids.
func (m *RMLUserMutation) AddReviewIDs(ids ...int) {
	if m.reviews == nil {
		m.reviews = make(map[int]struct{})
	}
	for i := range ids {
		m.reviews[ids[i]] = struct{}{}
	}
}

// ClearReviews clears the "reviews" edge to the Review entity.
func (m *RMLUserMutation) ClearReviews() {
	m.clearedreviews = true
}

// ReviewsCleared reports if the "reviews" edge to the Review entity was cleared.
func (m *RMLUserMutation) ReviewsCleared() bool {
	return m.clearedreviews
}

// RemoveReviewIDs removes the "reviews" edge to the Review entity by IDs.
func (m *RMLUserMutation) RemoveReviewIDs(ids ...int) {
	if m.removedreviews == nil {
		m.removedreviews = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reviews, ids[i])
		m.removedreviews[ids[i]] = struct{}{}
	}
}

// RemovedReviews returns the removed IDs of the "reviews" edge to the Review entity.
func (m *RMLUserMutation) RemovedReviewsIDs() (ids []int) {
	for id := range m.removedreviews {
		ids = append(ids, id)
	}
	return
}

// ReviewsIDs returns the "reviews" edge IDs in the mutation.
func (m *RMLUserMutation) ReviewsIDs() (ids []int) {
	for id := range m.reviews {
		ids = append(ids, id)
	}
	return
}

// ResetReviews resets all changes to the "reviews" edge.
func (m *RMLUserMutation) ResetReviews() {
	m.reviews = nil
	m.clearedreviews = false
	m.removedreviews = nil
}

// Where appends a list predicates to the RMLUserMutation builder.
func (m *RMLUserMutation) Where(ps ...predicate.RMLUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RMLUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RMLUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RMLUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RMLUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RMLUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RMLUser).
func (m *RMLUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RMLUserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, rmluser.FieldName)
	}
	if m.email != nil {
		fields = append(fields, rmluser.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, rmluser.FieldPassword)
	}
	if m.role != nil {
		fields = append(fields, rmluser.FieldRole)
	}
	if m.review_count != nil {
		fields = append(fields, rmluser.FieldReviewCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RMLUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rmluser.FieldName:
		return m.Name()
	case rmluser.FieldEmail:
		return m.Email()
	case rmluser.FieldPassword:
		return m.Password()
	case rmluser.FieldRole:
		return m.Role()
	case rmluser.FieldReviewCount:
		return m.ReviewCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RMLUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rmluser.FieldName:
		return m.OldName(ctx)
	case rmluser.FieldEmail:
		return m.OldEmail(ctx)
	case rmluser.FieldPassword:
		return m.OldPassword(ctx)
	case rmluser.FieldRole:
		return m.OldRole(ctx)
	case rmluser.FieldReviewCount:
		return m.OldReviewCount(ctx)
	}
	return nil, fmt.Errorf("unknown RMLUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RMLUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rmluser.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rmluser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case rmluser.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case rmluser.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case rmluser.FieldReviewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewCount(v)
		return nil
	}
	return fmt.Errorf("unknown RMLUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RMLUserMutation) AddedFields() []string {
	var fields []string
	if m.addreview_count != nil {
		fields = append(fields, rmluser.FieldReviewCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RMLUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rmluser.FieldReviewCount:
		return m.AddedReviewCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RMLUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rmluser.FieldReviewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReviewCount(v)
		return nil
	}
	return fmt.Errorf("unknown RMLUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RMLUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RMLUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RMLUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RMLUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RMLUserMutation) ResetField(name string) error {
	switch name {
	case rmluser.FieldName:
		m.ResetName()
		return nil
	case rmluser.FieldEmail:
		m.ResetEmail()
		return nil
	case rmluser.FieldPassword:
		m.ResetPassword()
		return nil
	case rmluser.FieldRole:
		m.ResetRole()
		return nil
	case rmluser.FieldReviewCount:
		m.ResetReviewCount()
		return nil
	}
	return fmt.Errorf("unknown RMLUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RMLUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.reviews != nil {
		edges = append(edges, rmluser.EdgeReviews)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RMLUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rmluser.EdgeReviews:
		ids := make([]ent.Value, 0, len(m.reviews))
		for id := range m.reviews {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RMLUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedreviews != nil {
		edges = append(edges, rmluser.EdgeReviews)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RMLUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rmluser.EdgeReviews:
		ids := make([]ent.Value, 0, len(m.removedreviews))
		for id := range m.removedreviews {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RMLUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedreviews {
		edges = append(edges, rmluser.EdgeReviews)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RMLUserMutation) EdgeCleared(name string) bool {
	switch name {
	case rmluser.EdgeReviews:
		return m.clearedreviews
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RMLUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RMLUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RMLUserMutation) ResetEdge(name string) error {
	switch name {
	case rmluser.EdgeReviews:
		m.ResetReviews()
		return nil
	}
	return fmt.Errorf("unknown RMLUser edge %s", name)
}

// ReviewMutation represents an operation that mutates the Review nodes in the graph.
type ReviewMutation struct {
	config
	op            Op
	typ           string
	id            *int
	rating        *int
	addrating     *int
	comment       *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	lawyer        *int
	clearedlawyer bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Review, error)
	predicates    []predicate.Review
}

var _ ent.Mutation = (*ReviewMutation)(nil)

// reviewOption allows management of the mutation configuration using functional options.
type reviewOption func(*ReviewMutation)

// newReviewMutation creates new mutation for the Review entity.
func newReviewMutation(c config, op Op, opts ...reviewOption) *ReviewMutation {
	m := &ReviewMutation{
		config:        c,
		op:            op,
		typ:           TypeReview,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReviewID sets the ID field of the mutation.
func withReviewID(id int) reviewOption {
	return func(m *ReviewMutation) {
		var (
			err   error
			once  sync.Once
			value *Review
		)
		m.oldValue = func(ctx context.Context) (*Review, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Review.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReview sets the old Review of the mutation.
func withReview(node *Review) reviewOption {
	return func(m *ReviewMutation) {
		m.oldValue = func(context.Context) (*Review, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReviewMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReviewMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReviewMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReviewMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Review.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRating sets the "rating" field.
func (m *ReviewMutation) SetRating(i int) {
	m.rating = &i
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *ReviewMutation) Rating() (r int, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the Review entity.
// If the Review object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewMutation) OldRating(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds i to the "rating" field.
func (m *ReviewMutation) AddRating(i int) {
	if m.addrating != nil {
		*m.addrating += i
	} else {
		m.addrating = &i
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *ReviewMutation) AddedRating() (r int, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating resets all changes to the "rating" field.
func (m *ReviewMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
}

// SetComment sets the "comment" field.
func (m *ReviewMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *ReviewMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Review entity.
// If the Review object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *ReviewMutation) ResetComment() {
	m.comment = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ReviewMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ReviewMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Review entity.
// If the Review object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ReviewMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetLawyerReviews sets the "lawyer_reviews" field.
func (m *ReviewMutation) SetLawyerReviews(i int) {
	m.lawyer = &i
}

// LawyerReviews returns the value of the "lawyer_reviews" field in the mutation.
func (m *ReviewMutation) LawyerReviews() (r int, exists bool) {
	v := m.lawyer
	if v == nil {
		return
	}
	return *v, true
}

// OldLawyerReviews returns the old "lawyer_reviews" field's value of the Review entity.
// If the Review object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewMutation) OldLawyerReviews(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLawyerReviews is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLawyerReviews requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLawyerReviews: %w", err)
	}
	return oldValue.LawyerReviews, nil
}

// ClearLawyerReviews clears the value of the "lawyer_reviews" field.
func (m *ReviewMutation) ClearLawyerReviews() {
	m.lawyer = nil
	m.clearedFields[review.FieldLawyerReviews] = struct{}{}
}

// LawyerReviewsCleared returns if the "lawyer_reviews" field was cleared in this mutation.
func (m *ReviewMutation) LawyerReviewsCleared() bool {
	_, ok := m.clearedFields[review.FieldLawyerReviews]
	return ok
}

// ResetLawyerReviews resets all changes to the "lawyer_reviews" field.
func (m *ReviewMutation) ResetLawyerReviews() {
	m.lawyer = nil
	delete(m.clearedFields, review.FieldLawyerReviews)
}

// SetRmlUserReviews sets the "rml_user_reviews" field.
func (m *ReviewMutation) SetRmlUserReviews(i int) {
	m.user = &i
}

// RmlUserReviews returns the value of the "rml_user_reviews" field in the mutation.
func (m *ReviewMutation) RmlUserReviews() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldRmlUserReviews returns the old "rml_user_reviews" field's value of the Review entity.
// If the Review object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewMutation) OldRmlUserReviews(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRmlUserReviews is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRmlUserReviews requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRmlUserReviews: %w", err)
	}
	return oldValue.RmlUserReviews, nil
}

// ClearRmlUserReviews clears the value of the "rml_user_reviews" field.
func (m *ReviewMutation) ClearRmlUserReviews() {
	m.user = nil
	m.clearedFields[review.FieldRmlUserReviews] = struct{}{}
}

// RmlUserReviewsCleared returns if the "rml_user_reviews" field was cleared in this mutation.
func (m *ReviewMutation) RmlUserReviewsCleared() bool {
	_, ok := m.clearedFields[review.FieldRmlUserReviews]
	return ok
}

// ResetRmlUserReviews resets all changes to the "rml_user_reviews" field.
func (m *ReviewMutation) ResetRmlUserReviews() {
	m.user = nil
	delete(m.clearedFields, review.FieldRmlUserReviews)
}

// SetLawyerID sets the "lawyer" edge to the Lawyer entity by id.
func (m *ReviewMutation) SetLawyerID(id int) {
	m.lawyer = &id
}

// ClearLawyer clears the "lawyer" edge to the Lawyer entity.
func (m *ReviewMutation) ClearLawyer() {
	m.clearedlawyer = true
	m.clearedFields[review.FieldLawyerReviews] = struct{}{}
}

// LawyerCleared reports if the "lawyer" edge to the Lawyer entity was cleared.
func (m *ReviewMutation) LawyerCleared() bool {
	return m.LawyerReviewsCleared() || m.clearedlawyer
}

// LawyerID returns the "lawyer" edge ID in the mutation.
func (m *ReviewMutation) LawyerID() (id int, exists bool) {
	if m.lawyer != nil {
		return *m.lawyer, true
	}
	return
}

// LawyerIDs returns the "lawyer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LawyerID instead. It exists only for internal usage by the builders.
func (m *ReviewMutation) LawyerIDs() (ids []int) {
	if id := m.lawyer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLawyer resets all changes to the "lawyer" edge.
func (m *ReviewMutation) ResetLawyer() {
	m.lawyer = nil
	m.clearedlawyer = false
}

// SetUserID sets the "user" edge to the RMLUser entity by id.
func (m *ReviewMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the RMLUser entity.
func (m *ReviewMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[review.FieldRmlUserReviews] = struct{}{}
}

// UserCleared reports if the "user" edge to the RMLUser entity was cleared.
func (m *ReviewMutation) UserCleared() bool {
	return m.RmlUserReviewsCleared() || m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ReviewMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ReviewMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ReviewMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ReviewMutation builder.
func (m *ReviewMutation) Where(ps ...predicate.Review) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReviewMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReviewMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Review, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReviewMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReviewMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Review).
func (m *ReviewMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReviewMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.rating != nil {
		fields = append(fields, review.FieldRating)
	}
	if m.comment != nil {
		fields = append(fields, review.FieldComment)
	}
	if m.created_at != nil {
		fields = append(fields, review.FieldCreatedAt)
	}
	if m.lawyer != nil {
		fields = append(fields, review.FieldLawyerReviews)
	}
	if m.user != nil {
		fields = append(fields, review.FieldRmlUserReviews)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReviewMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case review.FieldRating:
		return m.Rating()
	case review.FieldComment:
		return m.Comment()
	case review.FieldCreatedAt:
		return m.CreatedAt()
	case review.FieldLawyerReviews:
		return m.LawyerReviews()
	case review.FieldRmlUserReviews:
		return m.RmlUserReviews()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReviewMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case review.FieldRating:
		return m.OldRating(ctx)
	case review.FieldComment:
		return m.OldComment(ctx)
	case review.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case review.FieldLawyerReviews:
		return m.OldLawyerReviews(ctx)
	case review.FieldRmlUserReviews:
		return m.OldRmlUserReviews(ctx)
	}
	return nil, fmt.Errorf("unknown Review field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReviewMutation) SetField(name string, value ent.Value) error {
	switch name {
	case review.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	case review.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case review.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case review.FieldLawyerReviews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLawyerReviews(v)
		return nil
	case review.FieldRmlUserReviews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRmlUserReviews(v)
		return nil
	}
	return fmt.Errorf("unknown Review field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReviewMutation) AddedFields() []string {
	var fields []string
	if m.addrating != nil {
		fields = append(fields, review.FieldRating)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReviewMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case review.FieldRating:
		return m.AddedRating()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReviewMutation) AddField(name string, value ent.Value) error {
	switch name {
	case review.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	}
	return fmt.Errorf("unknown Review numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReviewMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(review.FieldLawyerReviews) {
		fields = append(fields, review.FieldLawyerReviews)
	}
	if m.FieldCleared(review.FieldRmlUserReviews) {
		fields = append(fields, review.FieldRmlUserReviews)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReviewMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReviewMutation) ClearField(name string) error {
	switch name {
	case review.FieldLawyerReviews:
		m.ClearLawyerReviews()
		return nil
	case review.FieldRmlUserReviews:
		m.ClearRmlUserReviews()
		return nil
	}
	return fmt.Errorf("unknown Review nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReviewMutation) ResetField(name string) error {
	switch name {
	case review.FieldRating:
		m.ResetRating()
		return nil
	case review.FieldComment:
		m.ResetComment()
		return nil
	case review.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case review.FieldLawyerReviews:
		m.ResetLawyerReviews()
		return nil
	case review.FieldRmlUserReviews:
		m.ResetRmlUserReviews()
		return nil
	}
	return fmt.Errorf("unknown Review field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReviewMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.lawyer != nil {
		edges = append(edges, review.EdgeLawyer)
	}
	if m.user != nil {
		edges = append(edges, review.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReviewMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case review.EdgeLawyer:
		if id := m.lawyer; id != nil {
			return []ent.Value{*id}
		}
	case review.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReviewMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReviewMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReviewMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlawyer {
		edges = append(edges, review.EdgeLawyer)
	}
	if m.cleareduser {
		edges = append(edges, review.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReviewMutation) EdgeCleared(name string) bool {
	switch name {
	case review.EdgeLawyer:
		return m.clearedlawyer
	case review.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReviewMutation) ClearEdge(name string) error {
	switch name {
	case review.EdgeLawyer:
		m.ClearLawyer()
		return nil
	case review.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Review unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReviewMutation) ResetEdge(name string) error {
	switch name {
	case review.EdgeLawyer:
		m.ResetLawyer()
		return nil
	case review.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Review edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	email         *string
	password      *string
	verified      *bool
	created_at    *time.Time
	clearedFields map[string]struct{}
	owner         map[int]struct{}
	removedowner  map[int]struct{}
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetVerified sets the "verified" field.
func (m *UserMutation) SetVerified(b bool) {
	m.verified = &b
}

// Verified returns the value of the "verified" field in the mutation.
func (m *UserMutation) Verified() (r bool, exists bool) {
	v := m.verified
	if v == nil {
		return
	}
	return *v, true
}

// OldVerified returns the old "verified" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerified: %w", err)
	}
	return oldValue.Verified, nil
}

// ResetVerified resets all changes to the "verified" field.
func (m *UserMutation) ResetVerified() {
	m.verified = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddOwnerIDs adds the "owner" edge to the PasswordToken entity by ids.
func (m *UserMutation) AddOwnerIDs(ids ...int) {
	if m.owner == nil {
		m.owner = make(map[int]struct{})
	}
	for i := range ids {
		m.owner[ids[i]] = struct{}{}
	}
}

// ClearOwner clears the "owner" edge to the PasswordToken entity.
func (m *UserMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the PasswordToken entity was cleared.
func (m *UserMutation) OwnerCleared() bool {
	return m.clearedowner
}

// RemoveOwnerIDs removes the "owner" edge to the PasswordToken entity by IDs.
func (m *UserMutation) RemoveOwnerIDs(ids ...int) {
	if m.removedowner == nil {
		m.removedowner = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.owner, ids[i])
		m.removedowner[ids[i]] = struct{}{}
	}
}

// RemovedOwner returns the removed IDs of the "owner" edge to the PasswordToken entity.
func (m *UserMutation) RemovedOwnerIDs() (ids []int) {
	for id := range m.removedowner {
		ids = append(ids, id)
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
func (m *UserMutation) OwnerIDs() (ids []int) {
	for id := range m.owner {
		ids = append(ids, id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *UserMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
	m.removedowner = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.verified != nil {
		fields = append(fields, user.FieldVerified)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldVerified:
		return m.Verified()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldVerified:
		return m.OldVerified(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerified(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldVerified:
		m.ResetVerified()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, user.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOwner:
		ids := make([]ent.Value, 0, len(m.owner))
		for id := range m.owner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedowner != nil {
		edges = append(edges, user.EdgeOwner)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOwner:
		ids := make([]ent.Value, 0, len(m.removedowner))
		for id := range m.removedowner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, user.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
