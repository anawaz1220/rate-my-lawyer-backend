// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/mvpstaff"
)

// MvpStaffCreate is the builder for creating a MvpStaff entity.
type MvpStaffCreate struct {
	config
	mutation *MvpStaffMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (msc *MvpStaffCreate) SetName(s string) *MvpStaffCreate {
	msc.mutation.SetName(s)
	return msc
}

// SetRole sets the "role" field.
func (msc *MvpStaffCreate) SetRole(s string) *MvpStaffCreate {
	msc.mutation.SetRole(s)
	return msc
}

// SetEmail sets the "email" field.
func (msc *MvpStaffCreate) SetEmail(s string) *MvpStaffCreate {
	msc.mutation.SetEmail(s)
	return msc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (msc *MvpStaffCreate) SetNillableEmail(s *string) *MvpStaffCreate {
	if s != nil {
		msc.SetEmail(*s)
	}
	return msc
}

// SetPhone sets the "phone" field.
func (msc *MvpStaffCreate) SetPhone(s string) *MvpStaffCreate {
	msc.mutation.SetPhone(s)
	return msc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (msc *MvpStaffCreate) SetNillablePhone(s *string) *MvpStaffCreate {
	if s != nil {
		msc.SetPhone(*s)
	}
	return msc
}

// SetLastName sets the "last_name" field.
func (msc *MvpStaffCreate) SetLastName(s string) *MvpStaffCreate {
	msc.mutation.SetLastName(s)
	return msc
}

// SetBirthday sets the "birthday" field.
func (msc *MvpStaffCreate) SetBirthday(t time.Time) *MvpStaffCreate {
	msc.mutation.SetBirthday(t)
	return msc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (msc *MvpStaffCreate) SetNillableBirthday(t *time.Time) *MvpStaffCreate {
	if t != nil {
		msc.SetBirthday(*t)
	}
	return msc
}

// Mutation returns the MvpStaffMutation object of the builder.
func (msc *MvpStaffCreate) Mutation() *MvpStaffMutation {
	return msc.mutation
}

// Save creates the MvpStaff in the database.
func (msc *MvpStaffCreate) Save(ctx context.Context) (*MvpStaff, error) {
	return withHooks(ctx, msc.sqlSave, msc.mutation, msc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MvpStaffCreate) SaveX(ctx context.Context) *MvpStaff {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MvpStaffCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MvpStaffCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *MvpStaffCreate) check() error {
	if _, ok := msc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MvpStaff.name"`)}
	}
	if _, ok := msc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "MvpStaff.role"`)}
	}
	if v, ok := msc.mutation.Role(); ok {
		if err := mvpstaff.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "MvpStaff.role": %w`, err)}
		}
	}
	if _, ok := msc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "MvpStaff.last_name"`)}
	}
	return nil
}

func (msc *MvpStaffCreate) sqlSave(ctx context.Context) (*MvpStaff, error) {
	if err := msc.check(); err != nil {
		return nil, err
	}
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	msc.mutation.id = &_node.ID
	msc.mutation.done = true
	return _node, nil
}

func (msc *MvpStaffCreate) createSpec() (*MvpStaff, *sqlgraph.CreateSpec) {
	var (
		_node = &MvpStaff{config: msc.config}
		_spec = sqlgraph.NewCreateSpec(mvpstaff.Table, sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt))
	)
	if value, ok := msc.mutation.Name(); ok {
		_spec.SetField(mvpstaff.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := msc.mutation.Role(); ok {
		_spec.SetField(mvpstaff.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := msc.mutation.Email(); ok {
		_spec.SetField(mvpstaff.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := msc.mutation.Phone(); ok {
		_spec.SetField(mvpstaff.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := msc.mutation.LastName(); ok {
		_spec.SetField(mvpstaff.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := msc.mutation.Birthday(); ok {
		_spec.SetField(mvpstaff.FieldBirthday, field.TypeTime, value)
		_node.Birthday = value
	}
	return _node, _spec
}

// MvpStaffCreateBulk is the builder for creating many MvpStaff entities in bulk.
type MvpStaffCreateBulk struct {
	config
	err      error
	builders []*MvpStaffCreate
}

// Save creates the MvpStaff entities in the database.
func (mscb *MvpStaffCreateBulk) Save(ctx context.Context) ([]*MvpStaff, error) {
	if mscb.err != nil {
		return nil, mscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MvpStaff, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MvpStaffMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MvpStaffCreateBulk) SaveX(ctx context.Context) []*MvpStaff {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MvpStaffCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MvpStaffCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}
