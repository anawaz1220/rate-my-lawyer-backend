// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/jurisdiction"
	"github.com/mikestefanello/pagoda/ent/lawyer"
	"github.com/mikestefanello/pagoda/ent/lawyerjurisdiction"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// LawyerJurisdictionQuery is the builder for querying LawyerJurisdiction entities.
type LawyerJurisdictionQuery struct {
	config
	ctx              *QueryContext
	order            []lawyerjurisdiction.OrderOption
	inters           []Interceptor
	predicates       []predicate.LawyerJurisdiction
	withLawyer       *LawyerQuery
	withJurisdiction *JurisdictionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LawyerJurisdictionQuery builder.
func (ljq *LawyerJurisdictionQuery) Where(ps ...predicate.LawyerJurisdiction) *LawyerJurisdictionQuery {
	ljq.predicates = append(ljq.predicates, ps...)
	return ljq
}

// Limit the number of records to be returned by this query.
func (ljq *LawyerJurisdictionQuery) Limit(limit int) *LawyerJurisdictionQuery {
	ljq.ctx.Limit = &limit
	return ljq
}

// Offset to start from.
func (ljq *LawyerJurisdictionQuery) Offset(offset int) *LawyerJurisdictionQuery {
	ljq.ctx.Offset = &offset
	return ljq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ljq *LawyerJurisdictionQuery) Unique(unique bool) *LawyerJurisdictionQuery {
	ljq.ctx.Unique = &unique
	return ljq
}

// Order specifies how the records should be ordered.
func (ljq *LawyerJurisdictionQuery) Order(o ...lawyerjurisdiction.OrderOption) *LawyerJurisdictionQuery {
	ljq.order = append(ljq.order, o...)
	return ljq
}

// QueryLawyer chains the current query on the "lawyer" edge.
func (ljq *LawyerJurisdictionQuery) QueryLawyer() *LawyerQuery {
	query := (&LawyerClient{config: ljq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ljq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ljq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lawyerjurisdiction.Table, lawyerjurisdiction.FieldID, selector),
			sqlgraph.To(lawyer.Table, lawyer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lawyerjurisdiction.LawyerTable, lawyerjurisdiction.LawyerColumn),
		)
		fromU = sqlgraph.SetNeighbors(ljq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJurisdiction chains the current query on the "jurisdiction" edge.
func (ljq *LawyerJurisdictionQuery) QueryJurisdiction() *JurisdictionQuery {
	query := (&JurisdictionClient{config: ljq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ljq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ljq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lawyerjurisdiction.Table, lawyerjurisdiction.FieldID, selector),
			sqlgraph.To(jurisdiction.Table, jurisdiction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, lawyerjurisdiction.JurisdictionTable, lawyerjurisdiction.JurisdictionColumn),
		)
		fromU = sqlgraph.SetNeighbors(ljq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LawyerJurisdiction entity from the query.
// Returns a *NotFoundError when no LawyerJurisdiction was found.
func (ljq *LawyerJurisdictionQuery) First(ctx context.Context) (*LawyerJurisdiction, error) {
	nodes, err := ljq.Limit(1).All(setContextOp(ctx, ljq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lawyerjurisdiction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ljq *LawyerJurisdictionQuery) FirstX(ctx context.Context) *LawyerJurisdiction {
	node, err := ljq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LawyerJurisdiction ID from the query.
// Returns a *NotFoundError when no LawyerJurisdiction ID was found.
func (ljq *LawyerJurisdictionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ljq.Limit(1).IDs(setContextOp(ctx, ljq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lawyerjurisdiction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ljq *LawyerJurisdictionQuery) FirstIDX(ctx context.Context) int {
	id, err := ljq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LawyerJurisdiction entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LawyerJurisdiction entity is found.
// Returns a *NotFoundError when no LawyerJurisdiction entities are found.
func (ljq *LawyerJurisdictionQuery) Only(ctx context.Context) (*LawyerJurisdiction, error) {
	nodes, err := ljq.Limit(2).All(setContextOp(ctx, ljq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lawyerjurisdiction.Label}
	default:
		return nil, &NotSingularError{lawyerjurisdiction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ljq *LawyerJurisdictionQuery) OnlyX(ctx context.Context) *LawyerJurisdiction {
	node, err := ljq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LawyerJurisdiction ID in the query.
// Returns a *NotSingularError when more than one LawyerJurisdiction ID is found.
// Returns a *NotFoundError when no entities are found.
func (ljq *LawyerJurisdictionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ljq.Limit(2).IDs(setContextOp(ctx, ljq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lawyerjurisdiction.Label}
	default:
		err = &NotSingularError{lawyerjurisdiction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ljq *LawyerJurisdictionQuery) OnlyIDX(ctx context.Context) int {
	id, err := ljq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LawyerJurisdictions.
func (ljq *LawyerJurisdictionQuery) All(ctx context.Context) ([]*LawyerJurisdiction, error) {
	ctx = setContextOp(ctx, ljq.ctx, "All")
	if err := ljq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LawyerJurisdiction, *LawyerJurisdictionQuery]()
	return withInterceptors[[]*LawyerJurisdiction](ctx, ljq, qr, ljq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ljq *LawyerJurisdictionQuery) AllX(ctx context.Context) []*LawyerJurisdiction {
	nodes, err := ljq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LawyerJurisdiction IDs.
func (ljq *LawyerJurisdictionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ljq.ctx.Unique == nil && ljq.path != nil {
		ljq.Unique(true)
	}
	ctx = setContextOp(ctx, ljq.ctx, "IDs")
	if err = ljq.Select(lawyerjurisdiction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ljq *LawyerJurisdictionQuery) IDsX(ctx context.Context) []int {
	ids, err := ljq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ljq *LawyerJurisdictionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ljq.ctx, "Count")
	if err := ljq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ljq, querierCount[*LawyerJurisdictionQuery](), ljq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ljq *LawyerJurisdictionQuery) CountX(ctx context.Context) int {
	count, err := ljq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ljq *LawyerJurisdictionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ljq.ctx, "Exist")
	switch _, err := ljq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ljq *LawyerJurisdictionQuery) ExistX(ctx context.Context) bool {
	exist, err := ljq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LawyerJurisdictionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ljq *LawyerJurisdictionQuery) Clone() *LawyerJurisdictionQuery {
	if ljq == nil {
		return nil
	}
	return &LawyerJurisdictionQuery{
		config:           ljq.config,
		ctx:              ljq.ctx.Clone(),
		order:            append([]lawyerjurisdiction.OrderOption{}, ljq.order...),
		inters:           append([]Interceptor{}, ljq.inters...),
		predicates:       append([]predicate.LawyerJurisdiction{}, ljq.predicates...),
		withLawyer:       ljq.withLawyer.Clone(),
		withJurisdiction: ljq.withJurisdiction.Clone(),
		// clone intermediate query.
		sql:  ljq.sql.Clone(),
		path: ljq.path,
	}
}

// WithLawyer tells the query-builder to eager-load the nodes that are connected to
// the "lawyer" edge. The optional arguments are used to configure the query builder of the edge.
func (ljq *LawyerJurisdictionQuery) WithLawyer(opts ...func(*LawyerQuery)) *LawyerJurisdictionQuery {
	query := (&LawyerClient{config: ljq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ljq.withLawyer = query
	return ljq
}

// WithJurisdiction tells the query-builder to eager-load the nodes that are connected to
// the "jurisdiction" edge. The optional arguments are used to configure the query builder of the edge.
func (ljq *LawyerJurisdictionQuery) WithJurisdiction(opts ...func(*JurisdictionQuery)) *LawyerJurisdictionQuery {
	query := (&JurisdictionClient{config: ljq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ljq.withJurisdiction = query
	return ljq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LawyerID int `json:"lawyer_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LawyerJurisdiction.Query().
//		GroupBy(lawyerjurisdiction.FieldLawyerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ljq *LawyerJurisdictionQuery) GroupBy(field string, fields ...string) *LawyerJurisdictionGroupBy {
	ljq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LawyerJurisdictionGroupBy{build: ljq}
	grbuild.flds = &ljq.ctx.Fields
	grbuild.label = lawyerjurisdiction.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LawyerID int `json:"lawyer_id,omitempty"`
//	}
//
//	client.LawyerJurisdiction.Query().
//		Select(lawyerjurisdiction.FieldLawyerID).
//		Scan(ctx, &v)
func (ljq *LawyerJurisdictionQuery) Select(fields ...string) *LawyerJurisdictionSelect {
	ljq.ctx.Fields = append(ljq.ctx.Fields, fields...)
	sbuild := &LawyerJurisdictionSelect{LawyerJurisdictionQuery: ljq}
	sbuild.label = lawyerjurisdiction.Label
	sbuild.flds, sbuild.scan = &ljq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LawyerJurisdictionSelect configured with the given aggregations.
func (ljq *LawyerJurisdictionQuery) Aggregate(fns ...AggregateFunc) *LawyerJurisdictionSelect {
	return ljq.Select().Aggregate(fns...)
}

func (ljq *LawyerJurisdictionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ljq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ljq); err != nil {
				return err
			}
		}
	}
	for _, f := range ljq.ctx.Fields {
		if !lawyerjurisdiction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ljq.path != nil {
		prev, err := ljq.path(ctx)
		if err != nil {
			return err
		}
		ljq.sql = prev
	}
	return nil
}

func (ljq *LawyerJurisdictionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LawyerJurisdiction, error) {
	var (
		nodes       = []*LawyerJurisdiction{}
		_spec       = ljq.querySpec()
		loadedTypes = [2]bool{
			ljq.withLawyer != nil,
			ljq.withJurisdiction != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LawyerJurisdiction).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LawyerJurisdiction{config: ljq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ljq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ljq.withLawyer; query != nil {
		if err := ljq.loadLawyer(ctx, query, nodes, nil,
			func(n *LawyerJurisdiction, e *Lawyer) { n.Edges.Lawyer = e }); err != nil {
			return nil, err
		}
	}
	if query := ljq.withJurisdiction; query != nil {
		if err := ljq.loadJurisdiction(ctx, query, nodes, nil,
			func(n *LawyerJurisdiction, e *Jurisdiction) { n.Edges.Jurisdiction = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ljq *LawyerJurisdictionQuery) loadLawyer(ctx context.Context, query *LawyerQuery, nodes []*LawyerJurisdiction, init func(*LawyerJurisdiction), assign func(*LawyerJurisdiction, *Lawyer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*LawyerJurisdiction)
	for i := range nodes {
		fk := nodes[i].LawyerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(lawyer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "lawyer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ljq *LawyerJurisdictionQuery) loadJurisdiction(ctx context.Context, query *JurisdictionQuery, nodes []*LawyerJurisdiction, init func(*LawyerJurisdiction), assign func(*LawyerJurisdiction, *Jurisdiction)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*LawyerJurisdiction)
	for i := range nodes {
		fk := nodes[i].JurisdictionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jurisdiction.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "jurisdiction_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ljq *LawyerJurisdictionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ljq.querySpec()
	_spec.Node.Columns = ljq.ctx.Fields
	if len(ljq.ctx.Fields) > 0 {
		_spec.Unique = ljq.ctx.Unique != nil && *ljq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ljq.driver, _spec)
}

func (ljq *LawyerJurisdictionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lawyerjurisdiction.Table, lawyerjurisdiction.Columns, sqlgraph.NewFieldSpec(lawyerjurisdiction.FieldID, field.TypeInt))
	_spec.From = ljq.sql
	if unique := ljq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ljq.path != nil {
		_spec.Unique = true
	}
	if fields := ljq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lawyerjurisdiction.FieldID)
		for i := range fields {
			if fields[i] != lawyerjurisdiction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ljq.withLawyer != nil {
			_spec.Node.AddColumnOnce(lawyerjurisdiction.FieldLawyerID)
		}
		if ljq.withJurisdiction != nil {
			_spec.Node.AddColumnOnce(lawyerjurisdiction.FieldJurisdictionID)
		}
	}
	if ps := ljq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ljq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ljq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ljq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ljq *LawyerJurisdictionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ljq.driver.Dialect())
	t1 := builder.Table(lawyerjurisdiction.Table)
	columns := ljq.ctx.Fields
	if len(columns) == 0 {
		columns = lawyerjurisdiction.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ljq.sql != nil {
		selector = ljq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ljq.ctx.Unique != nil && *ljq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ljq.predicates {
		p(selector)
	}
	for _, p := range ljq.order {
		p(selector)
	}
	if offset := ljq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ljq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LawyerJurisdictionGroupBy is the group-by builder for LawyerJurisdiction entities.
type LawyerJurisdictionGroupBy struct {
	selector
	build *LawyerJurisdictionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ljgb *LawyerJurisdictionGroupBy) Aggregate(fns ...AggregateFunc) *LawyerJurisdictionGroupBy {
	ljgb.fns = append(ljgb.fns, fns...)
	return ljgb
}

// Scan applies the selector query and scans the result into the given value.
func (ljgb *LawyerJurisdictionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ljgb.build.ctx, "GroupBy")
	if err := ljgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LawyerJurisdictionQuery, *LawyerJurisdictionGroupBy](ctx, ljgb.build, ljgb, ljgb.build.inters, v)
}

func (ljgb *LawyerJurisdictionGroupBy) sqlScan(ctx context.Context, root *LawyerJurisdictionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ljgb.fns))
	for _, fn := range ljgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ljgb.flds)+len(ljgb.fns))
		for _, f := range *ljgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ljgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ljgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LawyerJurisdictionSelect is the builder for selecting fields of LawyerJurisdiction entities.
type LawyerJurisdictionSelect struct {
	*LawyerJurisdictionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ljs *LawyerJurisdictionSelect) Aggregate(fns ...AggregateFunc) *LawyerJurisdictionSelect {
	ljs.fns = append(ljs.fns, fns...)
	return ljs
}

// Scan applies the selector query and scans the result into the given value.
func (ljs *LawyerJurisdictionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ljs.ctx, "Select")
	if err := ljs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LawyerJurisdictionQuery, *LawyerJurisdictionSelect](ctx, ljs.LawyerJurisdictionQuery, ljs, ljs.inters, v)
}

func (ljs *LawyerJurisdictionSelect) sqlScan(ctx context.Context, root *LawyerJurisdictionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ljs.fns))
	for _, fn := range ljs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ljs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ljs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
