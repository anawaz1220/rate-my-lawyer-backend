// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/rmluser"
)

// RMLUserDelete is the builder for deleting a RMLUser entity.
type RMLUserDelete struct {
	config
	hooks    []Hook
	mutation *RMLUserMutation
}

// Where appends a list predicates to the RMLUserDelete builder.
func (rud *RMLUserDelete) Where(ps ...predicate.RMLUser) *RMLUserDelete {
	rud.mutation.Where(ps...)
	return rud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rud *RMLUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rud.sqlExec, rud.mutation, rud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rud *RMLUserDelete) ExecX(ctx context.Context) int {
	n, err := rud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rud *RMLUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rmluser.Table, sqlgraph.NewFieldSpec(rmluser.FieldID, field.TypeInt))
	if ps := rud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rud.mutation.done = true
	return affected, err
}

// RMLUserDeleteOne is the builder for deleting a single RMLUser entity.
type RMLUserDeleteOne struct {
	rud *RMLUserDelete
}

// Where appends a list predicates to the RMLUserDelete builder.
func (rudo *RMLUserDeleteOne) Where(ps ...predicate.RMLUser) *RMLUserDeleteOne {
	rudo.rud.mutation.Where(ps...)
	return rudo
}

// Exec executes the deletion query.
func (rudo *RMLUserDeleteOne) Exec(ctx context.Context) error {
	n, err := rudo.rud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rmluser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rudo *RMLUserDeleteOne) ExecX(ctx context.Context) {
	if err := rudo.Exec(ctx); err != nil {
		panic(err)
	}
}
