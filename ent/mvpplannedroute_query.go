// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/mvpmaterial"
	"github.com/mikestefanello/pagoda/ent/mvpplannedroute"
	"github.com/mikestefanello/pagoda/ent/mvpstaff"
	"github.com/mikestefanello/pagoda/ent/mvptruck"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// MvpPlannedRouteQuery is the builder for querying MvpPlannedRoute entities.
type MvpPlannedRouteQuery struct {
	config
	ctx           *QueryContext
	order         []mvpplannedroute.OrderOption
	inters        []Interceptor
	predicates    []predicate.MvpPlannedRoute
	withTrucks    *MvpTruckQuery
	withDriver    *MvpStaffQuery
	withLoaders   *MvpStaffQuery
	withMaterials *MvpMaterialQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MvpPlannedRouteQuery builder.
func (mprq *MvpPlannedRouteQuery) Where(ps ...predicate.MvpPlannedRoute) *MvpPlannedRouteQuery {
	mprq.predicates = append(mprq.predicates, ps...)
	return mprq
}

// Limit the number of records to be returned by this query.
func (mprq *MvpPlannedRouteQuery) Limit(limit int) *MvpPlannedRouteQuery {
	mprq.ctx.Limit = &limit
	return mprq
}

// Offset to start from.
func (mprq *MvpPlannedRouteQuery) Offset(offset int) *MvpPlannedRouteQuery {
	mprq.ctx.Offset = &offset
	return mprq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mprq *MvpPlannedRouteQuery) Unique(unique bool) *MvpPlannedRouteQuery {
	mprq.ctx.Unique = &unique
	return mprq
}

// Order specifies how the records should be ordered.
func (mprq *MvpPlannedRouteQuery) Order(o ...mvpplannedroute.OrderOption) *MvpPlannedRouteQuery {
	mprq.order = append(mprq.order, o...)
	return mprq
}

// QueryTrucks chains the current query on the "trucks" edge.
func (mprq *MvpPlannedRouteQuery) QueryTrucks() *MvpTruckQuery {
	query := (&MvpTruckClient{config: mprq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mprq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mprq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mvpplannedroute.Table, mvpplannedroute.FieldID, selector),
			sqlgraph.To(mvptruck.Table, mvptruck.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mvpplannedroute.TrucksTable, mvpplannedroute.TrucksColumn),
		)
		fromU = sqlgraph.SetNeighbors(mprq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDriver chains the current query on the "driver" edge.
func (mprq *MvpPlannedRouteQuery) QueryDriver() *MvpStaffQuery {
	query := (&MvpStaffClient{config: mprq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mprq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mprq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mvpplannedroute.Table, mvpplannedroute.FieldID, selector),
			sqlgraph.To(mvpstaff.Table, mvpstaff.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, mvpplannedroute.DriverTable, mvpplannedroute.DriverColumn),
		)
		fromU = sqlgraph.SetNeighbors(mprq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLoaders chains the current query on the "loaders" edge.
func (mprq *MvpPlannedRouteQuery) QueryLoaders() *MvpStaffQuery {
	query := (&MvpStaffClient{config: mprq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mprq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mprq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mvpplannedroute.Table, mvpplannedroute.FieldID, selector),
			sqlgraph.To(mvpstaff.Table, mvpstaff.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mvpplannedroute.LoadersTable, mvpplannedroute.LoadersColumn),
		)
		fromU = sqlgraph.SetNeighbors(mprq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMaterials chains the current query on the "materials" edge.
func (mprq *MvpPlannedRouteQuery) QueryMaterials() *MvpMaterialQuery {
	query := (&MvpMaterialClient{config: mprq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mprq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mprq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mvpplannedroute.Table, mvpplannedroute.FieldID, selector),
			sqlgraph.To(mvpmaterial.Table, mvpmaterial.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mvpplannedroute.MaterialsTable, mvpplannedroute.MaterialsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mprq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MvpPlannedRoute entity from the query.
// Returns a *NotFoundError when no MvpPlannedRoute was found.
func (mprq *MvpPlannedRouteQuery) First(ctx context.Context) (*MvpPlannedRoute, error) {
	nodes, err := mprq.Limit(1).All(setContextOp(ctx, mprq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{mvpplannedroute.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mprq *MvpPlannedRouteQuery) FirstX(ctx context.Context) *MvpPlannedRoute {
	node, err := mprq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MvpPlannedRoute ID from the query.
// Returns a *NotFoundError when no MvpPlannedRoute ID was found.
func (mprq *MvpPlannedRouteQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mprq.Limit(1).IDs(setContextOp(ctx, mprq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{mvpplannedroute.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mprq *MvpPlannedRouteQuery) FirstIDX(ctx context.Context) int {
	id, err := mprq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MvpPlannedRoute entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MvpPlannedRoute entity is found.
// Returns a *NotFoundError when no MvpPlannedRoute entities are found.
func (mprq *MvpPlannedRouteQuery) Only(ctx context.Context) (*MvpPlannedRoute, error) {
	nodes, err := mprq.Limit(2).All(setContextOp(ctx, mprq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{mvpplannedroute.Label}
	default:
		return nil, &NotSingularError{mvpplannedroute.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mprq *MvpPlannedRouteQuery) OnlyX(ctx context.Context) *MvpPlannedRoute {
	node, err := mprq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MvpPlannedRoute ID in the query.
// Returns a *NotSingularError when more than one MvpPlannedRoute ID is found.
// Returns a *NotFoundError when no entities are found.
func (mprq *MvpPlannedRouteQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mprq.Limit(2).IDs(setContextOp(ctx, mprq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{mvpplannedroute.Label}
	default:
		err = &NotSingularError{mvpplannedroute.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mprq *MvpPlannedRouteQuery) OnlyIDX(ctx context.Context) int {
	id, err := mprq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MvpPlannedRoutes.
func (mprq *MvpPlannedRouteQuery) All(ctx context.Context) ([]*MvpPlannedRoute, error) {
	ctx = setContextOp(ctx, mprq.ctx, "All")
	if err := mprq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MvpPlannedRoute, *MvpPlannedRouteQuery]()
	return withInterceptors[[]*MvpPlannedRoute](ctx, mprq, qr, mprq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mprq *MvpPlannedRouteQuery) AllX(ctx context.Context) []*MvpPlannedRoute {
	nodes, err := mprq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MvpPlannedRoute IDs.
func (mprq *MvpPlannedRouteQuery) IDs(ctx context.Context) (ids []int, err error) {
	if mprq.ctx.Unique == nil && mprq.path != nil {
		mprq.Unique(true)
	}
	ctx = setContextOp(ctx, mprq.ctx, "IDs")
	if err = mprq.Select(mvpplannedroute.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mprq *MvpPlannedRouteQuery) IDsX(ctx context.Context) []int {
	ids, err := mprq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mprq *MvpPlannedRouteQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mprq.ctx, "Count")
	if err := mprq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mprq, querierCount[*MvpPlannedRouteQuery](), mprq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mprq *MvpPlannedRouteQuery) CountX(ctx context.Context) int {
	count, err := mprq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mprq *MvpPlannedRouteQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mprq.ctx, "Exist")
	switch _, err := mprq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mprq *MvpPlannedRouteQuery) ExistX(ctx context.Context) bool {
	exist, err := mprq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MvpPlannedRouteQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mprq *MvpPlannedRouteQuery) Clone() *MvpPlannedRouteQuery {
	if mprq == nil {
		return nil
	}
	return &MvpPlannedRouteQuery{
		config:        mprq.config,
		ctx:           mprq.ctx.Clone(),
		order:         append([]mvpplannedroute.OrderOption{}, mprq.order...),
		inters:        append([]Interceptor{}, mprq.inters...),
		predicates:    append([]predicate.MvpPlannedRoute{}, mprq.predicates...),
		withTrucks:    mprq.withTrucks.Clone(),
		withDriver:    mprq.withDriver.Clone(),
		withLoaders:   mprq.withLoaders.Clone(),
		withMaterials: mprq.withMaterials.Clone(),
		// clone intermediate query.
		sql:  mprq.sql.Clone(),
		path: mprq.path,
	}
}

// WithTrucks tells the query-builder to eager-load the nodes that are connected to
// the "trucks" edge. The optional arguments are used to configure the query builder of the edge.
func (mprq *MvpPlannedRouteQuery) WithTrucks(opts ...func(*MvpTruckQuery)) *MvpPlannedRouteQuery {
	query := (&MvpTruckClient{config: mprq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mprq.withTrucks = query
	return mprq
}

// WithDriver tells the query-builder to eager-load the nodes that are connected to
// the "driver" edge. The optional arguments are used to configure the query builder of the edge.
func (mprq *MvpPlannedRouteQuery) WithDriver(opts ...func(*MvpStaffQuery)) *MvpPlannedRouteQuery {
	query := (&MvpStaffClient{config: mprq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mprq.withDriver = query
	return mprq
}

// WithLoaders tells the query-builder to eager-load the nodes that are connected to
// the "loaders" edge. The optional arguments are used to configure the query builder of the edge.
func (mprq *MvpPlannedRouteQuery) WithLoaders(opts ...func(*MvpStaffQuery)) *MvpPlannedRouteQuery {
	query := (&MvpStaffClient{config: mprq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mprq.withLoaders = query
	return mprq
}

// WithMaterials tells the query-builder to eager-load the nodes that are connected to
// the "materials" edge. The optional arguments are used to configure the query builder of the edge.
func (mprq *MvpPlannedRouteQuery) WithMaterials(opts ...func(*MvpMaterialQuery)) *MvpPlannedRouteQuery {
	query := (&MvpMaterialClient{config: mprq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mprq.withMaterials = query
	return mprq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Date time.Time `json:"date,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MvpPlannedRoute.Query().
//		GroupBy(mvpplannedroute.FieldDate).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mprq *MvpPlannedRouteQuery) GroupBy(field string, fields ...string) *MvpPlannedRouteGroupBy {
	mprq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MvpPlannedRouteGroupBy{build: mprq}
	grbuild.flds = &mprq.ctx.Fields
	grbuild.label = mvpplannedroute.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Date time.Time `json:"date,omitempty"`
//	}
//
//	client.MvpPlannedRoute.Query().
//		Select(mvpplannedroute.FieldDate).
//		Scan(ctx, &v)
func (mprq *MvpPlannedRouteQuery) Select(fields ...string) *MvpPlannedRouteSelect {
	mprq.ctx.Fields = append(mprq.ctx.Fields, fields...)
	sbuild := &MvpPlannedRouteSelect{MvpPlannedRouteQuery: mprq}
	sbuild.label = mvpplannedroute.Label
	sbuild.flds, sbuild.scan = &mprq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MvpPlannedRouteSelect configured with the given aggregations.
func (mprq *MvpPlannedRouteQuery) Aggregate(fns ...AggregateFunc) *MvpPlannedRouteSelect {
	return mprq.Select().Aggregate(fns...)
}

func (mprq *MvpPlannedRouteQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mprq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mprq); err != nil {
				return err
			}
		}
	}
	for _, f := range mprq.ctx.Fields {
		if !mvpplannedroute.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mprq.path != nil {
		prev, err := mprq.path(ctx)
		if err != nil {
			return err
		}
		mprq.sql = prev
	}
	return nil
}

func (mprq *MvpPlannedRouteQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MvpPlannedRoute, error) {
	var (
		nodes       = []*MvpPlannedRoute{}
		withFKs     = mprq.withFKs
		_spec       = mprq.querySpec()
		loadedTypes = [4]bool{
			mprq.withTrucks != nil,
			mprq.withDriver != nil,
			mprq.withLoaders != nil,
			mprq.withMaterials != nil,
		}
	)
	if mprq.withDriver != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, mvpplannedroute.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MvpPlannedRoute).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MvpPlannedRoute{config: mprq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mprq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mprq.withTrucks; query != nil {
		if err := mprq.loadTrucks(ctx, query, nodes,
			func(n *MvpPlannedRoute) { n.Edges.Trucks = []*MvpTruck{} },
			func(n *MvpPlannedRoute, e *MvpTruck) { n.Edges.Trucks = append(n.Edges.Trucks, e) }); err != nil {
			return nil, err
		}
	}
	if query := mprq.withDriver; query != nil {
		if err := mprq.loadDriver(ctx, query, nodes, nil,
			func(n *MvpPlannedRoute, e *MvpStaff) { n.Edges.Driver = e }); err != nil {
			return nil, err
		}
	}
	if query := mprq.withLoaders; query != nil {
		if err := mprq.loadLoaders(ctx, query, nodes,
			func(n *MvpPlannedRoute) { n.Edges.Loaders = []*MvpStaff{} },
			func(n *MvpPlannedRoute, e *MvpStaff) { n.Edges.Loaders = append(n.Edges.Loaders, e) }); err != nil {
			return nil, err
		}
	}
	if query := mprq.withMaterials; query != nil {
		if err := mprq.loadMaterials(ctx, query, nodes,
			func(n *MvpPlannedRoute) { n.Edges.Materials = []*MvpMaterial{} },
			func(n *MvpPlannedRoute, e *MvpMaterial) { n.Edges.Materials = append(n.Edges.Materials, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mprq *MvpPlannedRouteQuery) loadTrucks(ctx context.Context, query *MvpTruckQuery, nodes []*MvpPlannedRoute, init func(*MvpPlannedRoute), assign func(*MvpPlannedRoute, *MvpTruck)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*MvpPlannedRoute)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MvpTruck(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mvpplannedroute.TrucksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.mvp_planned_route_trucks
		if fk == nil {
			return fmt.Errorf(`foreign-key "mvp_planned_route_trucks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mvp_planned_route_trucks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mprq *MvpPlannedRouteQuery) loadDriver(ctx context.Context, query *MvpStaffQuery, nodes []*MvpPlannedRoute, init func(*MvpPlannedRoute), assign func(*MvpPlannedRoute, *MvpStaff)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MvpPlannedRoute)
	for i := range nodes {
		if nodes[i].mvp_planned_route_driver == nil {
			continue
		}
		fk := *nodes[i].mvp_planned_route_driver
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(mvpstaff.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mvp_planned_route_driver" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mprq *MvpPlannedRouteQuery) loadLoaders(ctx context.Context, query *MvpStaffQuery, nodes []*MvpPlannedRoute, init func(*MvpPlannedRoute), assign func(*MvpPlannedRoute, *MvpStaff)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*MvpPlannedRoute)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MvpStaff(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mvpplannedroute.LoadersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.mvp_planned_route_loaders
		if fk == nil {
			return fmt.Errorf(`foreign-key "mvp_planned_route_loaders" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mvp_planned_route_loaders" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mprq *MvpPlannedRouteQuery) loadMaterials(ctx context.Context, query *MvpMaterialQuery, nodes []*MvpPlannedRoute, init func(*MvpPlannedRoute), assign func(*MvpPlannedRoute, *MvpMaterial)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*MvpPlannedRoute)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MvpMaterial(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(mvpplannedroute.MaterialsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.mvp_planned_route_materials
		if fk == nil {
			return fmt.Errorf(`foreign-key "mvp_planned_route_materials" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mvp_planned_route_materials" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (mprq *MvpPlannedRouteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mprq.querySpec()
	_spec.Node.Columns = mprq.ctx.Fields
	if len(mprq.ctx.Fields) > 0 {
		_spec.Unique = mprq.ctx.Unique != nil && *mprq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mprq.driver, _spec)
}

func (mprq *MvpPlannedRouteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(mvpplannedroute.Table, mvpplannedroute.Columns, sqlgraph.NewFieldSpec(mvpplannedroute.FieldID, field.TypeInt))
	_spec.From = mprq.sql
	if unique := mprq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mprq.path != nil {
		_spec.Unique = true
	}
	if fields := mprq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mvpplannedroute.FieldID)
		for i := range fields {
			if fields[i] != mvpplannedroute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mprq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mprq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mprq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mprq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mprq *MvpPlannedRouteQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mprq.driver.Dialect())
	t1 := builder.Table(mvpplannedroute.Table)
	columns := mprq.ctx.Fields
	if len(columns) == 0 {
		columns = mvpplannedroute.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mprq.sql != nil {
		selector = mprq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mprq.ctx.Unique != nil && *mprq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mprq.predicates {
		p(selector)
	}
	for _, p := range mprq.order {
		p(selector)
	}
	if offset := mprq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mprq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MvpPlannedRouteGroupBy is the group-by builder for MvpPlannedRoute entities.
type MvpPlannedRouteGroupBy struct {
	selector
	build *MvpPlannedRouteQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mprgb *MvpPlannedRouteGroupBy) Aggregate(fns ...AggregateFunc) *MvpPlannedRouteGroupBy {
	mprgb.fns = append(mprgb.fns, fns...)
	return mprgb
}

// Scan applies the selector query and scans the result into the given value.
func (mprgb *MvpPlannedRouteGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mprgb.build.ctx, "GroupBy")
	if err := mprgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MvpPlannedRouteQuery, *MvpPlannedRouteGroupBy](ctx, mprgb.build, mprgb, mprgb.build.inters, v)
}

func (mprgb *MvpPlannedRouteGroupBy) sqlScan(ctx context.Context, root *MvpPlannedRouteQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mprgb.fns))
	for _, fn := range mprgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mprgb.flds)+len(mprgb.fns))
		for _, f := range *mprgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mprgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mprgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MvpPlannedRouteSelect is the builder for selecting fields of MvpPlannedRoute entities.
type MvpPlannedRouteSelect struct {
	*MvpPlannedRouteQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mprs *MvpPlannedRouteSelect) Aggregate(fns ...AggregateFunc) *MvpPlannedRouteSelect {
	mprs.fns = append(mprs.fns, fns...)
	return mprs
}

// Scan applies the selector query and scans the result into the given value.
func (mprs *MvpPlannedRouteSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mprs.ctx, "Select")
	if err := mprs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MvpPlannedRouteQuery, *MvpPlannedRouteSelect](ctx, mprs.MvpPlannedRouteQuery, mprs, mprs.inters, v)
}

func (mprs *MvpPlannedRouteSelect) sqlScan(ctx context.Context, root *MvpPlannedRouteQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mprs.fns))
	for _, fn := range mprs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mprs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mprs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
