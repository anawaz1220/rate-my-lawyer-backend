// Code generated by ent, DO NOT EDIT.

package jurisdiction

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the jurisdiction type in the database.
	Label = "jurisdiction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeLawyers holds the string denoting the lawyers edge name in mutations.
	EdgeLawyers = "lawyers"
	// EdgeLawyerJurisdictions holds the string denoting the lawyer_jurisdictions edge name in mutations.
	EdgeLawyerJurisdictions = "lawyer_jurisdictions"
	// Table holds the table name of the jurisdiction in the database.
	Table = "jurisdictions"
	// LawyersTable is the table that holds the lawyers relation/edge. The primary key declared below.
	LawyersTable = "lawyer_jurisdictions"
	// LawyersInverseTable is the table name for the Lawyer entity.
	// It exists in this package in order to avoid circular dependency with the "lawyer" package.
	LawyersInverseTable = "lawyers"
	// LawyerJurisdictionsTable is the table that holds the lawyer_jurisdictions relation/edge.
	LawyerJurisdictionsTable = "lawyer_jurisdictions"
	// LawyerJurisdictionsInverseTable is the table name for the LawyerJurisdiction entity.
	// It exists in this package in order to avoid circular dependency with the "lawyerjurisdiction" package.
	LawyerJurisdictionsInverseTable = "lawyer_jurisdictions"
	// LawyerJurisdictionsColumn is the table column denoting the lawyer_jurisdictions relation/edge.
	LawyerJurisdictionsColumn = "jurisdiction_id"
)

// Columns holds all SQL columns for jurisdiction fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// LawyersPrimaryKey and LawyersColumn2 are the table columns denoting the
	// primary key for the lawyers relation (M2M).
	LawyersPrimaryKey = []string{"lawyer_id", "jurisdiction_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Jurisdiction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLawyersCount orders the results by lawyers count.
func ByLawyersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLawyersStep(), opts...)
	}
}

// ByLawyers orders the results by lawyers terms.
func ByLawyers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLawyersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLawyerJurisdictionsCount orders the results by lawyer_jurisdictions count.
func ByLawyerJurisdictionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLawyerJurisdictionsStep(), opts...)
	}
}

// ByLawyerJurisdictions orders the results by lawyer_jurisdictions terms.
func ByLawyerJurisdictions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLawyerJurisdictionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLawyersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LawyersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LawyersTable, LawyersPrimaryKey...),
	)
}
func newLawyerJurisdictionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LawyerJurisdictionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, LawyerJurisdictionsTable, LawyerJurisdictionsColumn),
	)
}
