// Code generated by ent, DO NOT EDIT.

package lawyer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lawyer type in the database.
	Label = "lawyer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldPracticingStatus holds the string denoting the practicing_status field in the database.
	FieldPracticingStatus = "practicing_status"
	// FieldProfileURL holds the string denoting the profile_url field in the database.
	FieldProfileURL = "profile_url"
	// FieldAverageRating holds the string denoting the average_rating field in the database.
	FieldAverageRating = "average_rating"
	// FieldReviewCount holds the string denoting the review_count field in the database.
	FieldReviewCount = "review_count"
	// EdgeJurisdictions holds the string denoting the jurisdictions edge name in mutations.
	EdgeJurisdictions = "jurisdictions"
	// EdgeDecisions holds the string denoting the decisions edge name in mutations.
	EdgeDecisions = "decisions"
	// EdgeReviews holds the string denoting the reviews edge name in mutations.
	EdgeReviews = "reviews"
	// EdgeLawyerJurisdictions holds the string denoting the lawyer_jurisdictions edge name in mutations.
	EdgeLawyerJurisdictions = "lawyer_jurisdictions"
	// Table holds the table name of the lawyer in the database.
	Table = "lawyers"
	// JurisdictionsTable is the table that holds the jurisdictions relation/edge. The primary key declared below.
	JurisdictionsTable = "lawyer_jurisdictions"
	// JurisdictionsInverseTable is the table name for the Jurisdiction entity.
	// It exists in this package in order to avoid circular dependency with the "jurisdiction" package.
	JurisdictionsInverseTable = "jurisdictions"
	// DecisionsTable is the table that holds the decisions relation/edge.
	DecisionsTable = "decisions"
	// DecisionsInverseTable is the table name for the Decision entity.
	// It exists in this package in order to avoid circular dependency with the "decision" package.
	DecisionsInverseTable = "decisions"
	// DecisionsColumn is the table column denoting the decisions relation/edge.
	DecisionsColumn = "lawyer_decisions"
	// ReviewsTable is the table that holds the reviews relation/edge.
	ReviewsTable = "reviews"
	// ReviewsInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	ReviewsInverseTable = "reviews"
	// ReviewsColumn is the table column denoting the reviews relation/edge.
	ReviewsColumn = "lawyer_reviews"
	// LawyerJurisdictionsTable is the table that holds the lawyer_jurisdictions relation/edge.
	LawyerJurisdictionsTable = "lawyer_jurisdictions"
	// LawyerJurisdictionsInverseTable is the table name for the LawyerJurisdiction entity.
	// It exists in this package in order to avoid circular dependency with the "lawyerjurisdiction" package.
	LawyerJurisdictionsInverseTable = "lawyer_jurisdictions"
	// LawyerJurisdictionsColumn is the table column denoting the lawyer_jurisdictions relation/edge.
	LawyerJurisdictionsColumn = "lawyer_id"
)

// Columns holds all SQL columns for lawyer fields.
var Columns = []string{
	FieldID,
	FieldFullName,
	FieldFirstName,
	FieldMiddleName,
	FieldLastName,
	FieldGender,
	FieldAddress,
	FieldPhone,
	FieldPracticingStatus,
	FieldProfileURL,
	FieldAverageRating,
	FieldReviewCount,
}

var (
	// JurisdictionsPrimaryKey and JurisdictionsColumn2 are the table columns denoting the
	// primary key for the jurisdictions relation (M2M).
	JurisdictionsPrimaryKey = []string{"lawyer_id", "jurisdiction_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	FullNameValidator func(string) error
	// DefaultAverageRating holds the default value on creation for the "average_rating" field.
	DefaultAverageRating float64
	// DefaultReviewCount holds the default value on creation for the "review_count" field.
	DefaultReviewCount int
)

// OrderOption defines the ordering options for the Lawyer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByMiddleName orders the results by the middle_name field.
func ByMiddleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMiddleName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByPracticingStatus orders the results by the practicing_status field.
func ByPracticingStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPracticingStatus, opts...).ToFunc()
}

// ByProfileURL orders the results by the profile_url field.
func ByProfileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileURL, opts...).ToFunc()
}

// ByAverageRating orders the results by the average_rating field.
func ByAverageRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverageRating, opts...).ToFunc()
}

// ByReviewCount orders the results by the review_count field.
func ByReviewCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewCount, opts...).ToFunc()
}

// ByJurisdictionsCount orders the results by jurisdictions count.
func ByJurisdictionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJurisdictionsStep(), opts...)
	}
}

// ByJurisdictions orders the results by jurisdictions terms.
func ByJurisdictions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJurisdictionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDecisionsCount orders the results by decisions count.
func ByDecisionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDecisionsStep(), opts...)
	}
}

// ByDecisions orders the results by decisions terms.
func ByDecisions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDecisionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReviewsCount orders the results by reviews count.
func ByReviewsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReviewsStep(), opts...)
	}
}

// ByReviews orders the results by reviews terms.
func ByReviews(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLawyerJurisdictionsCount orders the results by lawyer_jurisdictions count.
func ByLawyerJurisdictionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLawyerJurisdictionsStep(), opts...)
	}
}

// ByLawyerJurisdictions orders the results by lawyer_jurisdictions terms.
func ByLawyerJurisdictions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLawyerJurisdictionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newJurisdictionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JurisdictionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, JurisdictionsTable, JurisdictionsPrimaryKey...),
	)
}
func newDecisionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DecisionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DecisionsTable, DecisionsColumn),
	)
}
func newReviewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
	)
}
func newLawyerJurisdictionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LawyerJurisdictionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, LawyerJurisdictionsTable, LawyerJurisdictionsColumn),
	)
}
