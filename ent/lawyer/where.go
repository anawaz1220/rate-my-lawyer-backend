// Code generated by ent, DO NOT EDIT.

package lawyer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldID, id))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldFullName, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldFirstName, v))
}

// MiddleName applies equality check predicate on the "middle_name" field. It's identical to MiddleNameEQ.
func MiddleName(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldMiddleName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldLastName, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldGender, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldAddress, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldPhone, v))
}

// PracticingStatus applies equality check predicate on the "practicing_status" field. It's identical to PracticingStatusEQ.
func PracticingStatus(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldPracticingStatus, v))
}

// ProfileURL applies equality check predicate on the "profile_url" field. It's identical to ProfileURLEQ.
func ProfileURL(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldProfileURL, v))
}

// AverageRating applies equality check predicate on the "average_rating" field. It's identical to AverageRatingEQ.
func AverageRating(v float64) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldAverageRating, v))
}

// ReviewCount applies equality check predicate on the "review_count" field. It's identical to ReviewCountEQ.
func ReviewCount(v int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldReviewCount, v))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContainsFold(FieldFullName, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContainsFold(FieldFirstName, v))
}

// MiddleNameEQ applies the EQ predicate on the "middle_name" field.
func MiddleNameEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldMiddleName, v))
}

// MiddleNameNEQ applies the NEQ predicate on the "middle_name" field.
func MiddleNameNEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldMiddleName, v))
}

// MiddleNameIn applies the In predicate on the "middle_name" field.
func MiddleNameIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldMiddleName, vs...))
}

// MiddleNameNotIn applies the NotIn predicate on the "middle_name" field.
func MiddleNameNotIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldMiddleName, vs...))
}

// MiddleNameGT applies the GT predicate on the "middle_name" field.
func MiddleNameGT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldMiddleName, v))
}

// MiddleNameGTE applies the GTE predicate on the "middle_name" field.
func MiddleNameGTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldMiddleName, v))
}

// MiddleNameLT applies the LT predicate on the "middle_name" field.
func MiddleNameLT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldMiddleName, v))
}

// MiddleNameLTE applies the LTE predicate on the "middle_name" field.
func MiddleNameLTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldMiddleName, v))
}

// MiddleNameContains applies the Contains predicate on the "middle_name" field.
func MiddleNameContains(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContains(FieldMiddleName, v))
}

// MiddleNameHasPrefix applies the HasPrefix predicate on the "middle_name" field.
func MiddleNameHasPrefix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasPrefix(FieldMiddleName, v))
}

// MiddleNameHasSuffix applies the HasSuffix predicate on the "middle_name" field.
func MiddleNameHasSuffix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasSuffix(FieldMiddleName, v))
}

// MiddleNameEqualFold applies the EqualFold predicate on the "middle_name" field.
func MiddleNameEqualFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEqualFold(FieldMiddleName, v))
}

// MiddleNameContainsFold applies the ContainsFold predicate on the "middle_name" field.
func MiddleNameContainsFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContainsFold(FieldMiddleName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContainsFold(FieldLastName, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldGender, v))
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContains(FieldGender, v))
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasPrefix(FieldGender, v))
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasSuffix(FieldGender, v))
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEqualFold(FieldGender, v))
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContainsFold(FieldGender, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContainsFold(FieldAddress, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContainsFold(FieldPhone, v))
}

// PracticingStatusEQ applies the EQ predicate on the "practicing_status" field.
func PracticingStatusEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldPracticingStatus, v))
}

// PracticingStatusNEQ applies the NEQ predicate on the "practicing_status" field.
func PracticingStatusNEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldPracticingStatus, v))
}

// PracticingStatusIn applies the In predicate on the "practicing_status" field.
func PracticingStatusIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldPracticingStatus, vs...))
}

// PracticingStatusNotIn applies the NotIn predicate on the "practicing_status" field.
func PracticingStatusNotIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldPracticingStatus, vs...))
}

// PracticingStatusGT applies the GT predicate on the "practicing_status" field.
func PracticingStatusGT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldPracticingStatus, v))
}

// PracticingStatusGTE applies the GTE predicate on the "practicing_status" field.
func PracticingStatusGTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldPracticingStatus, v))
}

// PracticingStatusLT applies the LT predicate on the "practicing_status" field.
func PracticingStatusLT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldPracticingStatus, v))
}

// PracticingStatusLTE applies the LTE predicate on the "practicing_status" field.
func PracticingStatusLTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldPracticingStatus, v))
}

// PracticingStatusContains applies the Contains predicate on the "practicing_status" field.
func PracticingStatusContains(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContains(FieldPracticingStatus, v))
}

// PracticingStatusHasPrefix applies the HasPrefix predicate on the "practicing_status" field.
func PracticingStatusHasPrefix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasPrefix(FieldPracticingStatus, v))
}

// PracticingStatusHasSuffix applies the HasSuffix predicate on the "practicing_status" field.
func PracticingStatusHasSuffix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasSuffix(FieldPracticingStatus, v))
}

// PracticingStatusEqualFold applies the EqualFold predicate on the "practicing_status" field.
func PracticingStatusEqualFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEqualFold(FieldPracticingStatus, v))
}

// PracticingStatusContainsFold applies the ContainsFold predicate on the "practicing_status" field.
func PracticingStatusContainsFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContainsFold(FieldPracticingStatus, v))
}

// ProfileURLEQ applies the EQ predicate on the "profile_url" field.
func ProfileURLEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldProfileURL, v))
}

// ProfileURLNEQ applies the NEQ predicate on the "profile_url" field.
func ProfileURLNEQ(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldProfileURL, v))
}

// ProfileURLIn applies the In predicate on the "profile_url" field.
func ProfileURLIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldProfileURL, vs...))
}

// ProfileURLNotIn applies the NotIn predicate on the "profile_url" field.
func ProfileURLNotIn(vs ...string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldProfileURL, vs...))
}

// ProfileURLGT applies the GT predicate on the "profile_url" field.
func ProfileURLGT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldProfileURL, v))
}

// ProfileURLGTE applies the GTE predicate on the "profile_url" field.
func ProfileURLGTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldProfileURL, v))
}

// ProfileURLLT applies the LT predicate on the "profile_url" field.
func ProfileURLLT(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldProfileURL, v))
}

// ProfileURLLTE applies the LTE predicate on the "profile_url" field.
func ProfileURLLTE(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldProfileURL, v))
}

// ProfileURLContains applies the Contains predicate on the "profile_url" field.
func ProfileURLContains(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContains(FieldProfileURL, v))
}

// ProfileURLHasPrefix applies the HasPrefix predicate on the "profile_url" field.
func ProfileURLHasPrefix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasPrefix(FieldProfileURL, v))
}

// ProfileURLHasSuffix applies the HasSuffix predicate on the "profile_url" field.
func ProfileURLHasSuffix(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldHasSuffix(FieldProfileURL, v))
}

// ProfileURLEqualFold applies the EqualFold predicate on the "profile_url" field.
func ProfileURLEqualFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEqualFold(FieldProfileURL, v))
}

// ProfileURLContainsFold applies the ContainsFold predicate on the "profile_url" field.
func ProfileURLContainsFold(v string) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldContainsFold(FieldProfileURL, v))
}

// AverageRatingEQ applies the EQ predicate on the "average_rating" field.
func AverageRatingEQ(v float64) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldAverageRating, v))
}

// AverageRatingNEQ applies the NEQ predicate on the "average_rating" field.
func AverageRatingNEQ(v float64) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldAverageRating, v))
}

// AverageRatingIn applies the In predicate on the "average_rating" field.
func AverageRatingIn(vs ...float64) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldAverageRating, vs...))
}

// AverageRatingNotIn applies the NotIn predicate on the "average_rating" field.
func AverageRatingNotIn(vs ...float64) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldAverageRating, vs...))
}

// AverageRatingGT applies the GT predicate on the "average_rating" field.
func AverageRatingGT(v float64) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldAverageRating, v))
}

// AverageRatingGTE applies the GTE predicate on the "average_rating" field.
func AverageRatingGTE(v float64) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldAverageRating, v))
}

// AverageRatingLT applies the LT predicate on the "average_rating" field.
func AverageRatingLT(v float64) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldAverageRating, v))
}

// AverageRatingLTE applies the LTE predicate on the "average_rating" field.
func AverageRatingLTE(v float64) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldAverageRating, v))
}

// ReviewCountEQ applies the EQ predicate on the "review_count" field.
func ReviewCountEQ(v int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldEQ(FieldReviewCount, v))
}

// ReviewCountNEQ applies the NEQ predicate on the "review_count" field.
func ReviewCountNEQ(v int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNEQ(FieldReviewCount, v))
}

// ReviewCountIn applies the In predicate on the "review_count" field.
func ReviewCountIn(vs ...int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldIn(FieldReviewCount, vs...))
}

// ReviewCountNotIn applies the NotIn predicate on the "review_count" field.
func ReviewCountNotIn(vs ...int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldNotIn(FieldReviewCount, vs...))
}

// ReviewCountGT applies the GT predicate on the "review_count" field.
func ReviewCountGT(v int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGT(FieldReviewCount, v))
}

// ReviewCountGTE applies the GTE predicate on the "review_count" field.
func ReviewCountGTE(v int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldGTE(FieldReviewCount, v))
}

// ReviewCountLT applies the LT predicate on the "review_count" field.
func ReviewCountLT(v int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLT(FieldReviewCount, v))
}

// ReviewCountLTE applies the LTE predicate on the "review_count" field.
func ReviewCountLTE(v int) predicate.Lawyer {
	return predicate.Lawyer(sql.FieldLTE(FieldReviewCount, v))
}

// HasJurisdictions applies the HasEdge predicate on the "jurisdictions" edge.
func HasJurisdictions() predicate.Lawyer {
	return predicate.Lawyer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, JurisdictionsTable, JurisdictionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJurisdictionsWith applies the HasEdge predicate on the "jurisdictions" edge with a given conditions (other predicates).
func HasJurisdictionsWith(preds ...predicate.Jurisdiction) predicate.Lawyer {
	return predicate.Lawyer(func(s *sql.Selector) {
		step := newJurisdictionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDecisions applies the HasEdge predicate on the "decisions" edge.
func HasDecisions() predicate.Lawyer {
	return predicate.Lawyer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DecisionsTable, DecisionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDecisionsWith applies the HasEdge predicate on the "decisions" edge with a given conditions (other predicates).
func HasDecisionsWith(preds ...predicate.Decision) predicate.Lawyer {
	return predicate.Lawyer(func(s *sql.Selector) {
		step := newDecisionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviews applies the HasEdge predicate on the "reviews" edge.
func HasReviews() predicate.Lawyer {
	return predicate.Lawyer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewsWith applies the HasEdge predicate on the "reviews" edge with a given conditions (other predicates).
func HasReviewsWith(preds ...predicate.Review) predicate.Lawyer {
	return predicate.Lawyer(func(s *sql.Selector) {
		step := newReviewsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLawyerJurisdictions applies the HasEdge predicate on the "lawyer_jurisdictions" edge.
func HasLawyerJurisdictions() predicate.Lawyer {
	return predicate.Lawyer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, LawyerJurisdictionsTable, LawyerJurisdictionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLawyerJurisdictionsWith applies the HasEdge predicate on the "lawyer_jurisdictions" edge with a given conditions (other predicates).
func HasLawyerJurisdictionsWith(preds ...predicate.LawyerJurisdiction) predicate.Lawyer {
	return predicate.Lawyer(func(s *sql.Selector) {
		step := newLawyerJurisdictionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Lawyer) predicate.Lawyer {
	return predicate.Lawyer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Lawyer) predicate.Lawyer {
	return predicate.Lawyer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Lawyer) predicate.Lawyer {
	return predicate.Lawyer(sql.NotPredicates(p))
}
