// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/mvpmaterial"
	"github.com/mikestefanello/pagoda/ent/mvpplannedroute"
	"github.com/mikestefanello/pagoda/ent/mvpstaff"
	"github.com/mikestefanello/pagoda/ent/mvptruck"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// MvpPlannedRouteUpdate is the builder for updating MvpPlannedRoute entities.
type MvpPlannedRouteUpdate struct {
	config
	hooks    []Hook
	mutation *MvpPlannedRouteMutation
}

// Where appends a list predicates to the MvpPlannedRouteUpdate builder.
func (mpru *MvpPlannedRouteUpdate) Where(ps ...predicate.MvpPlannedRoute) *MvpPlannedRouteUpdate {
	mpru.mutation.Where(ps...)
	return mpru
}

// SetDate sets the "date" field.
func (mpru *MvpPlannedRouteUpdate) SetDate(t time.Time) *MvpPlannedRouteUpdate {
	mpru.mutation.SetDate(t)
	return mpru
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (mpru *MvpPlannedRouteUpdate) SetNillableDate(t *time.Time) *MvpPlannedRouteUpdate {
	if t != nil {
		mpru.SetDate(*t)
	}
	return mpru
}

// SetRouteName sets the "route_name" field.
func (mpru *MvpPlannedRouteUpdate) SetRouteName(s string) *MvpPlannedRouteUpdate {
	mpru.mutation.SetRouteName(s)
	return mpru
}

// SetNillableRouteName sets the "route_name" field if the given value is not nil.
func (mpru *MvpPlannedRouteUpdate) SetNillableRouteName(s *string) *MvpPlannedRouteUpdate {
	if s != nil {
		mpru.SetRouteName(*s)
	}
	return mpru
}

// SetStatus sets the "status" field.
func (mpru *MvpPlannedRouteUpdate) SetStatus(s string) *MvpPlannedRouteUpdate {
	mpru.mutation.SetStatus(s)
	return mpru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpru *MvpPlannedRouteUpdate) SetNillableStatus(s *string) *MvpPlannedRouteUpdate {
	if s != nil {
		mpru.SetStatus(*s)
	}
	return mpru
}

// AddTruckIDs adds the "trucks" edge to the MvpTruck entity by IDs.
func (mpru *MvpPlannedRouteUpdate) AddTruckIDs(ids ...int) *MvpPlannedRouteUpdate {
	mpru.mutation.AddTruckIDs(ids...)
	return mpru
}

// AddTrucks adds the "trucks" edges to the MvpTruck entity.
func (mpru *MvpPlannedRouteUpdate) AddTrucks(m ...*MvpTruck) *MvpPlannedRouteUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpru.AddTruckIDs(ids...)
}

// SetDriverID sets the "driver" edge to the MvpStaff entity by ID.
func (mpru *MvpPlannedRouteUpdate) SetDriverID(id int) *MvpPlannedRouteUpdate {
	mpru.mutation.SetDriverID(id)
	return mpru
}

// SetNillableDriverID sets the "driver" edge to the MvpStaff entity by ID if the given value is not nil.
func (mpru *MvpPlannedRouteUpdate) SetNillableDriverID(id *int) *MvpPlannedRouteUpdate {
	if id != nil {
		mpru = mpru.SetDriverID(*id)
	}
	return mpru
}

// SetDriver sets the "driver" edge to the MvpStaff entity.
func (mpru *MvpPlannedRouteUpdate) SetDriver(m *MvpStaff) *MvpPlannedRouteUpdate {
	return mpru.SetDriverID(m.ID)
}

// AddLoaderIDs adds the "loaders" edge to the MvpStaff entity by IDs.
func (mpru *MvpPlannedRouteUpdate) AddLoaderIDs(ids ...int) *MvpPlannedRouteUpdate {
	mpru.mutation.AddLoaderIDs(ids...)
	return mpru
}

// AddLoaders adds the "loaders" edges to the MvpStaff entity.
func (mpru *MvpPlannedRouteUpdate) AddLoaders(m ...*MvpStaff) *MvpPlannedRouteUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpru.AddLoaderIDs(ids...)
}

// AddMaterialIDs adds the "materials" edge to the MvpMaterial entity by IDs.
func (mpru *MvpPlannedRouteUpdate) AddMaterialIDs(ids ...int) *MvpPlannedRouteUpdate {
	mpru.mutation.AddMaterialIDs(ids...)
	return mpru
}

// AddMaterials adds the "materials" edges to the MvpMaterial entity.
func (mpru *MvpPlannedRouteUpdate) AddMaterials(m ...*MvpMaterial) *MvpPlannedRouteUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpru.AddMaterialIDs(ids...)
}

// Mutation returns the MvpPlannedRouteMutation object of the builder.
func (mpru *MvpPlannedRouteUpdate) Mutation() *MvpPlannedRouteMutation {
	return mpru.mutation
}

// ClearTrucks clears all "trucks" edges to the MvpTruck entity.
func (mpru *MvpPlannedRouteUpdate) ClearTrucks() *MvpPlannedRouteUpdate {
	mpru.mutation.ClearTrucks()
	return mpru
}

// RemoveTruckIDs removes the "trucks" edge to MvpTruck entities by IDs.
func (mpru *MvpPlannedRouteUpdate) RemoveTruckIDs(ids ...int) *MvpPlannedRouteUpdate {
	mpru.mutation.RemoveTruckIDs(ids...)
	return mpru
}

// RemoveTrucks removes "trucks" edges to MvpTruck entities.
func (mpru *MvpPlannedRouteUpdate) RemoveTrucks(m ...*MvpTruck) *MvpPlannedRouteUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpru.RemoveTruckIDs(ids...)
}

// ClearDriver clears the "driver" edge to the MvpStaff entity.
func (mpru *MvpPlannedRouteUpdate) ClearDriver() *MvpPlannedRouteUpdate {
	mpru.mutation.ClearDriver()
	return mpru
}

// ClearLoaders clears all "loaders" edges to the MvpStaff entity.
func (mpru *MvpPlannedRouteUpdate) ClearLoaders() *MvpPlannedRouteUpdate {
	mpru.mutation.ClearLoaders()
	return mpru
}

// RemoveLoaderIDs removes the "loaders" edge to MvpStaff entities by IDs.
func (mpru *MvpPlannedRouteUpdate) RemoveLoaderIDs(ids ...int) *MvpPlannedRouteUpdate {
	mpru.mutation.RemoveLoaderIDs(ids...)
	return mpru
}

// RemoveLoaders removes "loaders" edges to MvpStaff entities.
func (mpru *MvpPlannedRouteUpdate) RemoveLoaders(m ...*MvpStaff) *MvpPlannedRouteUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpru.RemoveLoaderIDs(ids...)
}

// ClearMaterials clears all "materials" edges to the MvpMaterial entity.
func (mpru *MvpPlannedRouteUpdate) ClearMaterials() *MvpPlannedRouteUpdate {
	mpru.mutation.ClearMaterials()
	return mpru
}

// RemoveMaterialIDs removes the "materials" edge to MvpMaterial entities by IDs.
func (mpru *MvpPlannedRouteUpdate) RemoveMaterialIDs(ids ...int) *MvpPlannedRouteUpdate {
	mpru.mutation.RemoveMaterialIDs(ids...)
	return mpru
}

// RemoveMaterials removes "materials" edges to MvpMaterial entities.
func (mpru *MvpPlannedRouteUpdate) RemoveMaterials(m ...*MvpMaterial) *MvpPlannedRouteUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpru.RemoveMaterialIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpru *MvpPlannedRouteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mpru.sqlSave, mpru.mutation, mpru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpru *MvpPlannedRouteUpdate) SaveX(ctx context.Context) int {
	affected, err := mpru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpru *MvpPlannedRouteUpdate) Exec(ctx context.Context) error {
	_, err := mpru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpru *MvpPlannedRouteUpdate) ExecX(ctx context.Context) {
	if err := mpru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpru *MvpPlannedRouteUpdate) check() error {
	if v, ok := mpru.mutation.Status(); ok {
		if err := mvpplannedroute.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MvpPlannedRoute.status": %w`, err)}
		}
	}
	return nil
}

func (mpru *MvpPlannedRouteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mpru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mvpplannedroute.Table, mvpplannedroute.Columns, sqlgraph.NewFieldSpec(mvpplannedroute.FieldID, field.TypeInt))
	if ps := mpru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpru.mutation.Date(); ok {
		_spec.SetField(mvpplannedroute.FieldDate, field.TypeTime, value)
	}
	if value, ok := mpru.mutation.RouteName(); ok {
		_spec.SetField(mvpplannedroute.FieldRouteName, field.TypeString, value)
	}
	if value, ok := mpru.mutation.Status(); ok {
		_spec.SetField(mvpplannedroute.FieldStatus, field.TypeString, value)
	}
	if mpru.mutation.TrucksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.TrucksTable,
			Columns: []string{mvpplannedroute.TrucksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvptruck.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpru.mutation.RemovedTrucksIDs(); len(nodes) > 0 && !mpru.mutation.TrucksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.TrucksTable,
			Columns: []string{mvpplannedroute.TrucksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvptruck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpru.mutation.TrucksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.TrucksTable,
			Columns: []string{mvpplannedroute.TrucksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvptruck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpru.mutation.DriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mvpplannedroute.DriverTable,
			Columns: []string{mvpplannedroute.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpru.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mvpplannedroute.DriverTable,
			Columns: []string{mvpplannedroute.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpru.mutation.LoadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.LoadersTable,
			Columns: []string{mvpplannedroute.LoadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpru.mutation.RemovedLoadersIDs(); len(nodes) > 0 && !mpru.mutation.LoadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.LoadersTable,
			Columns: []string{mvpplannedroute.LoadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpru.mutation.LoadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.LoadersTable,
			Columns: []string{mvpplannedroute.LoadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpru.mutation.MaterialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.MaterialsTable,
			Columns: []string{mvpplannedroute.MaterialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpmaterial.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpru.mutation.RemovedMaterialsIDs(); len(nodes) > 0 && !mpru.mutation.MaterialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.MaterialsTable,
			Columns: []string{mvpplannedroute.MaterialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpmaterial.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpru.mutation.MaterialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.MaterialsTable,
			Columns: []string{mvpplannedroute.MaterialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpmaterial.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mvpplannedroute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpru.mutation.done = true
	return n, nil
}

// MvpPlannedRouteUpdateOne is the builder for updating a single MvpPlannedRoute entity.
type MvpPlannedRouteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MvpPlannedRouteMutation
}

// SetDate sets the "date" field.
func (mpruo *MvpPlannedRouteUpdateOne) SetDate(t time.Time) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.SetDate(t)
	return mpruo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (mpruo *MvpPlannedRouteUpdateOne) SetNillableDate(t *time.Time) *MvpPlannedRouteUpdateOne {
	if t != nil {
		mpruo.SetDate(*t)
	}
	return mpruo
}

// SetRouteName sets the "route_name" field.
func (mpruo *MvpPlannedRouteUpdateOne) SetRouteName(s string) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.SetRouteName(s)
	return mpruo
}

// SetNillableRouteName sets the "route_name" field if the given value is not nil.
func (mpruo *MvpPlannedRouteUpdateOne) SetNillableRouteName(s *string) *MvpPlannedRouteUpdateOne {
	if s != nil {
		mpruo.SetRouteName(*s)
	}
	return mpruo
}

// SetStatus sets the "status" field.
func (mpruo *MvpPlannedRouteUpdateOne) SetStatus(s string) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.SetStatus(s)
	return mpruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpruo *MvpPlannedRouteUpdateOne) SetNillableStatus(s *string) *MvpPlannedRouteUpdateOne {
	if s != nil {
		mpruo.SetStatus(*s)
	}
	return mpruo
}

// AddTruckIDs adds the "trucks" edge to the MvpTruck entity by IDs.
func (mpruo *MvpPlannedRouteUpdateOne) AddTruckIDs(ids ...int) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.AddTruckIDs(ids...)
	return mpruo
}

// AddTrucks adds the "trucks" edges to the MvpTruck entity.
func (mpruo *MvpPlannedRouteUpdateOne) AddTrucks(m ...*MvpTruck) *MvpPlannedRouteUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpruo.AddTruckIDs(ids...)
}

// SetDriverID sets the "driver" edge to the MvpStaff entity by ID.
func (mpruo *MvpPlannedRouteUpdateOne) SetDriverID(id int) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.SetDriverID(id)
	return mpruo
}

// SetNillableDriverID sets the "driver" edge to the MvpStaff entity by ID if the given value is not nil.
func (mpruo *MvpPlannedRouteUpdateOne) SetNillableDriverID(id *int) *MvpPlannedRouteUpdateOne {
	if id != nil {
		mpruo = mpruo.SetDriverID(*id)
	}
	return mpruo
}

// SetDriver sets the "driver" edge to the MvpStaff entity.
func (mpruo *MvpPlannedRouteUpdateOne) SetDriver(m *MvpStaff) *MvpPlannedRouteUpdateOne {
	return mpruo.SetDriverID(m.ID)
}

// AddLoaderIDs adds the "loaders" edge to the MvpStaff entity by IDs.
func (mpruo *MvpPlannedRouteUpdateOne) AddLoaderIDs(ids ...int) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.AddLoaderIDs(ids...)
	return mpruo
}

// AddLoaders adds the "loaders" edges to the MvpStaff entity.
func (mpruo *MvpPlannedRouteUpdateOne) AddLoaders(m ...*MvpStaff) *MvpPlannedRouteUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpruo.AddLoaderIDs(ids...)
}

// AddMaterialIDs adds the "materials" edge to the MvpMaterial entity by IDs.
func (mpruo *MvpPlannedRouteUpdateOne) AddMaterialIDs(ids ...int) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.AddMaterialIDs(ids...)
	return mpruo
}

// AddMaterials adds the "materials" edges to the MvpMaterial entity.
func (mpruo *MvpPlannedRouteUpdateOne) AddMaterials(m ...*MvpMaterial) *MvpPlannedRouteUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpruo.AddMaterialIDs(ids...)
}

// Mutation returns the MvpPlannedRouteMutation object of the builder.
func (mpruo *MvpPlannedRouteUpdateOne) Mutation() *MvpPlannedRouteMutation {
	return mpruo.mutation
}

// ClearTrucks clears all "trucks" edges to the MvpTruck entity.
func (mpruo *MvpPlannedRouteUpdateOne) ClearTrucks() *MvpPlannedRouteUpdateOne {
	mpruo.mutation.ClearTrucks()
	return mpruo
}

// RemoveTruckIDs removes the "trucks" edge to MvpTruck entities by IDs.
func (mpruo *MvpPlannedRouteUpdateOne) RemoveTruckIDs(ids ...int) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.RemoveTruckIDs(ids...)
	return mpruo
}

// RemoveTrucks removes "trucks" edges to MvpTruck entities.
func (mpruo *MvpPlannedRouteUpdateOne) RemoveTrucks(m ...*MvpTruck) *MvpPlannedRouteUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpruo.RemoveTruckIDs(ids...)
}

// ClearDriver clears the "driver" edge to the MvpStaff entity.
func (mpruo *MvpPlannedRouteUpdateOne) ClearDriver() *MvpPlannedRouteUpdateOne {
	mpruo.mutation.ClearDriver()
	return mpruo
}

// ClearLoaders clears all "loaders" edges to the MvpStaff entity.
func (mpruo *MvpPlannedRouteUpdateOne) ClearLoaders() *MvpPlannedRouteUpdateOne {
	mpruo.mutation.ClearLoaders()
	return mpruo
}

// RemoveLoaderIDs removes the "loaders" edge to MvpStaff entities by IDs.
func (mpruo *MvpPlannedRouteUpdateOne) RemoveLoaderIDs(ids ...int) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.RemoveLoaderIDs(ids...)
	return mpruo
}

// RemoveLoaders removes "loaders" edges to MvpStaff entities.
func (mpruo *MvpPlannedRouteUpdateOne) RemoveLoaders(m ...*MvpStaff) *MvpPlannedRouteUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpruo.RemoveLoaderIDs(ids...)
}

// ClearMaterials clears all "materials" edges to the MvpMaterial entity.
func (mpruo *MvpPlannedRouteUpdateOne) ClearMaterials() *MvpPlannedRouteUpdateOne {
	mpruo.mutation.ClearMaterials()
	return mpruo
}

// RemoveMaterialIDs removes the "materials" edge to MvpMaterial entities by IDs.
func (mpruo *MvpPlannedRouteUpdateOne) RemoveMaterialIDs(ids ...int) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.RemoveMaterialIDs(ids...)
	return mpruo
}

// RemoveMaterials removes "materials" edges to MvpMaterial entities.
func (mpruo *MvpPlannedRouteUpdateOne) RemoveMaterials(m ...*MvpMaterial) *MvpPlannedRouteUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpruo.RemoveMaterialIDs(ids...)
}

// Where appends a list predicates to the MvpPlannedRouteUpdate builder.
func (mpruo *MvpPlannedRouteUpdateOne) Where(ps ...predicate.MvpPlannedRoute) *MvpPlannedRouteUpdateOne {
	mpruo.mutation.Where(ps...)
	return mpruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpruo *MvpPlannedRouteUpdateOne) Select(field string, fields ...string) *MvpPlannedRouteUpdateOne {
	mpruo.fields = append([]string{field}, fields...)
	return mpruo
}

// Save executes the query and returns the updated MvpPlannedRoute entity.
func (mpruo *MvpPlannedRouteUpdateOne) Save(ctx context.Context) (*MvpPlannedRoute, error) {
	return withHooks(ctx, mpruo.sqlSave, mpruo.mutation, mpruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpruo *MvpPlannedRouteUpdateOne) SaveX(ctx context.Context) *MvpPlannedRoute {
	node, err := mpruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpruo *MvpPlannedRouteUpdateOne) Exec(ctx context.Context) error {
	_, err := mpruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpruo *MvpPlannedRouteUpdateOne) ExecX(ctx context.Context) {
	if err := mpruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpruo *MvpPlannedRouteUpdateOne) check() error {
	if v, ok := mpruo.mutation.Status(); ok {
		if err := mvpplannedroute.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MvpPlannedRoute.status": %w`, err)}
		}
	}
	return nil
}

func (mpruo *MvpPlannedRouteUpdateOne) sqlSave(ctx context.Context) (_node *MvpPlannedRoute, err error) {
	if err := mpruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mvpplannedroute.Table, mvpplannedroute.Columns, sqlgraph.NewFieldSpec(mvpplannedroute.FieldID, field.TypeInt))
	id, ok := mpruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MvpPlannedRoute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mvpplannedroute.FieldID)
		for _, f := range fields {
			if !mvpplannedroute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mvpplannedroute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpruo.mutation.Date(); ok {
		_spec.SetField(mvpplannedroute.FieldDate, field.TypeTime, value)
	}
	if value, ok := mpruo.mutation.RouteName(); ok {
		_spec.SetField(mvpplannedroute.FieldRouteName, field.TypeString, value)
	}
	if value, ok := mpruo.mutation.Status(); ok {
		_spec.SetField(mvpplannedroute.FieldStatus, field.TypeString, value)
	}
	if mpruo.mutation.TrucksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.TrucksTable,
			Columns: []string{mvpplannedroute.TrucksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvptruck.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpruo.mutation.RemovedTrucksIDs(); len(nodes) > 0 && !mpruo.mutation.TrucksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.TrucksTable,
			Columns: []string{mvpplannedroute.TrucksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvptruck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpruo.mutation.TrucksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.TrucksTable,
			Columns: []string{mvpplannedroute.TrucksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvptruck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpruo.mutation.DriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mvpplannedroute.DriverTable,
			Columns: []string{mvpplannedroute.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpruo.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mvpplannedroute.DriverTable,
			Columns: []string{mvpplannedroute.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpruo.mutation.LoadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.LoadersTable,
			Columns: []string{mvpplannedroute.LoadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpruo.mutation.RemovedLoadersIDs(); len(nodes) > 0 && !mpruo.mutation.LoadersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.LoadersTable,
			Columns: []string{mvpplannedroute.LoadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpruo.mutation.LoadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.LoadersTable,
			Columns: []string{mvpplannedroute.LoadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpruo.mutation.MaterialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.MaterialsTable,
			Columns: []string{mvpplannedroute.MaterialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpmaterial.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpruo.mutation.RemovedMaterialsIDs(); len(nodes) > 0 && !mpruo.mutation.MaterialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.MaterialsTable,
			Columns: []string{mvpplannedroute.MaterialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpmaterial.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpruo.mutation.MaterialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.MaterialsTable,
			Columns: []string{mvpplannedroute.MaterialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpmaterial.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MvpPlannedRoute{config: mpruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mvpplannedroute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpruo.mutation.done = true
	return _node, nil
}
