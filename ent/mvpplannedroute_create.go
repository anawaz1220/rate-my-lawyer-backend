// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/mvpmaterial"
	"github.com/mikestefanello/pagoda/ent/mvpplannedroute"
	"github.com/mikestefanello/pagoda/ent/mvpstaff"
	"github.com/mikestefanello/pagoda/ent/mvptruck"
)

// MvpPlannedRouteCreate is the builder for creating a MvpPlannedRoute entity.
type MvpPlannedRouteCreate struct {
	config
	mutation *MvpPlannedRouteMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (mprc *MvpPlannedRouteCreate) SetDate(t time.Time) *MvpPlannedRouteCreate {
	mprc.mutation.SetDate(t)
	return mprc
}

// SetRouteName sets the "route_name" field.
func (mprc *MvpPlannedRouteCreate) SetRouteName(s string) *MvpPlannedRouteCreate {
	mprc.mutation.SetRouteName(s)
	return mprc
}

// SetStatus sets the "status" field.
func (mprc *MvpPlannedRouteCreate) SetStatus(s string) *MvpPlannedRouteCreate {
	mprc.mutation.SetStatus(s)
	return mprc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mprc *MvpPlannedRouteCreate) SetNillableStatus(s *string) *MvpPlannedRouteCreate {
	if s != nil {
		mprc.SetStatus(*s)
	}
	return mprc
}

// AddTruckIDs adds the "trucks" edge to the MvpTruck entity by IDs.
func (mprc *MvpPlannedRouteCreate) AddTruckIDs(ids ...int) *MvpPlannedRouteCreate {
	mprc.mutation.AddTruckIDs(ids...)
	return mprc
}

// AddTrucks adds the "trucks" edges to the MvpTruck entity.
func (mprc *MvpPlannedRouteCreate) AddTrucks(m ...*MvpTruck) *MvpPlannedRouteCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mprc.AddTruckIDs(ids...)
}

// SetDriverID sets the "driver" edge to the MvpStaff entity by ID.
func (mprc *MvpPlannedRouteCreate) SetDriverID(id int) *MvpPlannedRouteCreate {
	mprc.mutation.SetDriverID(id)
	return mprc
}

// SetNillableDriverID sets the "driver" edge to the MvpStaff entity by ID if the given value is not nil.
func (mprc *MvpPlannedRouteCreate) SetNillableDriverID(id *int) *MvpPlannedRouteCreate {
	if id != nil {
		mprc = mprc.SetDriverID(*id)
	}
	return mprc
}

// SetDriver sets the "driver" edge to the MvpStaff entity.
func (mprc *MvpPlannedRouteCreate) SetDriver(m *MvpStaff) *MvpPlannedRouteCreate {
	return mprc.SetDriverID(m.ID)
}

// AddLoaderIDs adds the "loaders" edge to the MvpStaff entity by IDs.
func (mprc *MvpPlannedRouteCreate) AddLoaderIDs(ids ...int) *MvpPlannedRouteCreate {
	mprc.mutation.AddLoaderIDs(ids...)
	return mprc
}

// AddLoaders adds the "loaders" edges to the MvpStaff entity.
func (mprc *MvpPlannedRouteCreate) AddLoaders(m ...*MvpStaff) *MvpPlannedRouteCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mprc.AddLoaderIDs(ids...)
}

// AddMaterialIDs adds the "materials" edge to the MvpMaterial entity by IDs.
func (mprc *MvpPlannedRouteCreate) AddMaterialIDs(ids ...int) *MvpPlannedRouteCreate {
	mprc.mutation.AddMaterialIDs(ids...)
	return mprc
}

// AddMaterials adds the "materials" edges to the MvpMaterial entity.
func (mprc *MvpPlannedRouteCreate) AddMaterials(m ...*MvpMaterial) *MvpPlannedRouteCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mprc.AddMaterialIDs(ids...)
}

// Mutation returns the MvpPlannedRouteMutation object of the builder.
func (mprc *MvpPlannedRouteCreate) Mutation() *MvpPlannedRouteMutation {
	return mprc.mutation
}

// Save creates the MvpPlannedRoute in the database.
func (mprc *MvpPlannedRouteCreate) Save(ctx context.Context) (*MvpPlannedRoute, error) {
	mprc.defaults()
	return withHooks(ctx, mprc.sqlSave, mprc.mutation, mprc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mprc *MvpPlannedRouteCreate) SaveX(ctx context.Context) *MvpPlannedRoute {
	v, err := mprc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mprc *MvpPlannedRouteCreate) Exec(ctx context.Context) error {
	_, err := mprc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mprc *MvpPlannedRouteCreate) ExecX(ctx context.Context) {
	if err := mprc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mprc *MvpPlannedRouteCreate) defaults() {
	if _, ok := mprc.mutation.Status(); !ok {
		v := mvpplannedroute.DefaultStatus
		mprc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mprc *MvpPlannedRouteCreate) check() error {
	if _, ok := mprc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "MvpPlannedRoute.date"`)}
	}
	if _, ok := mprc.mutation.RouteName(); !ok {
		return &ValidationError{Name: "route_name", err: errors.New(`ent: missing required field "MvpPlannedRoute.route_name"`)}
	}
	if _, ok := mprc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "MvpPlannedRoute.status"`)}
	}
	if v, ok := mprc.mutation.Status(); ok {
		if err := mvpplannedroute.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MvpPlannedRoute.status": %w`, err)}
		}
	}
	return nil
}

func (mprc *MvpPlannedRouteCreate) sqlSave(ctx context.Context) (*MvpPlannedRoute, error) {
	if err := mprc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mprc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mprc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mprc.mutation.id = &_node.ID
	mprc.mutation.done = true
	return _node, nil
}

func (mprc *MvpPlannedRouteCreate) createSpec() (*MvpPlannedRoute, *sqlgraph.CreateSpec) {
	var (
		_node = &MvpPlannedRoute{config: mprc.config}
		_spec = sqlgraph.NewCreateSpec(mvpplannedroute.Table, sqlgraph.NewFieldSpec(mvpplannedroute.FieldID, field.TypeInt))
	)
	if value, ok := mprc.mutation.Date(); ok {
		_spec.SetField(mvpplannedroute.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := mprc.mutation.RouteName(); ok {
		_spec.SetField(mvpplannedroute.FieldRouteName, field.TypeString, value)
		_node.RouteName = value
	}
	if value, ok := mprc.mutation.Status(); ok {
		_spec.SetField(mvpplannedroute.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if nodes := mprc.mutation.TrucksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.TrucksTable,
			Columns: []string{mvpplannedroute.TrucksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvptruck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mprc.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   mvpplannedroute.DriverTable,
			Columns: []string{mvpplannedroute.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mvp_planned_route_driver = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mprc.mutation.LoadersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.LoadersTable,
			Columns: []string{mvpplannedroute.LoadersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpstaff.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mprc.mutation.MaterialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mvpplannedroute.MaterialsTable,
			Columns: []string{mvpplannedroute.MaterialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mvpmaterial.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MvpPlannedRouteCreateBulk is the builder for creating many MvpPlannedRoute entities in bulk.
type MvpPlannedRouteCreateBulk struct {
	config
	err      error
	builders []*MvpPlannedRouteCreate
}

// Save creates the MvpPlannedRoute entities in the database.
func (mprcb *MvpPlannedRouteCreateBulk) Save(ctx context.Context) ([]*MvpPlannedRoute, error) {
	if mprcb.err != nil {
		return nil, mprcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mprcb.builders))
	nodes := make([]*MvpPlannedRoute, len(mprcb.builders))
	mutators := make([]Mutator, len(mprcb.builders))
	for i := range mprcb.builders {
		func(i int, root context.Context) {
			builder := mprcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MvpPlannedRouteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mprcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mprcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mprcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mprcb *MvpPlannedRouteCreateBulk) SaveX(ctx context.Context) []*MvpPlannedRoute {
	v, err := mprcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mprcb *MvpPlannedRouteCreateBulk) Exec(ctx context.Context) error {
	_, err := mprcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mprcb *MvpPlannedRouteCreateBulk) ExecX(ctx context.Context) {
	if err := mprcb.Exec(ctx); err != nil {
		panic(err)
	}
}
