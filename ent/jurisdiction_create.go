// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/jurisdiction"
	"github.com/mikestefanello/pagoda/ent/lawyer"
	"github.com/mikestefanello/pagoda/ent/lawyerjurisdiction"
)

// JurisdictionCreate is the builder for creating a Jurisdiction entity.
type JurisdictionCreate struct {
	config
	mutation *JurisdictionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (jc *JurisdictionCreate) SetName(s string) *JurisdictionCreate {
	jc.mutation.SetName(s)
	return jc
}

// AddLawyerIDs adds the "lawyers" edge to the Lawyer entity by IDs.
func (jc *JurisdictionCreate) AddLawyerIDs(ids ...int) *JurisdictionCreate {
	jc.mutation.AddLawyerIDs(ids...)
	return jc
}

// AddLawyers adds the "lawyers" edges to the Lawyer entity.
func (jc *JurisdictionCreate) AddLawyers(l ...*Lawyer) *JurisdictionCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return jc.AddLawyerIDs(ids...)
}

// AddLawyerJurisdictionIDs adds the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity by IDs.
func (jc *JurisdictionCreate) AddLawyerJurisdictionIDs(ids ...int) *JurisdictionCreate {
	jc.mutation.AddLawyerJurisdictionIDs(ids...)
	return jc
}

// AddLawyerJurisdictions adds the "lawyer_jurisdictions" edges to the LawyerJurisdiction entity.
func (jc *JurisdictionCreate) AddLawyerJurisdictions(l ...*LawyerJurisdiction) *JurisdictionCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return jc.AddLawyerJurisdictionIDs(ids...)
}

// Mutation returns the JurisdictionMutation object of the builder.
func (jc *JurisdictionCreate) Mutation() *JurisdictionMutation {
	return jc.mutation
}

// Save creates the Jurisdiction in the database.
func (jc *JurisdictionCreate) Save(ctx context.Context) (*Jurisdiction, error) {
	return withHooks(ctx, jc.sqlSave, jc.mutation, jc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JurisdictionCreate) SaveX(ctx context.Context) *Jurisdiction {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JurisdictionCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JurisdictionCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JurisdictionCreate) check() error {
	if _, ok := jc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Jurisdiction.name"`)}
	}
	return nil
}

func (jc *JurisdictionCreate) sqlSave(ctx context.Context) (*Jurisdiction, error) {
	if err := jc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	jc.mutation.id = &_node.ID
	jc.mutation.done = true
	return _node, nil
}

func (jc *JurisdictionCreate) createSpec() (*Jurisdiction, *sqlgraph.CreateSpec) {
	var (
		_node = &Jurisdiction{config: jc.config}
		_spec = sqlgraph.NewCreateSpec(jurisdiction.Table, sqlgraph.NewFieldSpec(jurisdiction.FieldID, field.TypeInt))
	)
	if value, ok := jc.mutation.Name(); ok {
		_spec.SetField(jurisdiction.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := jc.mutation.LawyersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   jurisdiction.LawyersTable,
			Columns: jurisdiction.LawyersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lawyer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.LawyerJurisdictionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   jurisdiction.LawyerJurisdictionsTable,
			Columns: []string{jurisdiction.LawyerJurisdictionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lawyerjurisdiction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JurisdictionCreateBulk is the builder for creating many Jurisdiction entities in bulk.
type JurisdictionCreateBulk struct {
	config
	err      error
	builders []*JurisdictionCreate
}

// Save creates the Jurisdiction entities in the database.
func (jcb *JurisdictionCreateBulk) Save(ctx context.Context) ([]*Jurisdiction, error) {
	if jcb.err != nil {
		return nil, jcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Jurisdiction, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JurisdictionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JurisdictionCreateBulk) SaveX(ctx context.Context) []*Jurisdiction {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JurisdictionCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JurisdictionCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}
