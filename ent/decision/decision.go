// Code generated by ent, DO NOT EDIT.

package decision

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the decision type in the database.
	Label = "decision"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// EdgeLawyer holds the string denoting the lawyer edge name in mutations.
	EdgeLawyer = "lawyer"
	// Table holds the table name of the decision in the database.
	Table = "decisions"
	// LawyerTable is the table that holds the lawyer relation/edge.
	LawyerTable = "decisions"
	// LawyerInverseTable is the table name for the Lawyer entity.
	// It exists in this package in order to avoid circular dependency with the "lawyer" package.
	LawyerInverseTable = "lawyers"
	// LawyerColumn is the table column denoting the lawyer relation/edge.
	LawyerColumn = "lawyer_decisions"
)

// Columns holds all SQL columns for decision fields.
var Columns = []string{
	FieldID,
	FieldURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "decisions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"lawyer_decisions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
)

// OrderOption defines the ordering options for the Decision queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByLawyerField orders the results by lawyer field.
func ByLawyerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLawyerStep(), sql.OrderByField(field, opts...))
	}
}
func newLawyerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LawyerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LawyerTable, LawyerColumn),
	)
}
