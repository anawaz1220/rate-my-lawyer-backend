// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/decision"
	"github.com/mikestefanello/pagoda/ent/jurisdiction"
	"github.com/mikestefanello/pagoda/ent/lawyer"
	"github.com/mikestefanello/pagoda/ent/lawyerjurisdiction"
	"github.com/mikestefanello/pagoda/ent/predicate"
	"github.com/mikestefanello/pagoda/ent/review"
)

// LawyerUpdate is the builder for updating Lawyer entities.
type LawyerUpdate struct {
	config
	hooks    []Hook
	mutation *LawyerMutation
}

// Where appends a list predicates to the LawyerUpdate builder.
func (lu *LawyerUpdate) Where(ps ...predicate.Lawyer) *LawyerUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetFullName sets the "full_name" field.
func (lu *LawyerUpdate) SetFullName(s string) *LawyerUpdate {
	lu.mutation.SetFullName(s)
	return lu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillableFullName(s *string) *LawyerUpdate {
	if s != nil {
		lu.SetFullName(*s)
	}
	return lu
}

// SetFirstName sets the "first_name" field.
func (lu *LawyerUpdate) SetFirstName(s string) *LawyerUpdate {
	lu.mutation.SetFirstName(s)
	return lu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillableFirstName(s *string) *LawyerUpdate {
	if s != nil {
		lu.SetFirstName(*s)
	}
	return lu
}

// SetMiddleName sets the "middle_name" field.
func (lu *LawyerUpdate) SetMiddleName(s string) *LawyerUpdate {
	lu.mutation.SetMiddleName(s)
	return lu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillableMiddleName(s *string) *LawyerUpdate {
	if s != nil {
		lu.SetMiddleName(*s)
	}
	return lu
}

// SetLastName sets the "last_name" field.
func (lu *LawyerUpdate) SetLastName(s string) *LawyerUpdate {
	lu.mutation.SetLastName(s)
	return lu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillableLastName(s *string) *LawyerUpdate {
	if s != nil {
		lu.SetLastName(*s)
	}
	return lu
}

// SetGender sets the "gender" field.
func (lu *LawyerUpdate) SetGender(s string) *LawyerUpdate {
	lu.mutation.SetGender(s)
	return lu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillableGender(s *string) *LawyerUpdate {
	if s != nil {
		lu.SetGender(*s)
	}
	return lu
}

// SetAddress sets the "address" field.
func (lu *LawyerUpdate) SetAddress(s string) *LawyerUpdate {
	lu.mutation.SetAddress(s)
	return lu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillableAddress(s *string) *LawyerUpdate {
	if s != nil {
		lu.SetAddress(*s)
	}
	return lu
}

// SetPhone sets the "phone" field.
func (lu *LawyerUpdate) SetPhone(s string) *LawyerUpdate {
	lu.mutation.SetPhone(s)
	return lu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillablePhone(s *string) *LawyerUpdate {
	if s != nil {
		lu.SetPhone(*s)
	}
	return lu
}

// SetPracticingStatus sets the "practicing_status" field.
func (lu *LawyerUpdate) SetPracticingStatus(s string) *LawyerUpdate {
	lu.mutation.SetPracticingStatus(s)
	return lu
}

// SetNillablePracticingStatus sets the "practicing_status" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillablePracticingStatus(s *string) *LawyerUpdate {
	if s != nil {
		lu.SetPracticingStatus(*s)
	}
	return lu
}

// SetProfileURL sets the "profile_url" field.
func (lu *LawyerUpdate) SetProfileURL(s string) *LawyerUpdate {
	lu.mutation.SetProfileURL(s)
	return lu
}

// SetNillableProfileURL sets the "profile_url" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillableProfileURL(s *string) *LawyerUpdate {
	if s != nil {
		lu.SetProfileURL(*s)
	}
	return lu
}

// SetAverageRating sets the "average_rating" field.
func (lu *LawyerUpdate) SetAverageRating(f float64) *LawyerUpdate {
	lu.mutation.ResetAverageRating()
	lu.mutation.SetAverageRating(f)
	return lu
}

// SetNillableAverageRating sets the "average_rating" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillableAverageRating(f *float64) *LawyerUpdate {
	if f != nil {
		lu.SetAverageRating(*f)
	}
	return lu
}

// AddAverageRating adds f to the "average_rating" field.
func (lu *LawyerUpdate) AddAverageRating(f float64) *LawyerUpdate {
	lu.mutation.AddAverageRating(f)
	return lu
}

// SetReviewCount sets the "review_count" field.
func (lu *LawyerUpdate) SetReviewCount(i int) *LawyerUpdate {
	lu.mutation.ResetReviewCount()
	lu.mutation.SetReviewCount(i)
	return lu
}

// SetNillableReviewCount sets the "review_count" field if the given value is not nil.
func (lu *LawyerUpdate) SetNillableReviewCount(i *int) *LawyerUpdate {
	if i != nil {
		lu.SetReviewCount(*i)
	}
	return lu
}

// AddReviewCount adds i to the "review_count" field.
func (lu *LawyerUpdate) AddReviewCount(i int) *LawyerUpdate {
	lu.mutation.AddReviewCount(i)
	return lu
}

// AddJurisdictionIDs adds the "jurisdictions" edge to the Jurisdiction entity by IDs.
func (lu *LawyerUpdate) AddJurisdictionIDs(ids ...int) *LawyerUpdate {
	lu.mutation.AddJurisdictionIDs(ids...)
	return lu
}

// AddJurisdictions adds the "jurisdictions" edges to the Jurisdiction entity.
func (lu *LawyerUpdate) AddJurisdictions(j ...*Jurisdiction) *LawyerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return lu.AddJurisdictionIDs(ids...)
}

// AddDecisionIDs adds the "decisions" edge to the Decision entity by IDs.
func (lu *LawyerUpdate) AddDecisionIDs(ids ...int) *LawyerUpdate {
	lu.mutation.AddDecisionIDs(ids...)
	return lu
}

// AddDecisions adds the "decisions" edges to the Decision entity.
func (lu *LawyerUpdate) AddDecisions(d ...*Decision) *LawyerUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return lu.AddDecisionIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (lu *LawyerUpdate) AddReviewIDs(ids ...int) *LawyerUpdate {
	lu.mutation.AddReviewIDs(ids...)
	return lu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (lu *LawyerUpdate) AddReviews(r ...*Review) *LawyerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lu.AddReviewIDs(ids...)
}

// AddLawyerJurisdictionIDs adds the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity by IDs.
func (lu *LawyerUpdate) AddLawyerJurisdictionIDs(ids ...int) *LawyerUpdate {
	lu.mutation.AddLawyerJurisdictionIDs(ids...)
	return lu
}

// AddLawyerJurisdictions adds the "lawyer_jurisdictions" edges to the LawyerJurisdiction entity.
func (lu *LawyerUpdate) AddLawyerJurisdictions(l ...*LawyerJurisdiction) *LawyerUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddLawyerJurisdictionIDs(ids...)
}

// Mutation returns the LawyerMutation object of the builder.
func (lu *LawyerUpdate) Mutation() *LawyerMutation {
	return lu.mutation
}

// ClearJurisdictions clears all "jurisdictions" edges to the Jurisdiction entity.
func (lu *LawyerUpdate) ClearJurisdictions() *LawyerUpdate {
	lu.mutation.ClearJurisdictions()
	return lu
}

// RemoveJurisdictionIDs removes the "jurisdictions" edge to Jurisdiction entities by IDs.
func (lu *LawyerUpdate) RemoveJurisdictionIDs(ids ...int) *LawyerUpdate {
	lu.mutation.RemoveJurisdictionIDs(ids...)
	return lu
}

// RemoveJurisdictions removes "jurisdictions" edges to Jurisdiction entities.
func (lu *LawyerUpdate) RemoveJurisdictions(j ...*Jurisdiction) *LawyerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return lu.RemoveJurisdictionIDs(ids...)
}

// ClearDecisions clears all "decisions" edges to the Decision entity.
func (lu *LawyerUpdate) ClearDecisions() *LawyerUpdate {
	lu.mutation.ClearDecisions()
	return lu
}

// RemoveDecisionIDs removes the "decisions" edge to Decision entities by IDs.
func (lu *LawyerUpdate) RemoveDecisionIDs(ids ...int) *LawyerUpdate {
	lu.mutation.RemoveDecisionIDs(ids...)
	return lu
}

// RemoveDecisions removes "decisions" edges to Decision entities.
func (lu *LawyerUpdate) RemoveDecisions(d ...*Decision) *LawyerUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return lu.RemoveDecisionIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (lu *LawyerUpdate) ClearReviews() *LawyerUpdate {
	lu.mutation.ClearReviews()
	return lu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (lu *LawyerUpdate) RemoveReviewIDs(ids ...int) *LawyerUpdate {
	lu.mutation.RemoveReviewIDs(ids...)
	return lu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (lu *LawyerUpdate) RemoveReviews(r ...*Review) *LawyerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lu.RemoveReviewIDs(ids...)
}

// ClearLawyerJurisdictions clears all "lawyer_jurisdictions" edges to the LawyerJurisdiction entity.
func (lu *LawyerUpdate) ClearLawyerJurisdictions() *LawyerUpdate {
	lu.mutation.ClearLawyerJurisdictions()
	return lu
}

// RemoveLawyerJurisdictionIDs removes the "lawyer_jurisdictions" edge to LawyerJurisdiction entities by IDs.
func (lu *LawyerUpdate) RemoveLawyerJurisdictionIDs(ids ...int) *LawyerUpdate {
	lu.mutation.RemoveLawyerJurisdictionIDs(ids...)
	return lu
}

// RemoveLawyerJurisdictions removes "lawyer_jurisdictions" edges to LawyerJurisdiction entities.
func (lu *LawyerUpdate) RemoveLawyerJurisdictions(l ...*LawyerJurisdiction) *LawyerUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveLawyerJurisdictionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LawyerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LawyerUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LawyerUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LawyerUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LawyerUpdate) check() error {
	if v, ok := lu.mutation.FullName(); ok {
		if err := lawyer.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Lawyer.full_name": %w`, err)}
		}
	}
	return nil
}

func (lu *LawyerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lawyer.Table, lawyer.Columns, sqlgraph.NewFieldSpec(lawyer.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.FullName(); ok {
		_spec.SetField(lawyer.FieldFullName, field.TypeString, value)
	}
	if value, ok := lu.mutation.FirstName(); ok {
		_spec.SetField(lawyer.FieldFirstName, field.TypeString, value)
	}
	if value, ok := lu.mutation.MiddleName(); ok {
		_spec.SetField(lawyer.FieldMiddleName, field.TypeString, value)
	}
	if value, ok := lu.mutation.LastName(); ok {
		_spec.SetField(lawyer.FieldLastName, field.TypeString, value)
	}
	if value, ok := lu.mutation.Gender(); ok {
		_spec.SetField(lawyer.FieldGender, field.TypeString, value)
	}
	if value, ok := lu.mutation.Address(); ok {
		_spec.SetField(lawyer.FieldAddress, field.TypeString, value)
	}
	if value, ok := lu.mutation.Phone(); ok {
		_spec.SetField(lawyer.FieldPhone, field.TypeString, value)
	}
	if value, ok := lu.mutation.PracticingStatus(); ok {
		_spec.SetField(lawyer.FieldPracticingStatus, field.TypeString, value)
	}
	if value, ok := lu.mutation.ProfileURL(); ok {
		_spec.SetField(lawyer.FieldProfileURL, field.TypeString, value)
	}
	if value, ok := lu.mutation.AverageRating(); ok {
		_spec.SetField(lawyer.FieldAverageRating, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedAverageRating(); ok {
		_spec.AddField(lawyer.FieldAverageRating, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.ReviewCount(); ok {
		_spec.SetField(lawyer.FieldReviewCount, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedReviewCount(); ok {
		_spec.AddField(lawyer.FieldReviewCount, field.TypeInt, value)
	}
	if lu.mutation.JurisdictionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lawyer.JurisdictionsTable,
			Columns: lawyer.JurisdictionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jurisdiction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedJurisdictionsIDs(); len(nodes) > 0 && !lu.mutation.JurisdictionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lawyer.JurisdictionsTable,
			Columns: lawyer.JurisdictionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jurisdiction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.JurisdictionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lawyer.JurisdictionsTable,
			Columns: lawyer.JurisdictionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jurisdiction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.DecisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.DecisionsTable,
			Columns: []string{lawyer.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decision.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedDecisionsIDs(); len(nodes) > 0 && !lu.mutation.DecisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.DecisionsTable,
			Columns: []string{lawyer.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decision.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.DecisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.DecisionsTable,
			Columns: []string{lawyer.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decision.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.ReviewsTable,
			Columns: []string{lawyer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !lu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.ReviewsTable,
			Columns: []string{lawyer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.ReviewsTable,
			Columns: []string{lawyer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.LawyerJurisdictionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lawyer.LawyerJurisdictionsTable,
			Columns: []string{lawyer.LawyerJurisdictionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lawyerjurisdiction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedLawyerJurisdictionsIDs(); len(nodes) > 0 && !lu.mutation.LawyerJurisdictionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lawyer.LawyerJurisdictionsTable,
			Columns: []string{lawyer.LawyerJurisdictionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lawyerjurisdiction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LawyerJurisdictionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lawyer.LawyerJurisdictionsTable,
			Columns: []string{lawyer.LawyerJurisdictionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lawyerjurisdiction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lawyer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LawyerUpdateOne is the builder for updating a single Lawyer entity.
type LawyerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LawyerMutation
}

// SetFullName sets the "full_name" field.
func (luo *LawyerUpdateOne) SetFullName(s string) *LawyerUpdateOne {
	luo.mutation.SetFullName(s)
	return luo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillableFullName(s *string) *LawyerUpdateOne {
	if s != nil {
		luo.SetFullName(*s)
	}
	return luo
}

// SetFirstName sets the "first_name" field.
func (luo *LawyerUpdateOne) SetFirstName(s string) *LawyerUpdateOne {
	luo.mutation.SetFirstName(s)
	return luo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillableFirstName(s *string) *LawyerUpdateOne {
	if s != nil {
		luo.SetFirstName(*s)
	}
	return luo
}

// SetMiddleName sets the "middle_name" field.
func (luo *LawyerUpdateOne) SetMiddleName(s string) *LawyerUpdateOne {
	luo.mutation.SetMiddleName(s)
	return luo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillableMiddleName(s *string) *LawyerUpdateOne {
	if s != nil {
		luo.SetMiddleName(*s)
	}
	return luo
}

// SetLastName sets the "last_name" field.
func (luo *LawyerUpdateOne) SetLastName(s string) *LawyerUpdateOne {
	luo.mutation.SetLastName(s)
	return luo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillableLastName(s *string) *LawyerUpdateOne {
	if s != nil {
		luo.SetLastName(*s)
	}
	return luo
}

// SetGender sets the "gender" field.
func (luo *LawyerUpdateOne) SetGender(s string) *LawyerUpdateOne {
	luo.mutation.SetGender(s)
	return luo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillableGender(s *string) *LawyerUpdateOne {
	if s != nil {
		luo.SetGender(*s)
	}
	return luo
}

// SetAddress sets the "address" field.
func (luo *LawyerUpdateOne) SetAddress(s string) *LawyerUpdateOne {
	luo.mutation.SetAddress(s)
	return luo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillableAddress(s *string) *LawyerUpdateOne {
	if s != nil {
		luo.SetAddress(*s)
	}
	return luo
}

// SetPhone sets the "phone" field.
func (luo *LawyerUpdateOne) SetPhone(s string) *LawyerUpdateOne {
	luo.mutation.SetPhone(s)
	return luo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillablePhone(s *string) *LawyerUpdateOne {
	if s != nil {
		luo.SetPhone(*s)
	}
	return luo
}

// SetPracticingStatus sets the "practicing_status" field.
func (luo *LawyerUpdateOne) SetPracticingStatus(s string) *LawyerUpdateOne {
	luo.mutation.SetPracticingStatus(s)
	return luo
}

// SetNillablePracticingStatus sets the "practicing_status" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillablePracticingStatus(s *string) *LawyerUpdateOne {
	if s != nil {
		luo.SetPracticingStatus(*s)
	}
	return luo
}

// SetProfileURL sets the "profile_url" field.
func (luo *LawyerUpdateOne) SetProfileURL(s string) *LawyerUpdateOne {
	luo.mutation.SetProfileURL(s)
	return luo
}

// SetNillableProfileURL sets the "profile_url" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillableProfileURL(s *string) *LawyerUpdateOne {
	if s != nil {
		luo.SetProfileURL(*s)
	}
	return luo
}

// SetAverageRating sets the "average_rating" field.
func (luo *LawyerUpdateOne) SetAverageRating(f float64) *LawyerUpdateOne {
	luo.mutation.ResetAverageRating()
	luo.mutation.SetAverageRating(f)
	return luo
}

// SetNillableAverageRating sets the "average_rating" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillableAverageRating(f *float64) *LawyerUpdateOne {
	if f != nil {
		luo.SetAverageRating(*f)
	}
	return luo
}

// AddAverageRating adds f to the "average_rating" field.
func (luo *LawyerUpdateOne) AddAverageRating(f float64) *LawyerUpdateOne {
	luo.mutation.AddAverageRating(f)
	return luo
}

// SetReviewCount sets the "review_count" field.
func (luo *LawyerUpdateOne) SetReviewCount(i int) *LawyerUpdateOne {
	luo.mutation.ResetReviewCount()
	luo.mutation.SetReviewCount(i)
	return luo
}

// SetNillableReviewCount sets the "review_count" field if the given value is not nil.
func (luo *LawyerUpdateOne) SetNillableReviewCount(i *int) *LawyerUpdateOne {
	if i != nil {
		luo.SetReviewCount(*i)
	}
	return luo
}

// AddReviewCount adds i to the "review_count" field.
func (luo *LawyerUpdateOne) AddReviewCount(i int) *LawyerUpdateOne {
	luo.mutation.AddReviewCount(i)
	return luo
}

// AddJurisdictionIDs adds the "jurisdictions" edge to the Jurisdiction entity by IDs.
func (luo *LawyerUpdateOne) AddJurisdictionIDs(ids ...int) *LawyerUpdateOne {
	luo.mutation.AddJurisdictionIDs(ids...)
	return luo
}

// AddJurisdictions adds the "jurisdictions" edges to the Jurisdiction entity.
func (luo *LawyerUpdateOne) AddJurisdictions(j ...*Jurisdiction) *LawyerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return luo.AddJurisdictionIDs(ids...)
}

// AddDecisionIDs adds the "decisions" edge to the Decision entity by IDs.
func (luo *LawyerUpdateOne) AddDecisionIDs(ids ...int) *LawyerUpdateOne {
	luo.mutation.AddDecisionIDs(ids...)
	return luo
}

// AddDecisions adds the "decisions" edges to the Decision entity.
func (luo *LawyerUpdateOne) AddDecisions(d ...*Decision) *LawyerUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return luo.AddDecisionIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (luo *LawyerUpdateOne) AddReviewIDs(ids ...int) *LawyerUpdateOne {
	luo.mutation.AddReviewIDs(ids...)
	return luo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (luo *LawyerUpdateOne) AddReviews(r ...*Review) *LawyerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return luo.AddReviewIDs(ids...)
}

// AddLawyerJurisdictionIDs adds the "lawyer_jurisdictions" edge to the LawyerJurisdiction entity by IDs.
func (luo *LawyerUpdateOne) AddLawyerJurisdictionIDs(ids ...int) *LawyerUpdateOne {
	luo.mutation.AddLawyerJurisdictionIDs(ids...)
	return luo
}

// AddLawyerJurisdictions adds the "lawyer_jurisdictions" edges to the LawyerJurisdiction entity.
func (luo *LawyerUpdateOne) AddLawyerJurisdictions(l ...*LawyerJurisdiction) *LawyerUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddLawyerJurisdictionIDs(ids...)
}

// Mutation returns the LawyerMutation object of the builder.
func (luo *LawyerUpdateOne) Mutation() *LawyerMutation {
	return luo.mutation
}

// ClearJurisdictions clears all "jurisdictions" edges to the Jurisdiction entity.
func (luo *LawyerUpdateOne) ClearJurisdictions() *LawyerUpdateOne {
	luo.mutation.ClearJurisdictions()
	return luo
}

// RemoveJurisdictionIDs removes the "jurisdictions" edge to Jurisdiction entities by IDs.
func (luo *LawyerUpdateOne) RemoveJurisdictionIDs(ids ...int) *LawyerUpdateOne {
	luo.mutation.RemoveJurisdictionIDs(ids...)
	return luo
}

// RemoveJurisdictions removes "jurisdictions" edges to Jurisdiction entities.
func (luo *LawyerUpdateOne) RemoveJurisdictions(j ...*Jurisdiction) *LawyerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return luo.RemoveJurisdictionIDs(ids...)
}

// ClearDecisions clears all "decisions" edges to the Decision entity.
func (luo *LawyerUpdateOne) ClearDecisions() *LawyerUpdateOne {
	luo.mutation.ClearDecisions()
	return luo
}

// RemoveDecisionIDs removes the "decisions" edge to Decision entities by IDs.
func (luo *LawyerUpdateOne) RemoveDecisionIDs(ids ...int) *LawyerUpdateOne {
	luo.mutation.RemoveDecisionIDs(ids...)
	return luo
}

// RemoveDecisions removes "decisions" edges to Decision entities.
func (luo *LawyerUpdateOne) RemoveDecisions(d ...*Decision) *LawyerUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return luo.RemoveDecisionIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (luo *LawyerUpdateOne) ClearReviews() *LawyerUpdateOne {
	luo.mutation.ClearReviews()
	return luo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (luo *LawyerUpdateOne) RemoveReviewIDs(ids ...int) *LawyerUpdateOne {
	luo.mutation.RemoveReviewIDs(ids...)
	return luo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (luo *LawyerUpdateOne) RemoveReviews(r ...*Review) *LawyerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return luo.RemoveReviewIDs(ids...)
}

// ClearLawyerJurisdictions clears all "lawyer_jurisdictions" edges to the LawyerJurisdiction entity.
func (luo *LawyerUpdateOne) ClearLawyerJurisdictions() *LawyerUpdateOne {
	luo.mutation.ClearLawyerJurisdictions()
	return luo
}

// RemoveLawyerJurisdictionIDs removes the "lawyer_jurisdictions" edge to LawyerJurisdiction entities by IDs.
func (luo *LawyerUpdateOne) RemoveLawyerJurisdictionIDs(ids ...int) *LawyerUpdateOne {
	luo.mutation.RemoveLawyerJurisdictionIDs(ids...)
	return luo
}

// RemoveLawyerJurisdictions removes "lawyer_jurisdictions" edges to LawyerJurisdiction entities.
func (luo *LawyerUpdateOne) RemoveLawyerJurisdictions(l ...*LawyerJurisdiction) *LawyerUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveLawyerJurisdictionIDs(ids...)
}

// Where appends a list predicates to the LawyerUpdate builder.
func (luo *LawyerUpdateOne) Where(ps ...predicate.Lawyer) *LawyerUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LawyerUpdateOne) Select(field string, fields ...string) *LawyerUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lawyer entity.
func (luo *LawyerUpdateOne) Save(ctx context.Context) (*Lawyer, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LawyerUpdateOne) SaveX(ctx context.Context) *Lawyer {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LawyerUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LawyerUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LawyerUpdateOne) check() error {
	if v, ok := luo.mutation.FullName(); ok {
		if err := lawyer.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Lawyer.full_name": %w`, err)}
		}
	}
	return nil
}

func (luo *LawyerUpdateOne) sqlSave(ctx context.Context) (_node *Lawyer, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lawyer.Table, lawyer.Columns, sqlgraph.NewFieldSpec(lawyer.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lawyer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lawyer.FieldID)
		for _, f := range fields {
			if !lawyer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lawyer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.FullName(); ok {
		_spec.SetField(lawyer.FieldFullName, field.TypeString, value)
	}
	if value, ok := luo.mutation.FirstName(); ok {
		_spec.SetField(lawyer.FieldFirstName, field.TypeString, value)
	}
	if value, ok := luo.mutation.MiddleName(); ok {
		_spec.SetField(lawyer.FieldMiddleName, field.TypeString, value)
	}
	if value, ok := luo.mutation.LastName(); ok {
		_spec.SetField(lawyer.FieldLastName, field.TypeString, value)
	}
	if value, ok := luo.mutation.Gender(); ok {
		_spec.SetField(lawyer.FieldGender, field.TypeString, value)
	}
	if value, ok := luo.mutation.Address(); ok {
		_spec.SetField(lawyer.FieldAddress, field.TypeString, value)
	}
	if value, ok := luo.mutation.Phone(); ok {
		_spec.SetField(lawyer.FieldPhone, field.TypeString, value)
	}
	if value, ok := luo.mutation.PracticingStatus(); ok {
		_spec.SetField(lawyer.FieldPracticingStatus, field.TypeString, value)
	}
	if value, ok := luo.mutation.ProfileURL(); ok {
		_spec.SetField(lawyer.FieldProfileURL, field.TypeString, value)
	}
	if value, ok := luo.mutation.AverageRating(); ok {
		_spec.SetField(lawyer.FieldAverageRating, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedAverageRating(); ok {
		_spec.AddField(lawyer.FieldAverageRating, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.ReviewCount(); ok {
		_spec.SetField(lawyer.FieldReviewCount, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedReviewCount(); ok {
		_spec.AddField(lawyer.FieldReviewCount, field.TypeInt, value)
	}
	if luo.mutation.JurisdictionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lawyer.JurisdictionsTable,
			Columns: lawyer.JurisdictionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jurisdiction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedJurisdictionsIDs(); len(nodes) > 0 && !luo.mutation.JurisdictionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lawyer.JurisdictionsTable,
			Columns: lawyer.JurisdictionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jurisdiction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.JurisdictionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   lawyer.JurisdictionsTable,
			Columns: lawyer.JurisdictionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jurisdiction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.DecisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.DecisionsTable,
			Columns: []string{lawyer.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decision.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedDecisionsIDs(); len(nodes) > 0 && !luo.mutation.DecisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.DecisionsTable,
			Columns: []string{lawyer.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decision.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.DecisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.DecisionsTable,
			Columns: []string{lawyer.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(decision.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.ReviewsTable,
			Columns: []string{lawyer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !luo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.ReviewsTable,
			Columns: []string{lawyer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lawyer.ReviewsTable,
			Columns: []string{lawyer.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.LawyerJurisdictionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lawyer.LawyerJurisdictionsTable,
			Columns: []string{lawyer.LawyerJurisdictionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lawyerjurisdiction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedLawyerJurisdictionsIDs(); len(nodes) > 0 && !luo.mutation.LawyerJurisdictionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lawyer.LawyerJurisdictionsTable,
			Columns: []string{lawyer.LawyerJurisdictionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lawyerjurisdiction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LawyerJurisdictionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lawyer.LawyerJurisdictionsTable,
			Columns: []string{lawyer.LawyerJurisdictionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lawyerjurisdiction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lawyer{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lawyer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
