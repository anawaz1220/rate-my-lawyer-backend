// Code generated by ent, DO NOT EDIT.

package lawyerjurisdiction

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldLTE(FieldID, id))
}

// LawyerID applies equality check predicate on the "lawyer_id" field. It's identical to LawyerIDEQ.
func LawyerID(v int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldEQ(FieldLawyerID, v))
}

// JurisdictionID applies equality check predicate on the "jurisdiction_id" field. It's identical to JurisdictionIDEQ.
func JurisdictionID(v int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldEQ(FieldJurisdictionID, v))
}

// LawyerIDEQ applies the EQ predicate on the "lawyer_id" field.
func LawyerIDEQ(v int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldEQ(FieldLawyerID, v))
}

// LawyerIDNEQ applies the NEQ predicate on the "lawyer_id" field.
func LawyerIDNEQ(v int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldNEQ(FieldLawyerID, v))
}

// LawyerIDIn applies the In predicate on the "lawyer_id" field.
func LawyerIDIn(vs ...int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldIn(FieldLawyerID, vs...))
}

// LawyerIDNotIn applies the NotIn predicate on the "lawyer_id" field.
func LawyerIDNotIn(vs ...int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldNotIn(FieldLawyerID, vs...))
}

// JurisdictionIDEQ applies the EQ predicate on the "jurisdiction_id" field.
func JurisdictionIDEQ(v int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldEQ(FieldJurisdictionID, v))
}

// JurisdictionIDNEQ applies the NEQ predicate on the "jurisdiction_id" field.
func JurisdictionIDNEQ(v int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldNEQ(FieldJurisdictionID, v))
}

// JurisdictionIDIn applies the In predicate on the "jurisdiction_id" field.
func JurisdictionIDIn(vs ...int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldIn(FieldJurisdictionID, vs...))
}

// JurisdictionIDNotIn applies the NotIn predicate on the "jurisdiction_id" field.
func JurisdictionIDNotIn(vs ...int) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.FieldNotIn(FieldJurisdictionID, vs...))
}

// HasLawyer applies the HasEdge predicate on the "lawyer" edge.
func HasLawyer() predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LawyerTable, LawyerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLawyerWith applies the HasEdge predicate on the "lawyer" edge with a given conditions (other predicates).
func HasLawyerWith(preds ...predicate.Lawyer) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(func(s *sql.Selector) {
		step := newLawyerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJurisdiction applies the HasEdge predicate on the "jurisdiction" edge.
func HasJurisdiction() predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, JurisdictionTable, JurisdictionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJurisdictionWith applies the HasEdge predicate on the "jurisdiction" edge with a given conditions (other predicates).
func HasJurisdictionWith(preds ...predicate.Jurisdiction) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(func(s *sql.Selector) {
		step := newJurisdictionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LawyerJurisdiction) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LawyerJurisdiction) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LawyerJurisdiction) predicate.LawyerJurisdiction {
	return predicate.LawyerJurisdiction(sql.NotPredicates(p))
}
