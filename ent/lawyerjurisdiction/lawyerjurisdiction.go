// Code generated by ent, DO NOT EDIT.

package lawyerjurisdiction

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lawyerjurisdiction type in the database.
	Label = "lawyer_jurisdiction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLawyerID holds the string denoting the lawyer_id field in the database.
	FieldLawyerID = "lawyer_id"
	// FieldJurisdictionID holds the string denoting the jurisdiction_id field in the database.
	FieldJurisdictionID = "jurisdiction_id"
	// EdgeLawyer holds the string denoting the lawyer edge name in mutations.
	EdgeLawyer = "lawyer"
	// EdgeJurisdiction holds the string denoting the jurisdiction edge name in mutations.
	EdgeJurisdiction = "jurisdiction"
	// Table holds the table name of the lawyerjurisdiction in the database.
	Table = "lawyer_jurisdictions"
	// LawyerTable is the table that holds the lawyer relation/edge.
	LawyerTable = "lawyer_jurisdictions"
	// LawyerInverseTable is the table name for the Lawyer entity.
	// It exists in this package in order to avoid circular dependency with the "lawyer" package.
	LawyerInverseTable = "lawyers"
	// LawyerColumn is the table column denoting the lawyer relation/edge.
	LawyerColumn = "lawyer_id"
	// JurisdictionTable is the table that holds the jurisdiction relation/edge.
	JurisdictionTable = "lawyer_jurisdictions"
	// JurisdictionInverseTable is the table name for the Jurisdiction entity.
	// It exists in this package in order to avoid circular dependency with the "jurisdiction" package.
	JurisdictionInverseTable = "jurisdictions"
	// JurisdictionColumn is the table column denoting the jurisdiction relation/edge.
	JurisdictionColumn = "jurisdiction_id"
)

// Columns holds all SQL columns for lawyerjurisdiction fields.
var Columns = []string{
	FieldID,
	FieldLawyerID,
	FieldJurisdictionID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the LawyerJurisdiction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLawyerID orders the results by the lawyer_id field.
func ByLawyerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLawyerID, opts...).ToFunc()
}

// ByJurisdictionID orders the results by the jurisdiction_id field.
func ByJurisdictionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJurisdictionID, opts...).ToFunc()
}

// ByLawyerField orders the results by lawyer field.
func ByLawyerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLawyerStep(), sql.OrderByField(field, opts...))
	}
}

// ByJurisdictionField orders the results by jurisdiction field.
func ByJurisdictionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJurisdictionStep(), sql.OrderByField(field, opts...))
	}
}
func newLawyerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LawyerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LawyerTable, LawyerColumn),
	)
}
func newJurisdictionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JurisdictionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, JurisdictionTable, JurisdictionColumn),
	)
}
