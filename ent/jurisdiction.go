// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/jurisdiction"
)

// Jurisdiction is the model entity for the Jurisdiction schema.
type Jurisdiction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JurisdictionQuery when eager-loading is set.
	Edges        JurisdictionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JurisdictionEdges holds the relations/edges for other nodes in the graph.
type JurisdictionEdges struct {
	// Lawyers holds the value of the lawyers edge.
	Lawyers []*Lawyer `json:"lawyers,omitempty"`
	// LawyerJurisdictions holds the value of the lawyer_jurisdictions edge.
	LawyerJurisdictions []*LawyerJurisdiction `json:"lawyer_jurisdictions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LawyersOrErr returns the Lawyers value or an error if the edge
// was not loaded in eager-loading.
func (e JurisdictionEdges) LawyersOrErr() ([]*Lawyer, error) {
	if e.loadedTypes[0] {
		return e.Lawyers, nil
	}
	return nil, &NotLoadedError{edge: "lawyers"}
}

// LawyerJurisdictionsOrErr returns the LawyerJurisdictions value or an error if the edge
// was not loaded in eager-loading.
func (e JurisdictionEdges) LawyerJurisdictionsOrErr() ([]*LawyerJurisdiction, error) {
	if e.loadedTypes[1] {
		return e.LawyerJurisdictions, nil
	}
	return nil, &NotLoadedError{edge: "lawyer_jurisdictions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Jurisdiction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jurisdiction.FieldID:
			values[i] = new(sql.NullInt64)
		case jurisdiction.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Jurisdiction fields.
func (j *Jurisdiction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jurisdiction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case jurisdiction.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				j.Name = value.String
			}
		default:
			j.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Jurisdiction.
// This includes values selected through modifiers, order, etc.
func (j *Jurisdiction) Value(name string) (ent.Value, error) {
	return j.selectValues.Get(name)
}

// QueryLawyers queries the "lawyers" edge of the Jurisdiction entity.
func (j *Jurisdiction) QueryLawyers() *LawyerQuery {
	return NewJurisdictionClient(j.config).QueryLawyers(j)
}

// QueryLawyerJurisdictions queries the "lawyer_jurisdictions" edge of the Jurisdiction entity.
func (j *Jurisdiction) QueryLawyerJurisdictions() *LawyerJurisdictionQuery {
	return NewJurisdictionClient(j.config).QueryLawyerJurisdictions(j)
}

// Update returns a builder for updating this Jurisdiction.
// Note that you need to call Jurisdiction.Unwrap() before calling this method if this Jurisdiction
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Jurisdiction) Update() *JurisdictionUpdateOne {
	return NewJurisdictionClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Jurisdiction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Jurisdiction) Unwrap() *Jurisdiction {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Jurisdiction is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Jurisdiction) String() string {
	var builder strings.Builder
	builder.WriteString("Jurisdiction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("name=")
	builder.WriteString(j.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Jurisdictions is a parsable slice of Jurisdiction.
type Jurisdictions []*Jurisdiction
