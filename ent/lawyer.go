// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/lawyer"
)

// Lawyer is the model entity for the Lawyer schema.
type Lawyer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// MiddleName holds the value of the "middle_name" field.
	MiddleName string `json:"middle_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// PracticingStatus holds the value of the "practicing_status" field.
	PracticingStatus string `json:"practicing_status,omitempty"`
	// ProfileURL holds the value of the "profile_url" field.
	ProfileURL string `json:"profile_url,omitempty"`
	// AverageRating holds the value of the "average_rating" field.
	AverageRating float64 `json:"average_rating,omitempty"`
	// ReviewCount holds the value of the "review_count" field.
	ReviewCount int `json:"review_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LawyerQuery when eager-loading is set.
	Edges        LawyerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LawyerEdges holds the relations/edges for other nodes in the graph.
type LawyerEdges struct {
	// Jurisdictions holds the value of the jurisdictions edge.
	Jurisdictions []*Jurisdiction `json:"jurisdictions,omitempty"`
	// Decisions holds the value of the decisions edge.
	Decisions []*Decision `json:"decisions,omitempty"`
	// Reviews holds the value of the reviews edge.
	Reviews []*Review `json:"reviews,omitempty"`
	// LawyerJurisdictions holds the value of the lawyer_jurisdictions edge.
	LawyerJurisdictions []*LawyerJurisdiction `json:"lawyer_jurisdictions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// JurisdictionsOrErr returns the Jurisdictions value or an error if the edge
// was not loaded in eager-loading.
func (e LawyerEdges) JurisdictionsOrErr() ([]*Jurisdiction, error) {
	if e.loadedTypes[0] {
		return e.Jurisdictions, nil
	}
	return nil, &NotLoadedError{edge: "jurisdictions"}
}

// DecisionsOrErr returns the Decisions value or an error if the edge
// was not loaded in eager-loading.
func (e LawyerEdges) DecisionsOrErr() ([]*Decision, error) {
	if e.loadedTypes[1] {
		return e.Decisions, nil
	}
	return nil, &NotLoadedError{edge: "decisions"}
}

// ReviewsOrErr returns the Reviews value or an error if the edge
// was not loaded in eager-loading.
func (e LawyerEdges) ReviewsOrErr() ([]*Review, error) {
	if e.loadedTypes[2] {
		return e.Reviews, nil
	}
	return nil, &NotLoadedError{edge: "reviews"}
}

// LawyerJurisdictionsOrErr returns the LawyerJurisdictions value or an error if the edge
// was not loaded in eager-loading.
func (e LawyerEdges) LawyerJurisdictionsOrErr() ([]*LawyerJurisdiction, error) {
	if e.loadedTypes[3] {
		return e.LawyerJurisdictions, nil
	}
	return nil, &NotLoadedError{edge: "lawyer_jurisdictions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lawyer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lawyer.FieldAverageRating:
			values[i] = new(sql.NullFloat64)
		case lawyer.FieldID, lawyer.FieldReviewCount:
			values[i] = new(sql.NullInt64)
		case lawyer.FieldFullName, lawyer.FieldFirstName, lawyer.FieldMiddleName, lawyer.FieldLastName, lawyer.FieldGender, lawyer.FieldAddress, lawyer.FieldPhone, lawyer.FieldPracticingStatus, lawyer.FieldProfileURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lawyer fields.
func (l *Lawyer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lawyer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case lawyer.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				l.FullName = value.String
			}
		case lawyer.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				l.FirstName = value.String
			}
		case lawyer.FieldMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field middle_name", values[i])
			} else if value.Valid {
				l.MiddleName = value.String
			}
		case lawyer.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				l.LastName = value.String
			}
		case lawyer.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				l.Gender = value.String
			}
		case lawyer.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				l.Address = value.String
			}
		case lawyer.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				l.Phone = value.String
			}
		case lawyer.FieldPracticingStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field practicing_status", values[i])
			} else if value.Valid {
				l.PracticingStatus = value.String
			}
		case lawyer.FieldProfileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_url", values[i])
			} else if value.Valid {
				l.ProfileURL = value.String
			}
		case lawyer.FieldAverageRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field average_rating", values[i])
			} else if value.Valid {
				l.AverageRating = value.Float64
			}
		case lawyer.FieldReviewCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field review_count", values[i])
			} else if value.Valid {
				l.ReviewCount = int(value.Int64)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Lawyer.
// This includes values selected through modifiers, order, etc.
func (l *Lawyer) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryJurisdictions queries the "jurisdictions" edge of the Lawyer entity.
func (l *Lawyer) QueryJurisdictions() *JurisdictionQuery {
	return NewLawyerClient(l.config).QueryJurisdictions(l)
}

// QueryDecisions queries the "decisions" edge of the Lawyer entity.
func (l *Lawyer) QueryDecisions() *DecisionQuery {
	return NewLawyerClient(l.config).QueryDecisions(l)
}

// QueryReviews queries the "reviews" edge of the Lawyer entity.
func (l *Lawyer) QueryReviews() *ReviewQuery {
	return NewLawyerClient(l.config).QueryReviews(l)
}

// QueryLawyerJurisdictions queries the "lawyer_jurisdictions" edge of the Lawyer entity.
func (l *Lawyer) QueryLawyerJurisdictions() *LawyerJurisdictionQuery {
	return NewLawyerClient(l.config).QueryLawyerJurisdictions(l)
}

// Update returns a builder for updating this Lawyer.
// Note that you need to call Lawyer.Unwrap() before calling this method if this Lawyer
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lawyer) Update() *LawyerUpdateOne {
	return NewLawyerClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Lawyer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lawyer) Unwrap() *Lawyer {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lawyer is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lawyer) String() string {
	var builder strings.Builder
	builder.WriteString("Lawyer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("full_name=")
	builder.WriteString(l.FullName)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(l.FirstName)
	builder.WriteString(", ")
	builder.WriteString("middle_name=")
	builder.WriteString(l.MiddleName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(l.LastName)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(l.Gender)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(l.Address)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(l.Phone)
	builder.WriteString(", ")
	builder.WriteString("practicing_status=")
	builder.WriteString(l.PracticingStatus)
	builder.WriteString(", ")
	builder.WriteString("profile_url=")
	builder.WriteString(l.ProfileURL)
	builder.WriteString(", ")
	builder.WriteString("average_rating=")
	builder.WriteString(fmt.Sprintf("%v", l.AverageRating))
	builder.WriteString(", ")
	builder.WriteString("review_count=")
	builder.WriteString(fmt.Sprintf("%v", l.ReviewCount))
	builder.WriteByte(')')
	return builder.String()
}

// Lawyers is a parsable slice of Lawyer.
type Lawyers []*Lawyer
